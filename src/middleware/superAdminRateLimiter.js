/**
 * Rate Limiter sp√©cifique pour les actions sensibles SUPER_ADMIN
 */

const rateLimit = require('express-rate-limit');
const { isSuperAdmin } = require('../utils/superAdminHelper');

/**
 * Rate limiter pour les actions sensibles SUPER_ADMIN
 * Limite: 50 requ√™tes par 15 minutes par utilisateur
 */
const superAdminActionLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 50, // 50 requ√™tes max
    standardHeaders: true,
    legacyHeaders: false,
    message: {
        success: false,
        message: 'Trop de requ√™tes sensibles. Veuillez r√©essayer dans 15 minutes.',
        reason: 'Rate limit d√©pass√© pour les actions SUPER_ADMIN'
    },
    // Utiliser l'ID utilisateur comme cl√© pour le rate limiting
    keyGenerator: (req) => {
        return req.user?.id || req.ip;
    },
    // Ne s'applique qu'aux actions SUPER_ADMIN sensibles
    skip: async (req) => {
        // Ne pas appliquer le rate limiting aux requ√™tes GET (lecture)
        if (req.method === 'GET') {
            return true;
        }
        
        // Appliquer uniquement aux actions de modification/suppression d'utilisateurs SUPER_ADMIN
        // ou d'attribution/r√©vocation de r√¥les SUPER_ADMIN
        const targetUserId = req.params.id;
        const roleId = req.body?.roleId || req.params.roleId;
        
        if (!targetUserId && !roleId) {
            return true; // Pas d'action sensible d√©tect√©e
        }
        
        try {
            // V√©rifier si l'utilisateur cible est SUPER_ADMIN
            if (targetUserId) {
                const isTargetSuperAdmin = await isSuperAdmin(targetUserId);
                if (isTargetSuperAdmin) {
                    return false; // Appliquer le rate limiting
                }
            }
            
            // V√©rifier si le r√¥le est SUPER_ADMIN
            if (roleId) {
                const { pool } = require('../utils/database');
                const roleResult = await pool.query('SELECT name FROM roles WHERE id = $1', [roleId]);
                const roleName = roleResult.rows[0]?.name;
                
                if (roleName === 'SUPER_ADMIN') {
                    return false; // Appliquer le rate limiting
                }
            }
        } catch (error) {
            console.error('Erreur dans le rate limiter:', error);
        }
        
        return true; // Ne pas appliquer le rate limiting par d√©faut
    },
    // Handler personnalis√© pour les d√©passements
    handler: (req, res) => {
        console.warn(`‚ö†Ô∏è  Rate limit d√©pass√© pour l'utilisateur ${req.user?.id} (IP: ${req.ip})`);
        
        res.status(429).json({
            success: false,
            message: 'Trop de requ√™tes sensibles',
            reason: 'Vous avez effectu√© trop d\'actions sensibles en peu de temps. Veuillez patienter 15 minutes avant de r√©essayer.',
            retryAfter: '15 minutes'
        });
    }
});

/**
 * Rate limiter strict pour les tentatives d'acc√®s non autoris√©es
 * Limite: 5 tentatives par heure par IP
 */
const unauthorizedAccessLimiter = rateLimit({
    windowMs: 60 * 60 * 1000, // 1 heure
    max: 5, // 5 tentatives max
    standardHeaders: true,
    legacyHeaders: false,
    message: {
        success: false,
        message: 'Trop de tentatives d\'acc√®s non autoris√©es',
        reason: 'Votre acc√®s a √©t√© temporairement bloqu√© pour des raisons de s√©curit√©'
    },
    keyGenerator: (req) => {
        return req.ip;
    },
    handler: (req, res) => {
        console.error(`üö® ALERTE S√âCURIT√â: Tentatives d'acc√®s non autoris√©es r√©p√©t√©es depuis ${req.ip}`);
        
        // TODO: Envoyer une alerte email/SMS √† l'√©quipe de s√©curit√©
        
        res.status(429).json({
            success: false,
            message: 'Acc√®s temporairement bloqu√©',
            reason: 'Trop de tentatives d\'acc√®s non autoris√©es. Votre IP a √©t√© temporairement bloqu√©e pour des raisons de s√©curit√©.',
            retryAfter: '1 heure'
        });
    }
});

module.exports = {
    superAdminActionLimiter,
    unauthorizedAccessLimiter
};


