const express = require('express');
const router = express.Router();
const TimeEntry = require('../models/TimeEntry');
const TimeSheet = require('../models/TimeSheet');
const { authenticateToken } = require('../middleware/auth');

// ROUTES DE COMPATIBILIT√â POUR L'ANCIEN FRONTEND
// GET /api/time-entries - R√©cup√©rer les entr√©es d'un utilisateur (compatibilit√©)
router.get('/', authenticateToken, async (req, res) => {
    try {
        const { user_id, date, week_start, week_end, time_sheet_id } = req.query;
        const userId = user_id || req.user.id;

        let entries = [];
        
        if (time_sheet_id) {
            // R√©cup√©rer les entr√©es pour une feuille de temps sp√©cifique
            console.log(`üîç R√©cup√©ration des entr√©es pour la feuille de temps: ${time_sheet_id}`);
            entries = await TimeEntry.findByTimeSheet(time_sheet_id);
            console.log(`‚úÖ ${entries.length} entr√©es trouv√©es pour la feuille ${time_sheet_id}`);
        } else if (userId) {
            if (week_start && week_end) {
                // R√©cup√©rer les entr√©es pour une p√©riode sp√©cifique
                entries = await TimeEntry.findByUserAndPeriod(userId, week_start, week_end);
            } else if (date) {
                // R√©cup√©rer les entr√©es pour une date sp√©cifique
                const weekStart = new Date(date);
                weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 1);
                const weekEnd = new Date(weekStart);
                weekEnd.setDate(weekStart.getDate() + 6);
                
                entries = await TimeEntry.findByUserAndPeriod(userId, weekStart.toISOString().split('T')[0], weekEnd.toISOString().split('T')[0]);
            } else {
                // Retourner un tableau vide pour la compatibilit√©
                entries = [];
            }
        } else {
            return res.status(400).json({ 
                success: false, 
                message: 'ID utilisateur ou ID feuille de temps requis' 
            });
        }

        res.json({
            success: true,
            data: entries
        });

    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des entr√©es:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Erreur lors de la r√©cup√©ration des entr√©es',
            error: error.message 
        });
    }
});

// POST /api/time-entries - Cr√©er une entr√©e (compatibilit√©)
router.post('/', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.id;
        const {
            user_id,
            date_saisie,
            heures,
            mission_id,
            task_id,
            internal_activity_id,
            type_heures = 'HC',
            description
        } = req.body;

        // Validation des donn√©es
        if (!date_saisie || type_heures === undefined) {
            return res.status(400).json({ 
                success: false, 
                message: 'Donn√©es manquantes' 
            });
        }

        // Pour l'instant, accepter les UUIDs tronqu√©s (compatibilit√©)
        // TODO: Corriger le frontend pour envoyer des UUIDs complets
        
        // Cr√©er ou r√©cup√©rer la feuille de temps pour cette semaine
        const weekStart = new Date(date_saisie);
        weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 1); // Lundi de la semaine
        
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6); // Dimanche de la semaine

        let timeSheet = await TimeSheet.findOrCreate(
            userId, 
            weekStart.toISOString().split('T')[0],
            weekEnd.toISOString().split('T')[0]
        );

        // Cr√©er l'entr√©e d'heures
        const timeEntryData = {
            time_sheet_id: timeSheet.id,
            user_id: userId,
            date_saisie,
            heures: parseFloat(heures) || 0,
            type_heures: type_heures, // Utiliser directement la valeur envoy√©e par le frontend
            mission_id: type_heures === 'HC' ? mission_id : null,
            task_id: type_heures === 'HC' ? task_id : null,
            internal_activity_id: type_heures === 'HNC' ? internal_activity_id : null,
            description: description || 'Saisie automatique'
        };

        const entry = await TimeEntry.findOrCreate(timeEntryData);

        res.json({
            success: true,
            message: entry ? 'Entr√©e cr√©√©e avec succ√®s' : 'Entr√©e supprim√©e (heures = 0)',
            data: entry
        });

    } catch (error) {
        console.error('Erreur lors de la cr√©ation de l\'entr√©e de temps:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Erreur lors de la cr√©ation de l\'entr√©e de temps',
            error: error.message 
        });
    }
});

// PUT /api/time-entries/:id - Mettre √† jour une entr√©e existante
router.put('/:id', authenticateToken, async (req, res) => {
    try {
        const { id } = req.params;
        const { heures } = req.body;

        if (heures === undefined) {
            return res.status(400).json({ 
                success: false, 
                message: 'Heures requises' 
            });
        }

        const updatedEntry = await TimeEntry.update(id, { heures: parseFloat(heures) || 0 });

        if (!updatedEntry) {
            return res.status(404).json({ 
                success: false, 
                message: 'Entr√©e non trouv√©e' 
            });
        }

        res.json({
            success: true,
            message: 'Entr√©e mise √† jour avec succ√®s',
            data: updatedEntry
        });

    } catch (error) {
        console.error('Erreur lors de la mise √† jour de l\'entr√©e de temps:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Erreur lors de la mise √† jour de l\'entr√©e de temps',
            error: error.message 
        });
    }
});

// DELETE /api/time-entries/delete-week - Supprimer toutes les entr√©es d'une semaine
router.delete('/delete-week', authenticateToken, async (req, res) => {
    try {
        const { user_id, week_start, week_end } = req.query;
        const userId = user_id || req.user.id;

        if (!userId || !week_start || !week_end) {
            return res.status(400).json({ 
                success: false, 
                message: 'Param√®tres manquants: user_id, week_start, week_end' 
            });
        }

        // V√©rifier que l'utilisateur demande la suppression de ses propres entr√©es
        if (user_id && user_id !== req.user.id) {
            return res.status(403).json({ 
                success: false, 
                message: 'Acc√®s non autoris√©' 
            });
        }

        // Supprimer toutes les entr√©es de la semaine pour cet utilisateur
        const deletedCount = await TimeEntry.deleteByUserAndPeriod(userId, week_start, week_end);

        res.json({
            success: true,
            message: `${deletedCount} entr√©e(s) supprim√©e(s) avec succ√®s`,
            deletedCount
        });

    } catch (error) {
        console.error('Erreur lors de la suppression des entr√©es de la semaine:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Erreur lors de la suppression des entr√©es de la semaine',
            error: error.message 
        });
    }
});

// DELETE /api/time-entries/:id - Supprimer une entr√©e individuelle
router.delete('/:id', authenticateToken, async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.user.id;

        // V√©rifier que l'entr√©e appartient √† l'utilisateur connect√©
        const entry = await TimeEntry.findById(id);
        if (!entry) {
            return res.status(404).json({ 
                success: false, 
                message: 'Entr√©e non trouv√©e' 
            });
        }

        if (entry.user_id !== userId) {
            return res.status(403).json({ 
                success: false, 
                message: 'Acc√®s non autoris√©' 
            });
        }

        const deleted = await TimeEntry.delete(id);

        if (!deleted) {
            return res.status(404).json({ 
                success: false, 
                message: 'Entr√©e non trouv√©e' 
            });
        }

        res.json({
            success: true,
            message: 'Entr√©e supprim√©e avec succ√®s'
        });

    } catch (error) {
        console.error('Erreur lors de la suppression de l\'entr√©e de temps:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Erreur lors de la suppression de l\'entr√©e de temps',
            error: error.message 
        });
    }
});

module.exports = router; 