const express = require('express');
const FiscalYear = require('../models/FiscalYear');
const { fiscalYearValidation } = require('../utils/validators');
const { authenticateToken, requirePermission } = require('../middleware/auth');

const router = express.Router();

// R√©cup√©rer toutes les ann√©es fiscales
router.get('/', async (req, res) => {
    try {
        const result = await FiscalYear.findAll();

        res.json({
            success: true,
            message: 'Ann√©es fiscales r√©cup√©r√©es avec succ√®s',
            data: result.fiscalYears || []
        });

    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des ann√©es fiscales:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

// R√©cup√©rer les statistiques des ann√©es fiscales
router.get('/stats', authenticateToken, async (req, res) => {
    try {
        const stats = await FiscalYear.getGlobalStats();
        console.log('üìä Statistiques r√©cup√©r√©es:', stats);
        
        res.json({
            success: true,
            message: 'Statistiques r√©cup√©r√©es avec succ√®s',
            data: {
                total: parseInt(stats.total_fiscal_years) || 0,
                en_cours: parseInt(stats.current_years) || 0,
                ouverts: parseInt(stats.open_years) || 0,
                fermes: parseInt(stats.closed_years) || 0,
                budget_total: parseFloat(stats.total_budget) || 0
            }
        });
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
        console.error('‚ùå Stack:', error.stack);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur',
            error: error.message
        });
    }
});

// R√©cup√©rer une ann√©e fiscale par ID
router.get('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const fiscalYear = await FiscalYear.findById(id);

        if (!fiscalYear) {
            return res.status(404).json({
                success: false,
                message: 'Ann√©e fiscale non trouv√©e'
            });
        }

        res.json({
            success: true,
            message: 'Ann√©e fiscale r√©cup√©r√©e avec succ√®s',
            data: fiscalYear
        });

    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration de l\'ann√©e fiscale:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

// Cr√©er une nouvelle ann√©e fiscale
router.post('/', authenticateToken, requirePermission('fiscal_years:create'), async (req, res) => {
    try {
        const { error, value } = fiscalYearValidation.create.validate(req.body);
        if (error) {
            return res.status(400).json({
                success: false,
                message: 'Donn√©es invalides',
                errors: error.details.map(detail => detail.message)
            });
        }

        const newFiscalYear = await FiscalYear.create(value);

        res.status(201).json({
            success: true,
            message: 'Ann√©e fiscale cr√©√©e avec succ√®s',
            data: newFiscalYear
        });

    } catch (error) {
        console.error('Erreur lors de la cr√©ation de l\'ann√©e fiscale:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

// Mettre √† jour une ann√©e fiscale
router.put('/:id', authenticateToken, async (req, res) => {
    try {
        console.log('üîç D√©but mise √† jour ann√©e fiscale');
        const { id } = req.params;
        console.log('üìù ID:', id);
        console.log('üìù Body:', req.body);
        
        const { error, value } = fiscalYearValidation.update.validate(req.body);
        console.log('üìù Validation result:', { error, value });
        
        if (error) {
            console.log('‚ùå Erreur de validation:', error.details);
            return res.status(400).json({
                success: false,
                message: 'Donn√©es invalides',
                errors: error.details.map(detail => detail.message)
            });
        }

        console.log('üîç Recherche de l\'ann√©e fiscale...');
        const fiscalYear = await FiscalYear.findById(id);
        if (!fiscalYear) {
            console.log('‚ùå Ann√©e fiscale non trouv√©e');
            return res.status(404).json({
                success: false,
                message: 'Ann√©e fiscale non trouv√©e'
            });
        }
        console.log('‚úÖ Ann√©e fiscale trouv√©e:', fiscalYear.libelle);

        console.log('üîç Appel de update...');
        const updatedFiscalYear = await FiscalYear.update(id, value);
        console.log('‚úÖ Update termin√©:', updatedFiscalYear);

        res.json({
            success: true,
            message: 'Ann√©e fiscale mise √† jour avec succ√®s',
            data: updatedFiscalYear
        });

    } catch (error) {
        console.error('‚ùå Erreur d√©taill√©e lors de la mise √† jour:', error);
        console.error('‚ùå Stack:', error.stack);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

// Supprimer une ann√©e fiscale
router.delete('/:id', authenticateToken, requirePermission('fiscal_years:delete'), async (req, res) => {
    try {
        const { id } = req.params;
        const fiscalYear = await FiscalYear.findById(id);
        
        if (!fiscalYear) {
            return res.status(404).json({
                success: false,
                message: 'Ann√©e fiscale non trouv√©e'
            });
        }

        await FiscalYear.delete(id);

        res.json({
            success: true,
            message: 'Ann√©e fiscale supprim√©e avec succ√®s'
        });

    } catch (error) {
        console.error('Erreur lors de la suppression de l\'ann√©e fiscale:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

// Marquer une ann√©e fiscale comme en cours
router.put('/:id/set-as-current', authenticateToken, async (req, res) => {
    try {
        console.log('üîç D√©but set-as-current pour ID:', req.params.id);
        const { id } = req.params;
        
        console.log('üîç Recherche de l\'ann√©e fiscale...');
        const fiscalYear = await FiscalYear.findById(id);
        
        if (!fiscalYear) {
            console.log('‚ùå Ann√©e fiscale non trouv√©e');
            return res.status(404).json({
                success: false,
                message: 'Ann√©e fiscale non trouv√©e'
            });
        }
        
        console.log('‚úÖ Ann√©e fiscale trouv√©e:', fiscalYear);
        console.log('üîç Appel de setAsCurrent...');
        const updatedFiscalYear = await FiscalYear.setAsCurrent(id);
        console.log('‚úÖ setAsCurrent termin√©:', updatedFiscalYear);

        res.json({
            success: true,
            message: 'Ann√©e fiscale marqu√©e comme en cours avec succ√®s',
            data: updatedFiscalYear
        });

    } catch (error) {
        console.error('‚ùå Erreur d√©taill√©e lors du changement de statut:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur',
            error: error.message
        });
    }
});

// Ouvrir une ann√©e fiscale
router.put('/:id/open', authenticateToken, async (req, res) => {
    try {
        const { id } = req.params;
        const fiscalYear = await FiscalYear.findById(id);
        
        if (!fiscalYear) {
            return res.status(404).json({
                success: false,
                message: 'Ann√©e fiscale non trouv√©e'
            });
        }

        const updatedFiscalYear = await FiscalYear.open(id);

        res.json({
            success: true,
            message: 'Ann√©e fiscale ouverte avec succ√®s',
            data: updatedFiscalYear
        });

    } catch (error) {
        console.error('Erreur lors du changement de statut:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

// Fermer une ann√©e fiscale
router.put('/:id/close', authenticateToken, async (req, res) => {
    try {
        const { id } = req.params;
        const fiscalYear = await FiscalYear.findById(id);
        
        if (!fiscalYear) {
            return res.status(404).json({
                success: false,
                message: 'Ann√©e fiscale non trouv√©e'
            });
        }

        const updatedFiscalYear = await FiscalYear.close(id);

        res.json({
            success: true,
            message: 'Ann√©e fiscale ferm√©e avec succ√®s',
            data: updatedFiscalYear
        });

    } catch (error) {
        console.error('Erreur lors du changement de statut:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur interne du serveur'
        });
    }
});

module.exports = router; 