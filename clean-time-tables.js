const { Pool } = require('pg');

const pool = new Pool({
    host: 'localhost',
    port: 5432,
    database: 'eb_vision_2_0',
    user: 'postgres',
    password: 'Canaan@2020'
});

async function cleanTimeTables() {
    try {
        console.log('üßπ Nettoyage des tables de temps...\n');
        
        // 1. V√©rifier le contenu actuel
        console.log('üìä 1. Contenu actuel des tables:');
        
        const timeSheetsCount = await pool.query('SELECT COUNT(*) as count FROM time_sheets');
        const timeEntriesCount = await pool.query('SELECT COUNT(*) as count FROM time_entries');
        
        console.log(`  - time_sheets: ${timeSheetsCount.rows[0].count} feuilles`);
        console.log(`  - time_entries: ${timeEntriesCount.rows[0].count} entr√©es`);
        console.log('');
        
        // 2. Demander confirmation
        console.log('‚ö†Ô∏è ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es de temps !');
        console.log('   - Toutes les feuilles de temps seront supprim√©es');
        console.log('   - Toutes les entr√©es de temps seront supprim√©es');
        console.log('   - Les utilisateurs et autres donn√©es seront conserv√©s');
        console.log('');
        
        // 3. Supprimer les donn√©es dans l'ordre (time_entries d'abord √† cause des cl√©s √©trang√®res)
        console.log('üóëÔ∏è 2. Suppression des entr√©es de temps...');
        const deleteEntriesResult = await pool.query('DELETE FROM time_entries');
        console.log(`  ‚úÖ ${deleteEntriesResult.rowCount} entr√©es de temps supprim√©es`);
        
        console.log('üóëÔ∏è 3. Suppression des feuilles de temps...');
        const deleteSheetsResult = await pool.query('DELETE FROM time_sheets');
        console.log(`  ‚úÖ ${deleteSheetsResult.rowCount} feuilles de temps supprim√©es`);
        
        // 4. V√©rifier le r√©sultat
        console.log('\nüìä 4. V√©rification du nettoyage:');
        
        const finalSheetsCount = await pool.query('SELECT COUNT(*) as count FROM time_sheets');
        const finalEntriesCount = await pool.query('SELECT COUNT(*) as count FROM time_entries');
        
        console.log(`  - time_sheets: ${finalSheetsCount.rows[0].count} feuilles`);
        console.log(`  - time_entries: ${finalEntriesCount.rows[0].count} entr√©es`);
        
        if (finalSheetsCount.rows[0].count === 0 && finalEntriesCount.rows[0].count === 0) {
            console.log('\n‚úÖ Nettoyage r√©ussi ! Les tables de temps sont vides.');
            console.log('üéØ Vous pouvez maintenant repartir sur des bases propres pour les tests.');
        } else {
            console.log('\n‚ö†Ô∏è Attention: Il reste encore des donn√©es dans les tables.');
        }
        
        // 5. V√©rifier que les autres tables sont intactes
        console.log('\nüîç 5. V√©rification des autres tables (doivent √™tre intactes):');
        
        const usersCount = await pool.query('SELECT COUNT(*) as count FROM users');
        const missionsCount = await pool.query('SELECT COUNT(*) as count FROM missions');
        const tasksCount = await pool.query('SELECT COUNT(*) as count FROM tasks');
        const internalActivitiesCount = await pool.query('SELECT COUNT(*) as count FROM internal_activities');
        
        console.log(`  - users: ${usersCount.rows[0].count} utilisateurs`);
        console.log(`  - missions: ${missionsCount.rows[0].count} missions`);
        console.log(`  - tasks: ${tasksCount.rows[0].count} t√¢ches`);
        console.log(`  - internal_activities: ${internalActivitiesCount.rows[0].count} activit√©s internes`);
        
        console.log('\nüéâ Nettoyage termin√© avec succ√®s !');
        console.log('‚úÖ Les tables de temps sont vides');
        console.log('‚úÖ Les autres donn√©es sont conserv√©es');
        console.log('üöÄ Vous pouvez maintenant tester les fonctionnalit√©s de saisie de temps');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du nettoyage:', error);
    } finally {
        await pool.end();
    }
}

cleanTimeTables();
