#!/usr/bin/env node

/**
 * Script d'importation des donn√©es CSV existantes
 * EB-Vision 2.0
 */

require('dotenv').config();
const CSVAnalyzer = require('./src/utils/csv-analyzer');
const CSVImporter = require('./src/utils/csv-importer');
const { connectDatabase } = require('./src/utils/database');

async function main() {
    try {
        console.log('üîÑ D√âMARRAGE DE L\'IMPORTATION DES DONN√âES CSV');
        console.log('==============================================\n');

        // 1. Connexion √† la base de donn√©es
        console.log('üîó Connexion √† la base de donn√©es...');
        await connectDatabase();
        console.log('‚úÖ Connexion √©tablie\n');

        // 2. Analyser les fichiers CSV existants
        console.log('üîç ANALYSE DES FICHIERS CSV');
        console.log('==========================');
        const analyzer = new CSVAnalyzer();
        const analyses = await analyzer.analyzeAllFiles();
        const report = analyzer.generateReport(analyses);

        console.log('\nüìã RAPPORT D\'ANALYSE');
        console.log('===================');
        console.log(`üìÅ Fichiers trouv√©s: ${report.summary.existingFiles}/${report.summary.totalFiles}`);
        console.log(`üìä Total des lignes: ${report.summary.totalRows}`);

        // Afficher les recommandations
        console.log('\nüéØ RECOMMANDATIONS D\'IMPORTATION');
        console.log('===============================');
        report.recommendations.forEach(rec => {
            console.log(`üìÑ ${rec.file} ‚Üí ${rec.targetTable} (${rec.priority})`);
            console.log(`   Mapping: ${Object.keys(rec.mapping).length} colonnes`);
        });

        // 3. Demander confirmation
        console.log('\n‚ùì Voulez-vous proc√©der √† l\'importation ? (y/n)');
        process.stdin.once('data', async (data) => {
            const answer = data.toString().trim().toLowerCase();
            
            if (answer === 'y' || answer === 'yes' || answer === 'o' || answer === 'oui') {
                console.log('\nüöÄ D√âBUT DE L\'IMPORTATION...\n');
                
                try {
                    // 4. Lancer l'importation
                    const importer = new CSVImporter();
                    await importer.importAllCSV();
                    
                    console.log('\nüéâ IMPORTATION TERMIN√âE AVEC SUCC√àS !');
                    console.log('=====================================');
                    console.log('‚úÖ Toutes les donn√©es ont √©t√© import√©es');
                    console.log('‚úÖ L\'application est pr√™te √† √™tre utilis√©e');
                    console.log('\nüîó URL: http://localhost:3000');
                    console.log('üë§ Admin: admin@eb-vision.com / Admin123!');
                    
                } catch (error) {
                    console.error('\n‚ùå Erreur lors de l\'importation:', error.message);
                    process.exit(1);
                }
            } else {
                console.log('\n‚ùå Importation annul√©e');
            }
            
            process.exit(0);
        });

    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
        process.exit(1);
    }
}

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
    console.error('‚ùå Erreur non captur√©e:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
    process.exit(1);
});

// Lancer le script
main(); 