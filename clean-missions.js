const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';

// Token d'authentification
const AUTH_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjhlYjU0OTE2LWEwYjMtNGY5ZS1hY2QxLTc1ODMwMjcxZmViYWIiLCJlbWFpbCI6ImFkbWluQHRycy5jb20iLCJub20iOiJBZG1pbmlzdHJhdGV1ciIsInByZW5vbSI6IlN5c3TDqG1lIiwicm9sZSI6IkFETUlOIiwicGVybWlzc2lvbnMiOlsidXNlcnM6cmVhZCIsInVzZXJzOmNyZWF0ZSIsInVzZXJzOnVwZGF0ZSIsInVzZXJzOmRlbGV0ZSJdLCJpYXQiOjE3NTQ0ODQyMDMsImV4cCI6MTc1NDU3MDYwM30.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

async function cleanMissions() {
    try {
        console.log('üßπ Nettoyage des missions...\n');
        
        const headers = {
            'Authorization': `Bearer ${AUTH_TOKEN}`,
            'Content-Type': 'application/json'
        };
        
        // 1. R√©cup√©rer toutes les missions
        console.log('üìã R√©cup√©ration de toutes les missions...');
        const missionsResponse = await axios.get(`${API_BASE_URL}/missions`, { headers });
        const missions = missionsResponse.data.data || missionsResponse.data || [];
        
        console.log(`üìä ${missions.length} missions trouv√©es`);
        
        // 2. Identifier les missions √† conserver
        const missionsToKeep = [
            'MIS-20250804-553',
            'MIS-20250804-534'
        ];
        
        console.log('\nüìã Missions √† conserver:', missionsToKeep);
        
        // 3. Supprimer les missions non d√©sir√©es
        console.log('\nüóëÔ∏è Suppression des missions non d√©sir√©es...');
        let deletedCount = 0;
        
        for (const mission of missions) {
            const codeMission = mission.code_mission || mission.code || '';
            console.log(`   üîç Mission: ${codeMission} (ID: ${mission.id})`);
            
            if (!missionsToKeep.includes(codeMission)) {
                try {
                    await axios.delete(`${API_BASE_URL}/missions/${mission.id}`, { headers });
                    console.log(`   ‚úÖ Mission supprim√©e: ${codeMission}`);
                    deletedCount++;
                } catch (error) {
                    console.log(`   ‚ùå Erreur lors de la suppression de ${codeMission}:`, error.response?.data || error.message);
                }
            } else {
                console.log(`   ‚úÖ Mission conserv√©e: ${codeMission}`);
            }
        }
        
        // 4. V√©rifier le r√©sultat
        console.log('\nüîç V√©rification du nettoyage...');
        const verifyResponse = await axios.get(`${API_BASE_URL}/missions`, { headers });
        const remainingMissions = verifyResponse.data.data || verifyResponse.data || [];
        
        console.log(`üìä Missions restantes: ${remainingMissions.length}`);
        remainingMissions.forEach(mission => {
            const codeMission = mission.code_mission || mission.code || '';
            console.log(`   ‚úÖ ${codeMission} (ID: ${mission.id})`);
        });
        
        console.log(`\n‚úÖ Nettoyage termin√©: ${deletedCount} missions supprim√©es`);
        
    } catch (error) {
        console.error('‚ùå Erreur lors du nettoyage:', error.response?.data || error.message);
    }
}

cleanMissions(); 