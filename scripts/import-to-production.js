// Script d'import de la base de donn√©es locale vers la production
require('dotenv').config();

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// Configuration de la base de donn√©es de production
const productionPool = new Pool({
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT) || 5432,
    database: process.env.DB_NAME || 'ebpadfbq_eb_vision_2_0',
    user: process.env.DB_USER || 'ebpadfbq_eb_admin20',
    password: process.env.DB_PASSWORD || '87ifet-Z)&',
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 5000,
    ssl: false,
    family: 4
});

async function importToProduction() {
    console.log('üöÄ Import de la base de donn√©es locale vers la production...\n');
    
    try {
        // 1. V√©rifier la connexion √† la production
        console.log('1Ô∏è‚É£ Test de connexion √† la base de production...');
        const testResult = await productionPool.query('SELECT NOW() as current_time');
        console.log(`‚úÖ Connexion r√©ussie - Heure serveur: ${testResult.rows[0].current_time}`);
        
        // 2. Trouver le fichier de sauvegarde le plus r√©cent
        console.log('\n2Ô∏è‚É£ Recherche du fichier de sauvegarde...');
        const backupFiles = fs.readdirSync('.').filter(file => file.startsWith('backup_local_') && file.endsWith('.sql'));
        
        if (backupFiles.length === 0) {
            console.log('‚ùå Aucun fichier de sauvegarde trouv√©');
            console.log('üí° Ex√©cutez d\'abord: pg_dump -h localhost -U postgres -d eb_vision_2_0 --clean --if-exists --no-owner --no-privileges > backup_local.sql');
            return;
        }
        
        // Prendre le fichier le plus r√©cent
        const latestBackup = backupFiles.sort().pop();
        console.log(`‚úÖ Fichier de sauvegarde trouv√©: ${latestBackup}`);
        
        // 3. Lire le contenu du fichier de sauvegarde
        console.log('\n3Ô∏è‚É£ Lecture du fichier de sauvegarde...');
        const backupContent = fs.readFileSync(latestBackup, 'utf8');
        console.log(`‚úÖ Fichier lu (${backupContent.length} caract√®res)`);
        
        // 4. Pr√©parer le contenu pour la production
        console.log('\n4Ô∏è‚É£ Pr√©paration du contenu pour la production...');
        
        // Remplacer les r√©f√©rences √† la base locale par la base de production
        let productionContent = backupContent
            .replace(/eb_vision_2_0/g, process.env.DB_NAME || 'ebpadfbq_eb_vision_2_0')
            .replace(/postgres/g, process.env.DB_USER || 'ebpadfbq_eb_admin20');
        
        // Supprimer les lignes qui pourraient causer des probl√®mes
        productionContent = productionContent
            .split('\n')
            .filter(line => {
                // Supprimer les lignes de cr√©ation d'extensions si elles existent d√©j√†
                if (line.includes('CREATE EXTENSION') && line.includes('uuid-ossp')) {
                    return false;
                }
                // Supprimer les lignes de propri√©taire
                if (line.includes('OWNER TO')) {
                    return false;
                }
                return true;
            })
            .join('\n');
        
        console.log('‚úÖ Contenu pr√©par√© pour la production');
        
        // 5. Cr√©er un fichier temporaire pour la production
        const productionBackupFile = `backup_production_${Date.now()}.sql`;
        fs.writeFileSync(productionBackupFile, productionContent);
        console.log(`‚úÖ Fichier de production cr√©√©: ${productionBackupFile}`);
        
        // 6. Ex√©cuter l'import
        console.log('\n5Ô∏è‚É£ Import vers la production...');
        console.log('‚ö†Ô∏è  ATTENTION: Cette op√©ration va √©craser la base de production !');
        console.log('üìã Voulez-vous continuer ? (Ctrl+C pour annuler)');
        
        // Attendre 5 secondes pour permettre l'annulation
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // Ex√©cuter le script SQL
        const importCommand = `psql -h ${process.env.DB_HOST || 'localhost'} -p ${process.env.DB_PORT || 5432} -U ${process.env.DB_USER || 'ebpadfbq_eb_admin20'} -d ${process.env.DB_NAME || 'ebpadfbq_eb_vision_2_0'} -f ${productionBackupFile}`;
        
        console.log(`üîÑ Ex√©cution de: ${importCommand}`);
        
        exec(importCommand, { env: { ...process.env, PGPASSWORD: process.env.DB_PASSWORD || '87ifet-Z)&' } }, async (error, stdout, stderr) => {
            if (error) {
                console.error('‚ùå Erreur lors de l\'import:', error.message);
                return;
            }
            
            if (stderr) {
                console.log('‚ö†Ô∏è  Avertissements:', stderr);
            }
            
            console.log('‚úÖ Import termin√© avec succ√®s !');
            console.log('üìä Sortie:', stdout);
            
            // 7. Nettoyer le fichier temporaire
            fs.unlinkSync(productionBackupFile);
            console.log(`üóëÔ∏è  Fichier temporaire supprim√©: ${productionBackupFile}`);
            
            // 8. V√©rification finale
            console.log('\n6Ô∏è‚É£ V√©rification de l\'import...');
            const verificationResult = await productionPool.query('SELECT COUNT(*) as total_tables FROM information_schema.tables WHERE table_schema = \'public\'');
            console.log(`‚úÖ Nombre de tables dans la base de production: ${verificationResult.rows[0].total_tables}`);
            
            console.log('\nüéâ Import termin√© avec succ√®s !');
            console.log('üîÑ Red√©marrez l\'application de production si n√©cessaire.');
            
            await productionPool.end();
        });
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'import:', error.message);
        await productionPool.end();
    }
}

importToProduction().catch(console.error);
