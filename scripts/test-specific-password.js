#!/usr/bin/env node

/**
 * Script pour tester un mot de passe sp√©cifique
 */

console.log('üîç TEST D\'UN MOT DE PASSE SP√âCIFIQUE');
console.log('=====================================\n');

// Demander √† l'utilisateur de saisir son mot de passe
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.question('Veuillez saisir le mot de passe que vous essayez d\'utiliser: ', (password) => {
    console.log(`\nüß™ TEST DU MOT DE PASSE: "${password}"`);
    console.log('=====================================\n');

    // Pattern utilis√© dans le frontend et backend
    const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/;

    // Tests d√©taill√©s
    const length = password.length;
    const hasLower = /[a-z]/.test(password);
    const hasUpper = /[A-Z]/.test(password);
    const hasDigit = /\d/.test(password);
    const hasSpecial = /[@$!%*?&]/.test(password);
    const isValidPattern = passwordPattern.test(password);

    console.log('üìã ANALYSE D√âTAILL√âE:');
    console.log('=====================');
    console.log(`Mot de passe: "${password}"`);
    console.log(`Longueur: ${length} caract√®res ${length >= 8 ? '‚úÖ' : '‚ùå'} (minimum 8)`);
    console.log(`Contient minuscule: ${hasLower ? '‚úÖ' : '‚ùå'}`);
    console.log(`Contient majuscule: ${hasUpper ? '‚úÖ' : '‚ùå'}`);
    console.log(`Contient chiffre: ${hasDigit ? '‚úÖ' : '‚ùå'}`);
    console.log(`Contient caract√®re sp√©cial (@$!%*?&): ${hasSpecial ? '‚úÖ' : '‚ùå'}`);
    console.log(`Pattern complet: ${isValidPattern ? '‚úÖ VALIDE' : '‚ùå INVALIDE'}\n`);

    // V√©rifier les caract√®res sp√©ciaux pr√©sents
    const specialChars = password.match(/[@$!%*?&]/g);
    if (specialChars) {
        console.log(`Caract√®res sp√©ciaux trouv√©s: ${specialChars.join(', ')}`);
    } else {
        console.log('‚ùå Aucun caract√®re sp√©cial autoris√© trouv√©');
    }

    // V√©rifier s'il y a d'autres caract√®res sp√©ciaux
    const otherSpecialChars = password.match(/[^A-Za-z\d@$!%*?&]/g);
    if (otherSpecialChars) {
        console.log(`‚ö†Ô∏è  Autres caract√®res sp√©ciaux trouv√©s: ${otherSpecialChars.join(', ')}`);
        console.log('   Ces caract√®res ne sont pas autoris√©s par le pattern actuel');
    }

    // Test avec un pattern plus permissif
    const permissivePattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])/;
    const isValidPermissive = permissivePattern.test(password);
    
    console.log(`\nüîç TEST AVEC PATTERN PERMISSIF:`);
    console.log('===============================');
    console.log(`Pattern permissif: ${isValidPermissive ? '‚úÖ VALIDE' : '‚ùå INVALIDE'}`);

    // Recommandations
    console.log('\nüí° RECOMMANDATIONS:');
    console.log('===================');
    
    if (isValidPattern) {
        console.log('‚úÖ Votre mot de passe respecte toutes les exigences !');
        console.log('   Le probl√®me pourrait venir d\'ailleurs (frontend, backend, etc.)');
    } else {
        console.log('‚ùå Votre mot de passe ne respecte pas toutes les exigences.');
        console.log('   Voici ce qui manque:');
        
        if (length < 8) console.log('   ‚Ä¢ Longueur insuffisante (minimum 8 caract√®res)');
        if (!hasLower) console.log('   ‚Ä¢ Pas de minuscule');
        if (!hasUpper) console.log('   ‚Ä¢ Pas de majuscule');
        if (!hasDigit) console.log('   ‚Ä¢ Pas de chiffre');
        if (!hasSpecial) console.log('   ‚Ä¢ Pas de caract√®re sp√©cial (@$!%*?&)');
        
        console.log('\n   Exemples de mots de passe valides:');
        console.log('   ‚Ä¢ Test123!');
        console.log('   ‚Ä¢ MyPass1!');
        console.log('   ‚Ä¢ P@ssw0rd');
        console.log('   ‚Ä¢ Admin2024!');
    }

    rl.close();
});
