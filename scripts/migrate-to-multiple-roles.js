const { pool } = require('../src/utils/database');
const fs = require('fs');
const path = require('path');

console.log('üîÑ MIGRATION VERS LE SYST√àME DE R√îLES MULTIPLES\n');
console.log('=' .repeat(80));
console.log('\n');

async function migrateToMultipleRoles() {
    let client;
    
    try {
        // Obtenir un client pour g√©rer la transaction
        client = await pool.connect();
        
        console.log('üìã √âTAPE 1: V√âRIFICATION DE L\'√âTAT ACTUEL');
        console.log('=' .repeat(80));
        
        // V√©rifier l'√©tat actuel
        const statusQuery = `
            SELECT 
                COUNT(DISTINCT u.id) as total_users,
                COUNT(DISTINCT ur.user_id) as users_with_roles,
                COUNT(ur.id) as total_role_assignments,
                COUNT(DISTINCT CASE WHEN u.role IS NOT NULL THEN u.id END) as users_with_principal_role
            FROM users u
            LEFT JOIN user_roles ur ON u.id = ur.user_id;
        `;
        
        const status = await client.query(statusQuery);
        const stats = status.rows[0];
        
        console.log(`\nüìä Statistiques actuelles:`);
        console.log(`   - Utilisateurs total: ${stats.total_users}`);
        console.log(`   - Utilisateurs avec r√¥les multiples: ${stats.users_with_roles}`);
        console.log(`   - Nombre total d'assignations de r√¥les: ${stats.total_role_assignments}`);
        console.log(`   - Utilisateurs avec r√¥le principal: ${stats.users_with_principal_role}`);
        
        console.log('\n\nüìã √âTAPE 2: LECTURE DU FICHIER DE MIGRATION SQL');
        console.log('=' .repeat(80));
        
        const migrationFile = path.join(__dirname, '../database/migrations/006_migrate_to_multiple_roles_system.sql');
        
        if (!fs.existsSync(migrationFile)) {
            throw new Error(`Fichier de migration non trouv√©: ${migrationFile}`);
        }
        
        const migrationSQL = fs.readFileSync(migrationFile, 'utf8');
        console.log(`\n‚úÖ Fichier de migration charg√©: ${migrationFile}`);
        console.log(`   Taille: ${(migrationSQL.length / 1024).toFixed(2)} KB`);
        
        console.log('\n\nüìã √âTAPE 3: EX√âCUTION DE LA MIGRATION');
        console.log('=' .repeat(80));
        console.log('\n‚è≥ Ex√©cution en cours...\n');
        
        // Ex√©cuter la migration
        await client.query(migrationSQL);
        
        console.log('‚úÖ Migration SQL ex√©cut√©e avec succ√®s\n');
        
        console.log('\nüìã √âTAPE 4: V√âRIFICATION POST-MIGRATION');
        console.log('=' .repeat(80));
        
        // V√©rifier l'√©tat apr√®s migration
        const postStatus = await client.query(statusQuery);
        const postStats = postStatus.rows[0];
        
        console.log(`\nüìä Statistiques apr√®s migration:`);
        console.log(`   - Utilisateurs total: ${postStats.total_users}`);
        console.log(`   - Utilisateurs avec r√¥les multiples: ${postStats.users_with_roles}`);
        console.log(`   - Nombre total d'assignations de r√¥les: ${postStats.total_role_assignments}`);
        console.log(`   - Utilisateurs avec r√¥le principal: ${postStats.users_with_principal_role}`);
        
        // V√©rifier qu'il n'y a pas d'utilisateurs sans r√¥les
        const usersWithoutRolesQuery = `
            SELECT u.id, u.nom, u.prenom, u.email
            FROM users u
            WHERE NOT EXISTS (
                SELECT 1 FROM user_roles ur WHERE ur.user_id = u.id
            )
            LIMIT 10;
        `;
        
        const usersWithoutRoles = await client.query(usersWithoutRolesQuery);
        
        if (usersWithoutRoles.rows.length > 0) {
            console.log('\n‚ö†Ô∏è  ATTENTION: Utilisateurs sans r√¥les d√©tect√©s:');
            usersWithoutRoles.rows.forEach((user, index) => {
                console.log(`   ${index + 1}. ${user.nom} ${user.prenom} (${user.email})`);
            });
        } else {
            console.log('\n‚úÖ Tous les utilisateurs ont au moins un r√¥le');
        }
        
        // Afficher quelques exemples d'utilisateurs avec leurs r√¥les
        console.log('\nüìã √âTAPE 5: EXEMPLES D\'UTILISATEURS ET LEURS R√îLES');
        console.log('=' .repeat(80));
        
        const examplesQuery = `
            SELECT 
                u.id,
                u.nom,
                u.prenom,
                u.email,
                u.role as old_principal_role,
                array_agg(r.name ORDER BY r.name) as roles
            FROM users u
            LEFT JOIN user_roles ur ON u.id = ur.user_id
            LEFT JOIN roles r ON ur.role_id = r.id
            GROUP BY u.id, u.nom, u.prenom, u.email, u.role
            ORDER BY u.nom, u.prenom
            LIMIT 10;
        `;
        
        const examples = await client.query(examplesQuery);
        
        console.log('\nüìã Premiers utilisateurs:');
        examples.rows.forEach((user, index) => {
            const rolesDisplay = user.roles && user.roles.length > 0 
                ? user.roles.join(', ') 
                : 'Aucun r√¥le';
            console.log(`\n   ${index + 1}. ${user.nom} ${user.prenom}`);
            console.log(`      üìß ${user.email}`);
            console.log(`      üé≠ Ancien r√¥le principal: ${user.old_principal_role || 'N/A'}`);
            console.log(`      üé≠ R√¥les actuels: ${rolesDisplay}`);
        });
        
        console.log('\n\nüìã √âTAPE 6: TEST DU TRIGGER DE PROTECTION');
        console.log('=' .repeat(80));
        
        // Tester le trigger (sans vraiment supprimer)
        console.log('\n‚úÖ Trigger de protection cr√©√© et activ√©');
        console.log('   Ce trigger emp√™che la suppression du dernier r√¥le d\'un utilisateur');
        
        console.log('\n\nüéâ MIGRATION TERMIN√âE AVEC SUCC√àS !');
        console.log('=' .repeat(80));
        console.log('\n‚úÖ R√©sum√©:');
        console.log(`   - Colonne users.role rendue nullable`);
        console.log(`   - ${postStats.total_role_assignments - stats.total_role_assignments} nouveaux r√¥les migr√©s`);
        console.log(`   - Vue user_roles_view cr√©√©e`);
        console.log(`   - Trigger de protection activ√©`);
        console.log(`   - Index cr√©√©s pour les performances`);
        
        console.log('\nüìù Prochaines √©tapes:');
        console.log('   1. Red√©marrer le serveur');
        console.log('   2. Tester les fonctionnalit√©s de gestion des r√¥les');
        console.log('   3. D√©ployer en production avec ce m√™me script');
        
    } catch (error) {
        console.error('\n‚ùå ERREUR LORS DE LA MIGRATION:');
        console.error('   Message:', error.message);
        console.error('   Stack:', error.stack);
        
        if (error.code) {
            console.error('   Code:', error.code);
        }
        
        console.log('\n‚ö†Ô∏è  La transaction a √©t√© annul√©e (ROLLBACK)');
        console.log('   Aucune modification n\'a √©t√© appliqu√©e √† la base de donn√©es');
        
        process.exit(1);
    } finally {
        if (client) {
            client.release();
        }
        await pool.end();
        console.log('\nüîö Connexion ferm√©e\n');
    }
}

// Demander confirmation avant d'ex√©cuter
console.log('‚ö†Ô∏è  ATTENTION: Cette migration va modifier la structure de la base de donn√©es');
console.log('   - La colonne users.role sera rendue nullable');
console.log('   - Les r√¥les principaux seront migr√©s vers user_roles');
console.log('   - Un trigger sera cr√©√© pour prot√©ger les r√¥les');
console.log('\n');

// Ex√©cuter automatiquement (pour la production, on peut ajouter une confirmation)
migrateToMultipleRoles();

