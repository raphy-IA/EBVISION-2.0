const { pool } = require('../src/utils/database');

console.log('üîß Correction de la r√©initialisation des collaborateurs...\n');

async function fixCollaborateursReset() {
    try {
        console.log('üìã V√©rification de la structure de la table collaborateurs...');
        
        // V√©rifier la structure de la table
        const structureQuery = `
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'collaborateurs' 
            AND column_name IN ('id', 'grade_actuel_id', 'poste_actuel_id', 'business_unit_id', 'division_id')
            ORDER BY column_name
        `;
        
        const structureResult = await pool.query(structureQuery);
        console.log('üìä Structure de la table collaborateurs:');
        structureResult.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type}`);
        });
        
        console.log('\nüîÑ R√©initialisation des informations actuelles...');
        
        // R√©initialiser les informations actuelles des collaborateurs
        const resetQuery = `
            UPDATE collaborateurs SET
                grade_actuel_id = NULL,
                poste_actuel_id = NULL,
                business_unit_id = NULL,
                division_id = NULL,
                updated_at = CURRENT_TIMESTAMP
        `;
        
        try {
            const resetResult = await pool.query(resetQuery);
            console.log(`‚úÖ ${resetResult.rowCount} collaborateurs r√©initialis√©s`);
        } catch (error) {
            console.log('‚ùå Erreur lors de la r√©initialisation:', error.message);
        }
        
        // V√©rifier l'√©tat final
        console.log('\nüìä V√©rification de l\'√©tat final...');
        
        const finalChecks = [
            {
                name: 'Total collaborateurs',
                query: 'SELECT COUNT(*) as count FROM collaborateurs'
            },
            {
                name: 'Collaborateurs avec grade actuel',
                query: 'SELECT COUNT(*) as count FROM collaborateurs WHERE grade_actuel_id IS NOT NULL'
            },
            {
                name: 'Collaborateurs avec poste actuel',
                query: 'SELECT COUNT(*) as count FROM collaborateurs WHERE poste_actuel_id IS NOT NULL'
            },
            {
                name: 'Collaborateurs avec business unit',
                query: 'SELECT COUNT(*) as count FROM collaborateurs WHERE business_unit_id IS NOT NULL'
            },
            {
                name: 'Collaborateurs avec division',
                query: 'SELECT COUNT(*) as count FROM collaborateurs WHERE division_id IS NOT NULL'
            }
        ];
        
        for (const check of finalChecks) {
            try {
                const result = await pool.query(check.query);
                const count = parseInt(result.rows[0].count);
                console.log(`üìã ${check.name}: ${count} enregistrements`);
            } catch (error) {
                console.log(`‚ùå Erreur lors de la v√©rification de ${check.name}:`, error.message);
            }
        }
        
        console.log('\n‚úÖ R√©initialisation termin√©e !');
        console.log('\nüìù √âtat actuel :');
        console.log('- Tous les historiques RH ont √©t√© supprim√©s');
        console.log('- Les informations actuelles des collaborateurs ont √©t√© r√©initialis√©es');
        console.log('- Vous pouvez maintenant faire des tests depuis le d√©but');
        
        console.log('\nüß™ Pour tester :');
        console.log('1. D√©marrer le serveur: npm start');
        console.log('2. Aller sur: http://localhost:3000/collaborateurs.html');
        console.log('3. Cliquer sur "G√©rer RH" pour un collaborateur');
        console.log('4. V√©rifier que les historiques sont vides');
        console.log('5. Ajouter de nouvelles √©volutions pour tester');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error);
    } finally {
        await pool.end();
    }
}

// Ex√©cuter la correction
fixCollaborateursReset();