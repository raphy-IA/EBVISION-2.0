#!/usr/bin/env node

/**
 * Script pour tester la route de changement de mot de passe
 */

const { pool } = require('../src/utils/database');
const bcrypt = require('bcryptjs');

async function testPasswordChangeRoute() {
    console.log('üß™ TEST DE LA ROUTE DE CHANGEMENT DE MOT DE PASSE');
    console.log('================================================\n');

    try {
        const client = await pool.connect();
        console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie\n');

        // R√©cup√©rer l'utilisateur le plus r√©cemment modifi√© (probablement celui qui teste)
        const userQuery = `
            SELECT id, login, email, nom, prenom, password_hash, role
            FROM users 
            ORDER BY updated_at DESC 
            LIMIT 1
        `;
        
        const userResult = await client.query(userQuery);
        
        if (userResult.rows.length === 0) {
            console.log('‚ùå Aucun utilisateur trouv√©');
            return;
        }

        const user = userResult.rows[0];
        console.log('üë§ UTILISATEUR DE TEST:');
        console.log('======================');
        console.log(`   ID: ${user.id}`);
        console.log(`   Login: ${user.login}`);
        console.log(`   Email: ${user.email}`);
        console.log(`   Nom: ${user.nom} ${user.prenom}`);
        console.log(`   R√¥le: ${user.role}`);
        console.log(`   Password Hash: ${user.password_hash ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
        console.log(`   Longueur Hash: ${user.password_hash ? user.password_hash.length : 0} caract√®res\n`);

        // Tester la v√©rification du mot de passe
        console.log('üîç TEST DE V√âRIFICATION DU MOT DE PASSE:');
        console.log('=======================================');
        
        const testPasswords = ['TempPass123!', 'password', 'admin', '123456'];
        
        for (const testPassword of testPasswords) {
            try {
                const isValid = await bcrypt.compare(testPassword, user.password_hash);
                console.log(`   "${testPassword}": ${isValid ? '‚úÖ Valide' : '‚ùå Invalide'}`);
            } catch (error) {
                console.log(`   "${testPassword}": ‚ùå Erreur - ${error.message}`);
            }
        }

        // Tester la cr√©ation d'un nouveau hash
        console.log('\nüîß TEST DE CR√âATION D\'UN NOUVEAU HASH:');
        console.log('=====================================');
        
        const newPassword = 'NewTest123!';
        const saltRounds = 12;
        
        try {
            const newHash = await bcrypt.hash(newPassword, saltRounds);
            console.log(`   Nouveau mot de passe: "${newPassword}"`);
            console.log(`   Nouveau hash cr√©√©: ${newHash.length} caract√®res`);
            console.log(`   Hash valide: ${newHash ? '‚úÖ' : '‚ùå'}`);
            
            // Tester la v√©rification du nouveau hash
            const isValidNew = await bcrypt.compare(newPassword, newHash);
            console.log(`   V√©rification nouveau hash: ${isValidNew ? '‚úÖ' : '‚ùå'}`);
            
        } catch (error) {
            console.log(`   ‚ùå Erreur lors de la cr√©ation du hash: ${error.message}`);
        }

        // V√©rifier la structure de la table users
        console.log('\nüìã V√âRIFICATION DE LA STRUCTURE:');
        console.log('================================');
        
        const structureQuery = `
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'users' AND column_name = 'password_hash'
        `;
        
        const structureResult = await client.query(structureQuery);
        if (structureResult.rows.length > 0) {
            const col = structureResult.rows[0];
            console.log(`   password_hash: ${col.data_type} ${col.is_nullable === 'NO' ? '(NOT NULL)' : '(NULLABLE)'}`);
            console.log(`   Default: ${col.column_default || 'Aucun'}`);
        }

        client.release();
        
        console.log('\nüí° DIAGNOSTIC:');
        console.log('==============');
        console.log('1. L\'utilisateur a un password_hash d√©fini');
        console.log('2. Le probl√®me peut venir de:');
        console.log('   - La r√©cup√©ration de l\'utilisateur dans la route');
        console.log('   - La v√©rification du token JWT');
        console.log('   - La logique de la route change-password');
        console.log('3. V√©rifiez les logs du serveur lors du changement de mot de passe');

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await pool.end();
    }
}

// Ex√©cuter le test
testPasswordChangeRoute().catch(console.error);


