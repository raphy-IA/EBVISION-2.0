// Script pour corriger l'encodage du fichier de sauvegarde
const fs = require('fs');

async function fixBackupEncoding() {
    console.log('üîß Correction de l\'encodage du fichier de sauvegarde...\n');
    
    try {
        // 1. Lire le fichier de sauvegarde
        console.log('1Ô∏è‚É£ Lecture du fichier de sauvegarde...');
        const backupFile = 'backup_local_20250901_041626.sql';
        
        if (!fs.existsSync(backupFile)) {
            console.log('‚ùå Fichier de sauvegarde non trouv√©');
            return;
        }
        
        const content = fs.readFileSync(backupFile, 'utf8');
        console.log(`‚úÖ Fichier lu (${content.length} caract√®res)`);
        
        // 2. Nettoyer le contenu
        console.log('\n2Ô∏è‚É£ Nettoyage du contenu...');
        
        // Supprimer les caract√®res BOM et autres caract√®res bizarres au d√©but
        let cleanContent = content;
        
        // Supprimer les caract√®res BOM UTF-8
        if (cleanContent.charCodeAt(0) === 0xFEFF) {
            cleanContent = cleanContent.slice(1);
            console.log('‚úÖ Caract√®re BOM UTF-8 supprim√©');
        }
        
        // Supprimer les caract√®res bizarres au d√©but
        const lines = cleanContent.split('\n');
        let startIndex = 0;
        
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            // Chercher la premi√®re ligne qui ressemble √† du SQL valide
            if (line.startsWith('--') || line.startsWith('CREATE') || line.startsWith('SET') || line.startsWith('DROP')) {
                startIndex = i;
                break;
            }
        }
        
        cleanContent = lines.slice(startIndex).join('\n');
        console.log(`‚úÖ Contenu nettoy√© (${cleanContent.length} caract√®res)`);
        
        // 3. Cr√©er le fichier corrig√©
        console.log('\n3Ô∏è‚É£ Cr√©ation du fichier corrig√©...');
        const fixedFile = 'backup_local_fixed.sql';
        fs.writeFileSync(fixedFile, cleanContent, 'utf8');
        console.log(`‚úÖ Fichier corrig√© cr√©√©: ${fixedFile}`);
        
        // 4. V√©rifier le d√©but du fichier
        console.log('\n4Ô∏è‚É£ V√©rification du fichier corrig√©...');
        const firstLines = cleanContent.split('\n').slice(0, 5);
        console.log('üìã Premi√®res lignes du fichier corrig√©:');
        firstLines.forEach((line, index) => {
            console.log(`   ${index + 1}: ${line}`);
        });
        
        console.log('\nüéâ Fichier de sauvegarde corrig√© avec succ√®s !');
        console.log(`üìÅ Fichier: ${fixedFile}`);
        console.log('üí° Vous pouvez maintenant utiliser ce fichier pour l\'import en production.');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error.message);
    }
}

fixBackupEncoding().catch(console.error);









