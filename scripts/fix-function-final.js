const fs = require('fs');

console.log('üîß Correction finale de la fonction showNewCollaborateurModal...\n');

try {
    // Lire le fichier
    const collaborateursFile = 'public/collaborateurs.html';
    const content = fs.readFileSync(collaborateursFile, 'utf8');
    
    console.log('üìã Lecture du fichier:', collaborateursFile);
    
    // Cr√©er une sauvegarde
    const backupFile = 'public/collaborateurs_backup_before_function_fix.html';
    fs.writeFileSync(backupFile, content);
    console.log('üìã Sauvegarde cr√©√©e:', backupFile);
    
    // Remplacer compl√®tement la fonction showNewCollaborateurModal
    console.log('üîß Remplacement de la fonction showNewCollaborateurModal...');
    
    const newFunction = `
        function showNewCollaborateurModal() {
            console.log('üîÑ DEBUG: Ouverture du modal nouveau collaborateur...');
            
            try {
                console.log('üîç DEBUG: V√©rification des √©l√©ments DOM...');
                const modalElement = document.getElementById('newCollaborateurModal');
                if (!modalElement) {
                    console.error('‚ùå DEBUG: √âl√©ment newCollaborateurModal non trouv√©');
                    alert('Erreur: Modal non trouv√©');
                    return;
                }
                console.log('‚úÖ DEBUG: Modal trouv√©');
                
                console.log('üîç DEBUG: Chargement des donn√©es...');
                
                // Charger les donn√©es avec debug
                try {
                    if (typeof loadBusinessUnits === 'function') {
                        loadBusinessUnits();
                        console.log('‚úÖ DEBUG: Business units charg√©s');
                    } else {
                        console.error('‚ùå DEBUG: Fonction loadBusinessUnits non trouv√©e');
                    }
                } catch (error) {
                    console.error('‚ùå DEBUG: Erreur chargement business units:', error);
                }
                
                try {
                    if (typeof loadGrades === 'function') {
                        loadGrades();
                        console.log('‚úÖ DEBUG: Grades charg√©s');
                    } else {
                        console.error('‚ùå DEBUG: Fonction loadGrades non trouv√©e');
                    }
                } catch (error) {
                    console.error('‚ùå DEBUG: Erreur chargement grades:', error);
                }
                
                try {
                    if (typeof loadPostes === 'function') {
                        loadPostes();
                        console.log('‚úÖ DEBUG: Postes charg√©s');
                    } else {
                        console.error('‚ùå DEBUG: Fonction loadPostes non trouv√©e');
                    }
                } catch (error) {
                    console.error('‚ùå DEBUG: Erreur chargement postes:', error);
                }
                
                try {
                    if (typeof loadTypesCollaborateurs === 'function') {
                        loadTypesCollaborateurs();
                        console.log('‚úÖ DEBUG: Types collaborateurs charg√©s');
                    } else {
                        console.error('‚ùå DEBUG: Fonction loadTypesCollaborateurs non trouv√©e');
                    }
                } catch (error) {
                    console.error('‚ùå DEBUG: Erreur chargement types collaborateurs:', error);
                }
                
                try {
                    if (typeof loadDivisions === 'function') {
                        loadDivisions();
                        console.log('‚úÖ DEBUG: Divisions charg√©es');
                    } else {
                        console.error('‚ùå DEBUG: Fonction loadDivisions non trouv√©e');
                    }
                } catch (error) {
                    console.error('‚ùå DEBUG: Erreur chargement divisions:', error);
                }
                
                console.log('üîç DEBUG: Affichage du modal...');
                
                // Afficher le modal
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
                
                console.log('‚úÖ DEBUG: Modal nouveau collaborateur affich√© avec succ√®s');
                
            } catch (error) {
                console.error('‚ùå DEBUG: Erreur lors de l\'ouverture du modal:', error);
                alert('Erreur lors de l\'ouverture du modal: ' + error.message);
            }
        }`;
    
    // Supprimer l'ancienne fonction si elle existe
    let updatedContent = content;
    const oldFunctionPattern = /function showNewCollaborateurModal\(\) \{[\s\S]*?\}/;
    
    if (oldFunctionPattern.test(updatedContent)) {
        console.log('üîß Suppression de l\'ancienne fonction...');
        updatedContent = updatedContent.replace(oldFunctionPattern, '');
    }
    
    // Ajouter la nouvelle fonction
    updatedContent = updatedContent.replace('</script>', newFunction + '\n    </script>');
    
    // Sauvegarder le fichier corrig√©
    fs.writeFileSync(collaborateursFile, updatedContent);
    console.log('‚úÖ Fonction showNewCollaborateurModal corrig√©e et sauvegard√©e');
    
    // V√©rification finale
    console.log('\nüìä V√©rification finale...');
    
    const finalContent = fs.readFileSync(collaborateursFile, 'utf8');
    
    if (finalContent.includes('function showNewCollaborateurModal()')) {
        console.log('‚úÖ Fonction showNewCollaborateurModal - PR√âSENTE');
        
        if (finalContent.includes('console.log(\'üîÑ DEBUG: Ouverture du modal nouveau collaborateur...\')')) {
            console.log('‚úÖ Code de debug pr√©sent dans la fonction');
        } else {
            console.log('‚ùå Code de debug manquant dans la fonction');
        }
        
        if (finalContent.includes('bootstrap.Modal(modalElement)')) {
            console.log('‚úÖ Code d\'ouverture du modal pr√©sent');
        } else {
            console.log('‚ùå Code d\'ouverture du modal manquant');
        }
        
        if (finalContent.includes('loadBusinessUnits()')) {
            console.log('‚úÖ Appels aux fonctions de chargement pr√©sents');
        } else {
            console.log('‚ùå Appels aux fonctions de chargement manquants');
        }
    } else {
        console.log('‚ùå Fonction showNewCollaborateurModal - MANQUANTE');
    }
    
    console.log('\n‚úÖ Correction finale termin√©e !');
    console.log('\nüß™ Instructions de test :');
    console.log('1. Recharger la page: http://localhost:3000/collaborateurs.html');
    console.log('2. Ouvrir la console du navigateur (F12)');
    console.log('3. Vous devriez voir beaucoup de logs de debug');
    console.log('4. Tester le bouton "Nouveau collaborateur" - devrait maintenant fonctionner');
    console.log('5. Tester le bouton "G√©rer RH"');
    
} catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error.message);
}