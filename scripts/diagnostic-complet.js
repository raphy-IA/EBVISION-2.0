const fs = require('fs');

console.log('üîç Diagnostic complet des erreurs...\n');

try {
    // Lire le fichier
    const collaborateursFile = 'public/collaborateurs.html';
    const content = fs.readFileSync(collaborateursFile, 'utf8');
    
    console.log('üìä Fichier lu:', collaborateursFile);
    console.log('üìä Taille:', content.length, 'caract√®res');
    console.log('üìä Lignes:', content.split('\n').length);
    
    // 1. V√©rifier l'erreur de syntaxe √† la ligne 2480
    console.log('\nüîç V√©rification de l\'erreur ligne 2480...');
    
    const lines = content.split('\n');
    if (lines.length > 2479) {
        const line2480 = lines[2479];
        console.log(`üìç Ligne 2480: ${line2480}`);
        
        if (line2480.includes('showAlert(') && !line2480.includes(')')) {
            console.log('‚ùå Erreur de syntaxe d√©tect√©e √† la ligne 2480');
        } else {
            console.log('‚úÖ Ligne 2480 semble correcte');
        }
    }
    
    // 2. V√©rifier toutes les erreurs showAlert
    console.log('\nüîç Recherche de toutes les erreurs showAlert...');
    
    let showAlertErrors = [];
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        if (line.includes('showAlert(') && !line.includes(')')) {
            showAlertErrors.push({ line: i + 1, content: line });
        }
    }
    
    if (showAlertErrors.length > 0) {
        console.log(`‚ùå ${showAlertErrors.length} erreur(s) showAlert trouv√©e(s):`);
        showAlertErrors.forEach(error => {
            console.log(`   Ligne ${error.line}: ${error.content}`);
        });
    } else {
        console.log('‚úÖ Aucune erreur showAlert d√©tect√©e');
    }
    
    // 3. V√©rifier la fonction showNewCollaborateurModal
    console.log('\nüîç V√©rification de la fonction showNewCollaborateurModal...');
    
    if (content.includes('function showNewCollaborateurModal()')) {
        console.log('‚úÖ Fonction showNewCollaborateurModal trouv√©e');
        
        // V√©rifier si elle est compl√®te
        const functionMatch = content.match(/function showNewCollaborateurModal\(\) \{[\s\S]*?\}/);
        if (functionMatch) {
            console.log('‚úÖ Fonction compl√®te trouv√©e');
        } else {
            console.log('‚ùå Fonction incompl√®te');
        }
    } else {
        console.log('‚ùå Fonction showNewCollaborateurModal MANQUANTE');
    }
    
    // 4. V√©rifier le bouton onclick
    console.log('\nüîç V√©rification du bouton onclick...');
    
    if (content.includes('onclick="showNewCollaborateurModal()"')) {
        console.log('‚úÖ Bouton onclick trouv√©');
    } else {
        console.log('‚ùå Bouton onclick MANQUANT');
    }
    
    // 5. V√©rifier les √©l√©ments HTML
    console.log('\nüîç V√©rification des √©l√©ments HTML...');
    
    const htmlElements = [
        'id="newCollaborateurModal"',
        'id="collaborateurs-table"',
        'id="collaborateurs-loading"',
        'id="collaborateurs-content"'
    ];
    
    htmlElements.forEach(element => {
        if (content.includes(element)) {
            console.log(`‚úÖ ${element}`);
        } else {
            console.log(`‚ùå ${element} - MANQUANT`);
        }
    });
    
    // 6. V√©rifier les fonctions de chargement
    console.log('\nüîç V√©rification des fonctions de chargement...');
    
    const loadFunctions = [
        'loadBusinessUnits',
        'loadGrades',
        'loadPostes',
        'loadDivisions',
        'loadTypesCollaborateurs'
    ];
    
    loadFunctions.forEach(func => {
        if (content.includes(`function ${func}()`)) {
            console.log(`‚úÖ ${func}`);
        } else {
            console.log(`‚ùå ${func} - MANQUANTE`);
        }
    });
    
    // 7. V√©rifier les logs de debug
    console.log('\nüîç V√©rification des logs de debug...');
    
    const debugLogs = [
        'DEBUG: Page collaborateurs.html charg√©e',
        'DEBUG: DOM charg√©',
        'DEBUG: Chargement des collaborateurs...'
    ];
    
    debugLogs.forEach(log => {
        if (content.includes(log)) {
            console.log(`‚úÖ Log "${log}"`);
        } else {
            console.log(`‚ùå Log "${log}" - MANQUANT`);
        }
    });
    
    // R√©sum√© du diagnostic
    console.log('\nüìä R√©sum√© du diagnostic...');
    console.log(`- Erreurs showAlert: ${showAlertErrors.length}`);
    console.log(`- Fonction showNewCollaborateurModal: ${content.includes('function showNewCollaborateurModal()') ? 'PR√âSENTE' : 'MANQUANTE'}`);
    console.log(`- Bouton onclick: ${content.includes('onclick="showNewCollaborateurModal()"') ? 'PR√âSENT' : 'MANQUANT'}`);
    
    // Recommandations
    console.log('\nüîß Recommandations:');
    if (showAlertErrors.length > 0) {
        console.log('1. Corriger les erreurs showAlert');
    }
    if (!content.includes('function showNewCollaborateurModal()')) {
        console.log('2. Ajouter la fonction showNewCollaborateurModal');
    }
    if (!content.includes('onclick="showNewCollaborateurModal()"')) {
        console.log('3. V√©rifier le bouton onclick');
    }
    
} catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.message);
}