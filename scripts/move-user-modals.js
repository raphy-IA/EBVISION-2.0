#!/usr/bin/env node

/**
 * Script sp√©cifique pour d√©placer user-modals.js vers Old_files
 * Usage: node scripts/move-user-modals.js
 */

const fs = require('fs');
const path = require('path');

console.log('üì¶ D√âPLACEMENT DE user-modals.js VERS Old_files');
console.log('===============================================\n');

class UserModalsMover {
    constructor() {
        this.rootDir = path.join(__dirname, '..');
        this.publicDir = path.join(this.rootDir, 'public');
        this.jsDir = path.join(this.publicDir, 'js');
        this.oldFilesDir = path.join(this.rootDir, 'Old_files');
    }

    async move() {
        try {
            // 1. V√©rifier si user-modals.js existe
            const userModalsPath = path.join(this.jsDir, 'user-modals.js');
            
            if (!fs.existsSync(userModalsPath)) {
                console.log('‚ùå user-modals.js n\'existe pas dans public/js/');
                return;
            }
            
            // 2. V√©rifier s'il est activement utilis√© (non comment√©)
            const isActivelyUsed = this.checkActiveUsage();
            
            if (isActivelyUsed) {
                console.log('‚ö†Ô∏è  user-modals.js est encore activement utilis√© !');
                console.log('üîß V√©rifiez les r√©f√©rences non comment√©es');
                return;
            }
            
            // 3. D√©placer le fichier
            const destPath = path.join(this.oldFilesDir, 'user-modals.js');
            
            fs.renameSync(userModalsPath, destPath);
            console.log('‚úÖ user-modals.js d√©plac√© vers Old_files/');
            
            // 4. Afficher le rapport
            this.showReport();
            
        } catch (error) {
            console.error('‚ùå Erreur lors du d√©placement:', error);
        }
    }

    checkActiveUsage() {
        console.log('üîç V√©rification de l\'utilisation active de user-modals.js...');
        
        const htmlFiles = this.getAllFiles(this.publicDir, ['.html']);
        let activeUsage = false;
        
        htmlFiles.forEach(file => {
            try {
                const content = fs.readFileSync(file, 'utf8');
                
                // Chercher les r√©f√©rences non comment√©es
                const lines = content.split('\n');
                
                lines.forEach((line, index) => {
                    const trimmedLine = line.trim();
                    
                    // V√©rifier si la ligne contient user-modals.js et n'est pas comment√©e
                    if (trimmedLine.includes('user-modals.js') && 
                        !trimmedLine.startsWith('<!--') && 
                        !trimmedLine.startsWith('*') &&
                        !trimmedLine.startsWith('//')) {
                        
                        // V√©rifier que ce n'est pas dans un commentaire multi-ligne
                        const beforeLine = lines.slice(0, index).join('\n');
                        const commentStart = beforeLine.lastIndexOf('<!--');
                        const commentEnd = beforeLine.lastIndexOf('-->');
                        
                        if (commentStart === -1 || commentEnd > commentStart) {
                            console.log(`‚ö†Ô∏è  R√©f√©rence active trouv√©e dans ${path.basename(file)}:${index + 1}`);
                            console.log(`   ${trimmedLine}`);
                            activeUsage = true;
                        }
                    }
                });
            } catch (error) {
                // Ignorer les erreurs de lecture
            }
        });
        
        if (!activeUsage) {
            console.log('‚úÖ Aucune r√©f√©rence active trouv√©e - user-modals.js peut √™tre d√©plac√©');
        }
        
        return activeUsage;
    }

    showReport() {
        console.log('\nüìä RAPPORT DE D√âPLACEMENT');
        console.log('==========================');
        console.log('‚úÖ user-modals.js d√©plac√© avec succ√®s vers Old_files/');
        console.log('‚úÖ Le fichier n\'√©tait plus utilis√© activement');
        console.log('‚úÖ Toutes les r√©f√©rences √©taient comment√©es');
        
        console.log('\nüéØ R√âSULTAT:');
        console.log('‚úÖ user-modals.js est maintenant dans Old_files/');
        console.log('‚úÖ Le fichier est exclu des commits Git');
        console.log('‚úÖ L\'application utilise les modales du template de sidebar');
        
        console.log('\nüí° V√âRIFICATION:');
        console.log('1. ‚úÖ Tester que les modales de profil fonctionnent');
        console.log('2. ‚úÖ V√©rifier que toutes les pages utilisent les m√™mes modales');
        console.log('3. ‚úÖ S\'assurer que le syst√®me de permissions fonctionne');
        
        console.log('\nüì¶ D√©placement termin√© !');
    }

    getAllFiles(dir, extensions = []) {
        let files = [];
        
        try {
            const items = fs.readdirSync(dir);
            
            items.forEach(item => {
                const itemPath = path.join(dir, item);
                const stat = fs.statSync(itemPath);
                
                if (stat.isDirectory()) {
                    files = files.concat(this.getAllFiles(itemPath, extensions));
                } else if (stat.isFile()) {
                    if (extensions.length === 0 || extensions.some(ext => item.endsWith(ext))) {
                        files.push(itemPath);
                    }
                }
            });
        } catch (error) {
            // Ignorer les erreurs d'acc√®s
        }
        
        return files;
    }
}

// Ex√©cuter le d√©placement
const mover = new UserModalsMover();
mover.move();

