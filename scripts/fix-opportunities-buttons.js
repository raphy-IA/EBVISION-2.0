// Script de correction pour les boutons des opportunit√©s
// √Ä ex√©cuter dans la console du navigateur (F12)

console.log('üîß CORRECTION BOUTONS OPPORTUNITIES');
console.log('====================================');

// V√©rifier et corriger les fonctions si n√©cessaire
window.fixOpportunityFunctions = function() {
    console.log('\n1Ô∏è‚É£ V√âRIFICATION ET CORRECTION DES FONCTIONS');
    
    // Fonction viewOpportunity
    if (typeof window.viewOpportunity !== 'function') {
        console.log('‚ö†Ô∏è Fonction viewOpportunity manquante, cr√©ation...');
        window.viewOpportunity = function(id) {
            console.log('üëÅÔ∏è Visualisation de l\'opportunit√©:', id);
            const opp = window.opportunities ? window.opportunities.find(o => o.id === id) : null;
            
            if (opp) {
                const modal = `
                    <div class="modal fade" id="viewOpportunityModal" tabindex="-1">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">
                                        <i class="fas fa-eye me-2"></i>
                                        D√©tails de l'Opportunit√©
                                    </h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h6 class="text-primary">Informations G√©n√©rales</h6>
                                            <p><strong>Nom :</strong> ${opp.nom}</p>
                                            <p><strong>Client :</strong> ${opp.client_nom || 'Non renseign√©'}</p>
                                            <p><strong>Responsable :</strong> ${opp.collaborateur_nom ? `${opp.collaborateur_nom} ${opp.collaborateur_prenom}` : 'Non assign√©'}</p>
                                            <p><strong>Business Unit :</strong> ${opp.business_unit_nom || 'Non assign√©e'}</p>
                                            <p><strong>Type :</strong> ${opp.opportunity_type_nom || 'Non renseign√©'}</p>
                                        </div>
                                        <div class="col-md-6">
                                            <h6 class="text-primary">Informations Commerciales</h6>
                                            <p><strong>Montant :</strong> ${opp.montant_estime ? formatCurrency(opp.montant_estime) : 'Non renseign√©'}</p>
                                            <p><strong>Probabilit√© :</strong> ${opp.probabilite ? `${opp.probabilite}%` : 'Non renseign√©e'}</p>
                                            <p><strong>Date de fermeture :</strong> ${opp.date_fermeture_prevue ? new Date(opp.date_fermeture_prevue).toLocaleDateString('fr-FR') : 'Non renseign√©e'}</p>
                                            <p><strong>Source :</strong> ${opp.source || 'Non renseign√©e'}</p>
                                            <p><strong>Statut :</strong> <span class="status-badge status-saisie">${opp.statut || 'En Cours'}</span></p>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                                    <button type="button" class="btn btn-warning" onclick="editOpportunity('${opp.id}')">
                                        <i class="fas fa-edit me-1"></i>Modifier
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                const oldModal = document.getElementById('viewOpportunityModal');
                if (oldModal) oldModal.remove();
                
                document.body.insertAdjacentHTML('beforeend', modal);
                new bootstrap.Modal(document.getElementById('viewOpportunityModal')).show();
            } else {
                alert('Opportunit√© non trouv√©e');
            }
        };
        console.log('‚úÖ Fonction viewOpportunity cr√©√©e');
    } else {
        console.log('‚úÖ Fonction viewOpportunity existe d√©j√†');
    }
    
    // Fonction editOpportunity
    if (typeof window.editOpportunity !== 'function') {
        console.log('‚ö†Ô∏è Fonction editOpportunity manquante, cr√©ation...');
        window.editOpportunity = function(id) {
            console.log('‚úèÔ∏è √âdition de l\'opportunit√©:', id);
            alert('Fonction d\'√©dition en cours de d√©veloppement');
        };
        console.log('‚úÖ Fonction editOpportunity cr√©√©e');
    } else {
        console.log('‚úÖ Fonction editOpportunity existe d√©j√†');
    }
    
    // Fonction deleteOpportunity
    if (typeof window.deleteOpportunity !== 'function') {
        console.log('‚ö†Ô∏è Fonction deleteOpportunity manquante, cr√©ation...');
        window.deleteOpportunity = function(id) {
            console.log('üóëÔ∏è Suppression de l\'opportunit√©:', id);
            if (confirm('√ätes-vous s√ªr de vouloir supprimer cette opportunit√© ?')) {
                alert('Fonction de suppression en cours de d√©veloppement');
            }
        };
        console.log('‚úÖ Fonction deleteOpportunity cr√©√©e');
    } else {
        console.log('‚úÖ Fonction deleteOpportunity existe d√©j√†');
    }
};

// Recharger le tableau avec les boutons corrig√©s
window.reloadOpportunitiesTable = function() {
    console.log('\n2Ô∏è‚É£ RECHARGEMENT DU TABLEAU');
    
    if (typeof window.displayOpportunities === 'function') {
        console.log('üîÑ Rechargement du tableau...');
        window.displayOpportunities();
        console.log('‚úÖ Tableau recharg√©');
    } else {
        console.log('‚ùå Fonction displayOpportunities non trouv√©e');
    }
};

// V√©rifier et corriger les boutons dans le DOM
window.fixButtonsInDOM = function() {
    console.log('\n3Ô∏è‚É£ CORRECTION DES BOUTONS DANS LE DOM');
    
    const table = document.getElementById('opportunities-table');
    if (!table) {
        console.log('‚ùå Tableau non trouv√©');
        return;
    }
    
    const rows = table.querySelectorAll('tr');
    console.log(`üìä ${rows.length} lignes trouv√©es`);
    
    let fixedCount = 0;
    
    rows.forEach((row, index) => {
        const buttons = row.querySelectorAll('button');
        
        buttons.forEach(button => {
            const onclick = button.getAttribute('onclick');
            
            if (onclick) {
                // V√©rifier si la fonction existe
                const functionName = onclick.match(/(\w+)\(/);
                if (functionName) {
                    const funcName = functionName[1];
                    if (typeof window[funcName] !== 'function') {
                        console.log(`‚ö†Ô∏è Fonction ${funcName} manquante pour le bouton dans la ligne ${index + 1}`);
                        // D√©sactiver le bouton
                        button.disabled = true;
                        button.title = 'Fonction non disponible';
                    } else {
                        console.log(`‚úÖ Fonction ${funcName} disponible pour le bouton dans la ligne ${index + 1}`);
                        fixedCount++;
                    }
                }
            }
        });
    });
    
    console.log(`üìä ${fixedCount} boutons fonctionnels trouv√©s`);
};

// Test des boutons apr√®s correction
window.testFixedButtons = function() {
    console.log('\n4Ô∏è‚É£ TEST DES BOUTONS CORRIG√âS');
    
    if (!window.opportunities || window.opportunities.length === 0) {
        console.log('‚ùå Aucune opportunit√© disponible');
        return;
    }
    
    const testOpp = window.opportunities[0];
    console.log('üìã Test avec l\'opportunit√©:', testOpp.nom);
    
    // Test viewOpportunity
    if (typeof window.viewOpportunity === 'function') {
        console.log('üéØ Test viewOpportunity...');
        try {
            window.viewOpportunity(testOpp.id);
            console.log('‚úÖ Modal de visualisation ouvert');
        } catch (error) {
            console.log('‚ùå Erreur:', error.message);
        }
    }
    
    // Test editOpportunity
    if (typeof window.editOpportunity === 'function') {
        console.log('üéØ Test editOpportunity...');
        try {
            window.editOpportunity(testOpp.id);
            console.log('‚úÖ Fonction d\'√©dition appel√©e');
        } catch (error) {
            console.log('‚ùå Erreur:', error.message);
        }
    }
    
    // Test deleteOpportunity
    if (typeof window.deleteOpportunity === 'function') {
        console.log('üéØ Test deleteOpportunity...');
        try {
            window.deleteOpportunity(testOpp.id);
            console.log('‚úÖ Fonction de suppression appel√©e');
        } catch (error) {
            console.log('‚ùå Erreur:', error.message);
        }
    }
};

// Correction compl√®te
window.fixAllOpportunityButtons = function() {
    console.log('\nüéØ CORRECTION COMPL√àTE DES BOUTONS');
    console.log('===================================');
    
    fixOpportunityFunctions();
    reloadOpportunitiesTable();
    fixButtonsInDOM();
    testFixedButtons();
    
    console.log('\nüìä R√âSUM√â DE LA CORRECTION');
    console.log('============================');
    console.log('‚úÖ Fonctions v√©rifi√©es et corrig√©es si n√©cessaire');
    console.log('‚úÖ Tableau recharg√© avec les boutons');
    console.log('‚úÖ Boutons dans le DOM v√©rifi√©s');
    console.log('‚úÖ Tests des boutons effectu√©s');
    console.log('\nüí° Les boutons devraient maintenant fonctionner correctement');
};

console.log('\n‚úÖ FONCTIONS DE CORRECTION DISPONIBLES:');
console.log('üí° fixOpportunityFunctions() - Corriger les fonctions manquantes');
console.log('üí° reloadOpportunitiesTable() - Recharger le tableau');
console.log('üí° fixButtonsInDOM() - Corriger les boutons dans le DOM');
console.log('üí° testFixedButtons() - Tester les boutons corrig√©s');
console.log('üí° fixAllOpportunityButtons() - Correction compl√®te');
console.log('\nüéØ INSTRUCTIONS:');
console.log('1. Ouvrir opportunities.html');
console.log('2. Attendre le chargement des donn√©es');
console.log('3. Ouvrir la console (F12)');
console.log('4. Ex√©cuter fixAllOpportunityButtons() pour corriger tous les boutons'); 