#!/usr/bin/env node

/**
 * Script de correction CSP pour la production
 * 
 * Ce script corrige les probl√®mes de Content Security Policy
 * qui emp√™chent le chargement des campagnes de prospection
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Script de correction CSP pour la production');
console.log('================================================');

// 1. V√©rifier la configuration CSP actuelle
function checkCurrentCSP() {
    console.log('\nüìã 1. V√©rification de la configuration CSP actuelle...');
    
    const serverPath = path.join(__dirname, '..', 'server.js');
    
    if (!fs.existsSync(serverPath)) {
        console.error('‚ùå Fichier server.js non trouv√©');
        return false;
    }
    
    const serverContent = fs.readFileSync(serverPath, 'utf8');
    
    // V√©rifier si connectSrc est pr√©sent
    const hasConnectSrc = serverContent.includes('connectSrc');
    const hasCdnjs = serverContent.includes('cdnjs.cloudflare.com');
    
    console.log(`   - connectSrc configur√©: ${hasConnectSrc ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - cdnjs.cloudflare.com autoris√©: ${hasCdnjs ? '‚úÖ' : '‚ùå'}`);
    
    return { hasConnectSrc, hasCdnjs, serverContent };
}

// 2. Corriger la configuration CSP
function fixCSP() {
    console.log('\nüîß 2. Correction de la configuration CSP...');
    
    const serverPath = path.join(__dirname, '..', 'server.js');
    let serverContent = fs.readFileSync(serverPath, 'utf8');
    
    // Configuration CSP corrig√©e
    const fixedCSP = `app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com"],
            scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com"],
            scriptSrcAttr: ["'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:"],
            fontSrc: ["'self'", "https://fonts.gstatic.com", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net", "data:"],
            connectSrc: ["'self'", "http://localhost:3000", "http://localhost:3001", "http://localhost:3002", "https:"],
        },
    },
}));`;
    
    // Remplacer la configuration CSP existante
    const cspRegex = /app\.use\(helmet\(\{[\s\S]*?\}\)\);/;
    
    if (cspRegex.test(serverContent)) {
        serverContent = serverContent.replace(cspRegex, fixedCSP);
        fs.writeFileSync(serverPath, serverContent, 'utf8');
        console.log('   ‚úÖ Configuration CSP mise √† jour');
        return true;
    } else {
        console.log('   ‚ùå Configuration CSP non trouv√©e dans server.js');
        return false;
    }
}

// 3. V√©rifier les URLs dans le frontend
function checkFrontendURLs() {
    console.log('\nüåê 3. V√©rification des URLs frontend...');
    
    const frontendPath = path.join(__dirname, '..', 'public', 'prospecting-campaigns.html');
    
    if (!fs.existsSync(frontendPath)) {
        console.log('   ‚ö†Ô∏è Fichier prospecting-campaigns.html non trouv√©');
        return false;
    }
    
    const frontendContent = fs.readFileSync(frontendPath, 'utf8');
    
    // V√©rifier les URLs localhost
    const localhostUrls = frontendContent.match(/http:\/\/localhost:\d+/g) || [];
    const uniqueUrls = [...new Set(localhostUrls)];
    
    console.log(`   - URLs localhost trouv√©es: ${uniqueUrls.length}`);
    uniqueUrls.forEach(url => console.log(`     ‚Ä¢ ${url}`));
    
    return true;
}

// 4. Cr√©er un script de red√©marrage
function createRestartScript() {
    console.log('\nüîÑ 4. Cr√©ation du script de red√©marrage...');
    
    const restartScript = `#!/bin/bash

# Script de red√©marrage pour la production
# Corrige les probl√®mes CSP et red√©marre le serveur

echo "üîÑ Red√©marrage du serveur avec correction CSP..."

# Arr√™ter les processus Node.js existants
echo "‚èπÔ∏è Arr√™t des processus existants..."
pkill -f "node server.js" || true
sleep 2

# V√©rifier que le port est libre
echo "üîç V√©rification du port..."
if lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null ; then
    echo "‚ö†Ô∏è Le port 3000 est encore occup√©, tentative de lib√©ration..."
    lsof -ti:3000 | xargs kill -9 || true
    sleep 2
fi

# Red√©marrer le serveur
echo "üöÄ Red√©marrage du serveur..."
npm start

echo "‚úÖ Serveur red√©marr√© avec succ√®s"
echo "üåê Application disponible sur: http://localhost:3000"
`;

    const scriptPath = path.join(__dirname, 'restart-server-production.sh');
    fs.writeFileSync(scriptPath, restartScript, 'utf8');
    
    // Rendre le script ex√©cutable
    try {
        fs.chmodSync(scriptPath, '755');
        console.log('   ‚úÖ Script de red√©marrage cr√©√©: restart-server-production.sh');
    } catch (error) {
        console.log('   ‚ö†Ô∏è Script cr√©√© mais permissions non modifi√©es (Windows)');
    }
    
    return scriptPath;
}

// 5. Cr√©er un script de v√©rification
function createVerificationScript() {
    console.log('\n‚úÖ 5. Cr√©ation du script de v√©rification...');
    
    const verificationScript = `#!/bin/bash

# Script de v√©rification post-d√©ploiement
# V√©rifie que les corrections CSP fonctionnent

echo "üîç V√©rification des corrections CSP..."

# V√©rifier que le serveur r√©pond
echo "üì° Test de l'API Health..."
if curl -s http://localhost:3000/api/health > /dev/null; then
    echo "   ‚úÖ API Health: OK"
else
    echo "   ‚ùå API Health: ERREUR"
    exit 1
fi

# V√©rifier la configuration CSP
echo "üîí Test de la configuration CSP..."
response=$(curl -s -I http://localhost:3000/api/health | grep -i "content-security-policy")
if echo "$response" | grep -q "connect-src"; then
    echo "   ‚úÖ CSP connect-src configur√©"
else
    echo "   ‚ùå CSP connect-src manquant"
fi

if echo "$response" | grep -q "cdnjs.cloudflare.com"; then
    echo "   ‚úÖ CSP cdnjs.cloudflare.com autoris√©"
else
    echo "   ‚ùå CSP cdnjs.cloudflare.com manquant"
fi

# Test de l'API campagnes (n√©cessite un token valide)
echo "üìä Test de l'API campagnes..."
if curl -s http://localhost:3000/api/prospecting/campaigns > /dev/null; then
    echo "   ‚úÖ API Campagnes: Accessible"
else
    echo "   ‚ö†Ô∏è API Campagnes: N√©cessite authentification"
fi

echo "üéâ V√©rification termin√©e"
`;

    const scriptPath = path.join(__dirname, 'verify-csp-fix.sh');
    fs.writeFileSync(scriptPath, verificationScript, 'utf8');
    
    try {
        fs.chmodSync(scriptPath, '755');
        console.log('   ‚úÖ Script de v√©rification cr√©√©: verify-csp-fix.sh');
    } catch (error) {
        console.log('   ‚ö†Ô∏è Script cr√©√© mais permissions non modifi√©es (Windows)');
    }
    
    return scriptPath;
}

// 6. Cr√©er un guide de d√©ploiement
function createDeploymentGuide() {
    console.log('\nüìö 6. Cr√©ation du guide de d√©ploiement...');
    
    const guide = `# Guide de correction CSP en production

## Probl√®me r√©solu
- Content Security Policy bloquait les connexions vers localhost
- Font Awesome ne se chargeait pas depuis cdnjs.cloudflare.com
- Les campagnes de prospection n'√©taient pas visibles

## Solution appliqu√©e
1. **Configuration CSP mise √† jour** dans server.js
2. **connectSrc** ajout√© pour autoriser les connexions locales
3. **cdnjs.cloudflare.com** ajout√© aux sources autoris√©es

## √âtapes de d√©ploiement

### 1. Pr√©paration
\`\`\`bash
# Sauvegarder la configuration actuelle
cp server.js server.js.backup

# Ex√©cuter le script de correction
node scripts/fix-csp-production.js
\`\`\`

### 2. D√©ploiement
\`\`\`bash
# Red√©marrer le serveur
./scripts/restart-server-production.sh

# Ou manuellement:
pkill -f "node server.js"
npm start
\`\`\`

### 3. V√©rification
\`\`\`bash
# V√©rifier que tout fonctionne
./scripts/verify-csp-fix.sh
\`\`\`

### 4. Test utilisateur
1. Acc√©der √† http://localhost:3000/prospecting-campaigns.html
2. Se connecter avec un utilisateur valide
3. V√©rifier que les campagnes s'affichent
4. V√©rifier que Font Awesome fonctionne

## Configuration CSP finale
\`\`\`javascript
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com"],
            scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com"],
            scriptSrcAttr: ["'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:"],
            fontSrc: ["'self'", "https://fonts.gstatic.com", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net", "data:"],
            connectSrc: ["'self'", "http://localhost:3000", "http://localhost:3001", "http://localhost:3002", "https:"],
        },
    },
}));
\`\`\`

## Rollback (si n√©cessaire)
\`\`\`bash
# Restaurer la configuration pr√©c√©dente
cp server.js.backup server.js
./scripts/restart-server-production.sh
\`\`\`

## Notes importantes
- Cette correction autorise les connexions vers localhost (d√©veloppement)
- En production, ajustez les URLs selon votre configuration
- Testez toujours apr√®s d√©ploiement
- Surveillez les logs pour d√©tecter d'√©ventuels probl√®mes
`;

    const guidePath = path.join(__dirname, '..', 'DEPLOYMENT-CSP-FIX.md');
    fs.writeFileSync(guidePath, guide, 'utf8');
    console.log('   ‚úÖ Guide de d√©ploiement cr√©√©: DEPLOYMENT-CSP-FIX.md');
    
    return guidePath;
}

// Fonction principale
async function main() {
    try {
        console.log('üöÄ D√©but de la correction CSP pour la production\n');
        
        // 1. V√©rifier l'√©tat actuel
        const currentState = checkCurrentCSP();
        
        // 2. Corriger la configuration
        const cspFixed = fixCSP();
        
        // 3. V√©rifier le frontend
        checkFrontendURLs();
        
        // 4. Cr√©er les scripts
        const restartScript = createRestartScript();
        const verificationScript = createVerificationScript();
        const deploymentGuide = createDeploymentGuide();
        
        console.log('\nüéâ Correction CSP termin√©e !');
        console.log('============================');
        console.log('üìÅ Fichiers cr√©√©s:');
        console.log(`   ‚Ä¢ ${restartScript}`);
        console.log(`   ‚Ä¢ ${verificationScript}`);
        console.log(`   ‚Ä¢ ${deploymentGuide}`);
        
        console.log('\nüìã Prochaines √©tapes:');
        console.log('   1. Red√©marrer le serveur: ./scripts/restart-server-production.sh');
        console.log('   2. V√©rifier la correction: ./scripts/verify-csp-fix.sh');
        console.log('   3. Tester l\'application: http://localhost:3000/prospecting-campaigns.html');
        
        console.log('\n‚ö†Ô∏è Important:');
        console.log('   - Sauvegardez votre configuration actuelle avant d√©ploiement');
        console.log('   - Testez en environnement de d√©veloppement d\'abord');
        console.log('   - Surveillez les logs apr√®s red√©marrage');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error.message);
        process.exit(1);
    }
}

// Ex√©cuter le script
if (require.main === module) {
    main();
}

module.exports = {
    checkCurrentCSP,
    fixCSP,
    checkFrontendURLs,
    createRestartScript,
    createVerificationScript,
    createDeploymentGuide
};







