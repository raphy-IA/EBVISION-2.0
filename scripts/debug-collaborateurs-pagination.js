#!/usr/bin/env node

/**
 * Script pour diagnostiquer les probl√®mes de pagination de la page collaborateurs
 */

console.log('üîç DIAGNOSTIC DE LA PAGINATION COLLABORATEURS');
console.log('==============================================\n');

// Simuler les donn√©es de pagination
const mockPaginationData = {
    currentPage: 1,
    totalPages: 5,
    totalCollaborateurs: 87,
    itemsPerPage: 20
};

console.log('üìä DONN√âES DE TEST:');
console.log('===================');
console.log(`Page actuelle: ${mockPaginationData.currentPage}`);
console.log(`Total pages: ${mockPaginationData.totalPages}`);
console.log(`Total collaborateurs: ${mockPaginationData.totalCollaborateurs}`);
console.log(`√âl√©ments par page: ${mockPaginationData.itemsPerPage}\n`);

// Tester la g√©n√©ration HTML de pagination
function generatePaginationHTML(currentPage, totalPages, totalCollaborateurs, itemsPerPage) {
    let paginationHTML = `
        <div class="d-flex justify-content-between align-items-center">
            <div class="text-muted">
                Affichage de ${((currentPage - 1) * itemsPerPage) + 1} √† ${Math.min(currentPage * itemsPerPage, totalCollaborateurs)} sur ${totalCollaborateurs} collaborateurs
            </div>
            <nav aria-label="Pagination des collaborateurs">
                <ul class="pagination pagination-sm mb-0">
    `;

    // Bouton Pr√©c√©dent
    if (currentPage > 1) {
        paginationHTML += `
            <li class="page-item">
                <a class="page-link" href="#" onclick="loadCollaborateurs(${currentPage - 1})" aria-label="Pr√©c√©dent">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        `;
    } else {
        paginationHTML += `
            <li class="page-item disabled">
                <span class="page-link" aria-label="Pr√©c√©dent">
                    <span aria-hidden="true">&laquo;</span>
                </span>
            </li>
        `;
    }

    // Num√©ros de pages
    const startPage = Math.max(1, currentPage - 2);
    const endPage = Math.min(totalPages, currentPage + 2);

    console.log(`üìÑ G√©n√©ration des pages: ${startPage} √† ${endPage}`);

    for (let i = startPage; i <= endPage; i++) {
        if (i === currentPage) {
            paginationHTML += `
                <li class="page-item active">
                    <span class="page-link">${i}</span>
                </li>
            `;
        } else {
            paginationHTML += `
                <li class="page-item">
                    <a class="page-link" href="#" onclick="loadCollaborateurs(${i})">${i}</a>
                </li>
            `;
        }
    }

    // Bouton Suivant
    if (currentPage < totalPages) {
        paginationHTML += `
            <li class="page-item">
                <a class="page-link" href="#" onclick="loadCollaborateurs(${currentPage + 1})" aria-label="Suivant">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        `;
    } else {
        paginationHTML += `
            <li class="page-item disabled">
                <span class="page-link" aria-label="Suivant">
                    <span aria-hidden="true">&raquo;</span>
                </span>
            </li>
        `;
    }

    paginationHTML += `
                </ul>
            </nav>
        </div>
    `;

    return paginationHTML;
}

// Tester diff√©rents sc√©narios
const testScenarios = [
    { page: 1, total: 5, totalItems: 87, description: "Premi√®re page" },
    { page: 3, total: 5, totalItems: 87, description: "Page du milieu" },
    { page: 5, total: 5, totalItems: 87, description: "Derni√®re page" },
    { page: 1, total: 1, totalItems: 15, description: "Une seule page" },
    { page: 1, total: 10, totalItems: 200, description: "Beaucoup de pages" }
];

console.log('üß™ TESTS DE G√âN√âRATION HTML:');
console.log('=============================\n');

testScenarios.forEach((scenario, index) => {
    console.log(`${index + 1}. ${scenario.description}:`);
    console.log(`   Page ${scenario.page}/${scenario.total} (${scenario.totalItems} √©l√©ments)`);
    
    const html = generatePaginationHTML(scenario.page, scenario.total, scenario.totalItems, 20);
    
    // V√©rifier les √©l√©ments cl√©s
    const hasPrevButton = html.includes('Pr√©c√©dent');
    const hasNextButton = html.includes('Suivant');
    const hasPageNumbers = html.includes('page-link');
    const hasActivePage = html.includes('page-item active');
    const hasInfoText = html.includes('Affichage de');
    
    console.log(`   ‚úÖ Bouton Pr√©c√©dent: ${hasPrevButton ? 'Oui' : '‚ùå Non'}`);
    console.log(`   ‚úÖ Bouton Suivant: ${hasNextButton ? 'Oui' : '‚ùå Non'}`);
    console.log(`   ‚úÖ Num√©ros de pages: ${hasPageNumbers ? 'Oui' : '‚ùå Non'}`);
    console.log(`   ‚úÖ Page active: ${hasActivePage ? 'Oui' : '‚ùå Non'}`);
    console.log(`   ‚úÖ Texte d'information: ${hasInfoText ? 'Oui' : '‚ùå Non'}`);
    console.log('');
});

console.log('üí° DIAGNOSTIC:');
console.log('==============');
console.log('1. La fonction updatePaginationControls() semble correcte');
console.log('2. Le HTML g√©n√©r√© contient tous les √©l√©ments n√©cessaires');
console.log('3. Les probl√®mes possibles:');
console.log('   - La fonction n\'est pas appel√©e');
console.log('   - L\'√©l√©ment #pagination-container n\'existe pas');
console.log('   - Erreur JavaScript qui emp√™che l\'ex√©cution');
console.log('   - Probl√®me avec les donn√©es de pagination du serveur');

console.log('\nüîß RECOMMANDATIONS:');
console.log('===================');
console.log('1. V√©rifier que l\'√©l√©ment #pagination-container existe dans le HTML');
console.log('2. Ajouter des logs de d√©bogage dans updatePaginationControls()');
console.log('3. V√©rifier que les donn√©es de pagination sont correctement re√ßues du serveur');
console.log('4. Tester la fonction dans la console du navigateur');

