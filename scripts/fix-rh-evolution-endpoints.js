const fs = require('fs');
const path = require('path');

// Script pour corriger les endpoints d'√©volution RH
async function fixRHEvolutionEndpoints() {
  console.log('üîß Correction des endpoints d\'√©volution RH...\n');
  
  try {
    // 1. V√©rifier le fichier collaborateurs.js
    console.log('üìÅ V√âRIFICATION DU FICHIER COLLABORATEURS.JS:');
    console.log('==============================================');
    
    const collaborateursPath = path.join(__dirname, '../public/js/collaborateurs.js');
    
    if (!fs.existsSync(collaborateursPath)) {
      console.log('‚ùå Fichier collaborateurs.js non trouv√©');
      return;
    }
    
    const content = fs.readFileSync(collaborateursPath, 'utf8');
    console.log(`‚úÖ Fichier trouv√©: ${collaborateursPath}`);
    console.log(`üìè Taille: ${(content.length / 1024).toFixed(2)} KB`);
    console.log('');
    
    // 2. Analyser le code pour identifier les endpoints incorrects
    console.log('üîç ANALYSE DU CODE:');
    console.log('====================');
    
    const lines = content.split('\n');
    let issues = [];
    
    // Chercher les endpoints incorrects
    const incorrectEndpoints = [
      'api/evolution-grades',
      'api/evolution-postes', 
      'api/evolution-organisations'
    ];
    
    incorrectEndpoints.forEach(endpoint => {
      const matches = lines.filter(line => line.includes(endpoint));
      if (matches.length > 0) {
        issues.push(`Endpoint incorrect: ${endpoint} (${matches.length} occurrence(s))`);
        matches.forEach((match, index) => {
          const lineNumber = lines.indexOf(match) + 1;
          console.log(`   Ligne ${lineNumber}: ${match.trim()}`);
        });
      }
    });
    console.log('');
    
    // 3. Identifier les corrections n√©cessaires
    console.log('üîß CORRECTIONS N√âCESSAIRES:');
    console.log('=============================');
    
    const corrections = [
      {
        from: 'api/evolution-grades',
        to: 'api/collaborateurs/evolution-grades',
        description: 'Endpoint pour l\'√©volution des grades'
      },
      {
        from: 'api/evolution-postes',
        to: 'api/collaborateurs/evolution-postes', 
        description: 'Endpoint pour l\'√©volution des postes'
      },
      {
        from: 'api/evolution-organisations',
        to: 'api/collaborateurs/evolution-organisations',
        description: 'Endpoint pour l\'√©volution des organisations'
      }
    ];
    
    corrections.forEach(correction => {
      const matches = lines.filter(line => line.includes(correction.from));
      if (matches.length > 0) {
        console.log(`‚úÖ ${correction.description}:`);
        console.log(`   ${correction.from} ‚Üí ${correction.to}`);
        console.log(`   ${matches.length} occurrence(s) √† corriger`);
      }
    });
    console.log('');
    
    // 4. Appliquer les corrections
    console.log('üîß APPLICATION DES CORRECTIONS:');
    console.log('================================');
    
    let correctedContent = content;
    let correctionsApplied = 0;
    
    corrections.forEach(correction => {
      const originalContent = correctedContent;
      correctedContent = correctedContent.replace(
        new RegExp(correction.from.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'),
        correction.to
      );
      
      if (correctedContent !== originalContent) {
        correctionsApplied++;
        console.log(`‚úÖ ${correction.description} corrig√©`);
      }
    });
    
    // 5. V√©rifier les corrections
    console.log('\nüîç V√âRIFICATION DES CORRECTIONS:');
    console.log('==================================');
    
    const correctedLines = correctedContent.split('\n');
    
    corrections.forEach(correction => {
      const matches = correctedLines.filter(line => line.includes(correction.to));
      if (matches.length > 0) {
        console.log(`‚úÖ ${correction.to}: ${matches.length} occurrence(s) trouv√©e(s)`);
      } else {
        console.log(`‚ùå ${correction.to}: Aucune occurrence trouv√©e`);
      }
    });
    console.log('');
    
    // 6. Cr√©er le fichier corrig√©
    if (correctionsApplied > 0) {
      const backupPath = collaborateursPath + '.backup';
      fs.writeFileSync(backupPath, content, 'utf8');
      console.log(`‚úÖ Sauvegarde cr√©√©e: ${backupPath}`);
      
      fs.writeFileSync(collaborateursPath, correctedContent, 'utf8');
      console.log(`‚úÖ Fichier corrig√©: ${collaborateursPath}`);
      console.log(`üìä Corrections appliqu√©es: ${correctionsApplied}`);
    } else {
      console.log('‚ÑπÔ∏è  Aucune correction n√©cessaire');
    }
    console.log('');
    
    // 7. V√©rifier les routes backend
    console.log('üîç V√âRIFICATION DES ROUTES BACKEND:');
    console.log('====================================');
    
    const routesPath = path.join(__dirname, '../src/routes');
    
    if (fs.existsSync(routesPath)) {
      const files = fs.readdirSync(routesPath);
      console.log('üìÅ Fichiers de routes disponibles:');
      files.forEach(file => {
        if (file.endsWith('.js')) {
          console.log(`   - ${file}`);
        }
      });
      
      // V√©rifier le fichier collaborateurs.js dans les routes
      const collaborateursRoutePath = path.join(routesPath, 'collaborateurs.js');
      if (fs.existsSync(collaborateursRoutePath)) {
        const routeContent = fs.readFileSync(collaborateursRoutePath, 'utf8');
        
        const routeLines = routeContent.split('\n');
        const evolutionRoutes = routeLines.filter(line => 
          line.includes('evolution-grades') || 
          line.includes('evolution-postes') || 
          line.includes('evolution-organisations')
        );
        
        if (evolutionRoutes.length > 0) {
          console.log('\n‚úÖ Routes d\'√©volution trouv√©es dans le backend:');
          evolutionRoutes.forEach(route => {
            console.log(`   ${route.trim()}`);
          });
        } else {
          console.log('\n‚ùå Aucune route d\'√©volution trouv√©e dans le backend');
          console.log('   Il faut cr√©er les routes manquantes');
        }
      } else {
        console.log('\n‚ùå Fichier de routes collaborateurs.js non trouv√©');
      }
    } else {
      console.log('‚ùå Dossier des routes non trouv√©');
    }
    console.log('');
    
    // 8. Recommandations
    console.log('üí° RECOMMANDATIONS:');
    console.log('===================');
    
    console.log('üîß POUR R√âSOUDRE LES ERREURS 400:');
    console.log('   1. V√©rifier que les routes backend existent');
    console.log('   2. V√©rifier que les routes acceptent les bonnes donn√©es');
    console.log('   3. V√©rifier que les tables d\'historique existent');
    console.log('   4. V√©rifier que les contraintes de cl√©s √©trang√®res sont respect√©es');
    console.log('   5. Ajouter des validations c√¥t√© backend');
    console.log('');
    console.log('üîß ROUTES BACKEND √Ä CR√âER:');
    console.log('   POST /api/collaborateurs/evolution-grades');
    console.log('   POST /api/collaborateurs/evolution-postes');
    console.log('   POST /api/collaborateurs/evolution-organisations');
    console.log('');
    console.log('üîß TABLES D\'HISTORIQUE √Ä UTILISER:');
    console.log('   - evolution_grades');
    console.log('   - evolution_postes');
    console.log('   - evolution_organisations');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error.message);
  }
  
  console.log('\n‚úÖ Correction termin√©e !');
}

// Ex√©cuter le script
if (require.main === module) {
  fixRHEvolutionEndpoints();
}

module.exports = { fixRHEvolutionEndpoints };



