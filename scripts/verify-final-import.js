// Script pour v√©rifier l'√©tat final de l'import
require('dotenv').config();
const { Pool } = require('pg');

async function verifyFinalImport() {
    console.log('üîç V√©rification finale de l\'import...\n');
    
    try {
        const pool = new Pool({
            host: process.env.DB_HOST || 'localhost',
            port: parseInt(process.env.DB_PORT) || 5432,
            database: process.env.DB_NAME || 'ebpadfbq_eb_vision_2_0',
            user: process.env.DB_USER || 'ebpadfbq_eb_admin20',
            password: process.env.DB_PASSWORD || '87ifet-Z)&',
            max: 20,
            idleTimeoutMillis: 30000,
            connectionTimeoutMillis: 5000,
            ssl: false,
            family: 4
        });

        // 1. Test de connexion
        console.log('1Ô∏è‚É£ Test de connexion...');
        const testResult = await pool.query('SELECT NOW() as current_time');
        console.log(`‚úÖ Connexion r√©ussie - Heure serveur: ${testResult.rows[0].current_time}`);

        // 2. Lister toutes les tables
        console.log('\n2Ô∏è‚É£ Liste compl√®te des tables...');
        const tablesResult = await pool.query(`
            SELECT table_name, table_type 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        `);
        
        console.log(`üìã Nombre total de tables: ${tablesResult.rows.length}`);
        
        // Chercher les tables d'authentification
        const authTables = ['users', 'business_units', 'roles', 'permissions', 'role_permissions', 'user_permissions', 'user_business_unit_access'];
        const foundAuthTables = [];
        
        tablesResult.rows.forEach(table => {
            if (authTables.includes(table.table_name)) {
                foundAuthTables.push(table.table_name);
            }
        });
        
        console.log('\nüîê Tables d\'authentification trouv√©es:');
        if (foundAuthTables.length > 0) {
            foundAuthTables.forEach(table => console.log(`   ‚úÖ ${table}`));
        } else {
            console.log('   ‚ùå Aucune table d\'authentification trouv√©e');
        }

        // 3. V√©rifier les donn√©es dans les tables d'authentification
        console.log('\n3Ô∏è‚É£ V√©rification des donn√©es...');
        
        for (const table of foundAuthTables) {
            try {
                const countResult = await pool.query(`SELECT COUNT(*) as count FROM ${table}`);
                console.log(`üìä ${table}: ${countResult.rows[0].count} enregistrements`);
                
                // Si c'est la table users, afficher les utilisateurs
                if (table === 'users' && countResult.rows[0].count > 0) {
                    const usersResult = await pool.query(`
                        SELECT nom, prenom, email, role, statut 
                        FROM users 
                        LIMIT 5
                    `);
                    console.log('üë• Utilisateurs:');
                    usersResult.rows.forEach(user => {
                        console.log(`   - ${user.nom} ${user.prenom} (${user.email}) - ${user.role} - ${user.statut}`);
                    });
                }
                
                // Si c'est la table business_units, afficher les business units
                if (table === 'business_units' && countResult.rows[0].count > 0) {
                    const buResult = await pool.query(`
                        SELECT name, description 
                        FROM business_units 
                        LIMIT 5
                    `);
                    console.log('üè¢ Business Units:');
                    buResult.rows.forEach(bu => {
                        console.log(`   - ${bu.name}: ${bu.description || 'Aucune description'}`);
                    });
                }
            } catch (error) {
                console.log(`‚ùå Erreur lors de la v√©rification de ${table}: ${error.message}`);
            }
        }

        // 4. V√©rifier les autres tables importantes
        console.log('\n4Ô∏è‚É£ V√©rification des autres tables importantes...');
        const importantTables = ['utilisateurs', 'collaborateurs', 'missions', 'opportunities', 'companies'];
        
        for (const table of importantTables) {
            try {
                const countResult = await pool.query(`SELECT COUNT(*) as count FROM ${table}`);
                console.log(`üìä ${table}: ${countResult.rows[0].count} enregistrements`);
            } catch (error) {
                console.log(`‚ùå Table ${table} non trouv√©e ou erreur: ${error.message}`);
            }
        }

        await pool.end();
        
        console.log('\nüéØ V√©rification termin√©e !');
        
        if (foundAuthTables.includes('users') && foundAuthTables.includes('business_units')) {
            console.log('\n‚úÖ Import r√©ussi ! Toutes les tables d\'authentification sont pr√©sentes.');
            console.log('\nüí° Prochaines √©tapes:');
            console.log('1. Red√©marrez l\'application: pm2 restart eb-vision-2-0');
            console.log('2. Testez la connexion avec vos identifiants locaux');
            console.log('   - admin@trs.com');
            console.log('   - admin.test@trs.com');
            console.log('   - cdjiki@eb-partnersgroup.cm');
        } else {
            console.log('\n‚ùå Probl√®me d√©tect√© : certaines tables d\'authentification sont manquantes.');
            console.log('üí° Essayez de red√©marrer l\'application et de v√©rifier √† nouveau.');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error.message);
    }
}

verifyFinalImport().catch(console.error);








