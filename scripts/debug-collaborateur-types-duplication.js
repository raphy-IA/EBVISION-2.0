const { Pool } = require('pg');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

// Script pour diagnostiquer la duplication des types de collaborateurs
async function debugCollaborateurTypesDuplication() {
  console.log('üîç Diagnostic de la duplication des types de collaborateurs...\n');
  
  const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'eb_vision_2_0',
    user: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || 'password',
  };
  
  const pool = new Pool(dbConfig);
  let client;
  
  try {
    client = await pool.connect();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie\n');
    
    // 1. V√©rifier la structure de la table types_collaborateurs
    console.log('üìã STRUCTURE DE LA TABLE TYPES_COLLABORATEURS:');
    console.log('===============================================');
    
    const structureQuery = `
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns
      WHERE table_name = 'types_collaborateurs'
      ORDER BY ordinal_position
    `;
    
    const structureResult = await client.query(structureQuery);
    
    if (structureResult.rows.length > 0) {
      structureResult.rows.forEach(row => {
        console.log(`   ${row.column_name}: ${row.data_type} (${row.is_nullable === 'YES' ? 'nullable' : 'not null'}) ${row.column_default ? `default: ${row.column_default}` : ''}`);
      });
    } else {
      console.log('   ‚ùå Table types_collaborateurs non trouv√©e');
      return;
    }
    console.log('');
    
    // 2. V√©rifier les donn√©es dans la table
    console.log('üìä DONN√âES DANS LA TABLE TYPES_COLLABORATEURS:');
    console.log('===============================================');
    
    const dataQuery = `
      SELECT id, nom, code, description, statut, created_at, updated_at
      FROM types_collaborateurs
      ORDER BY nom ASC
    `;
    
    const dataResult = await client.query(dataQuery);
    
    if (dataResult.rows.length > 0) {
      console.log(`   üìà Total des types: ${dataResult.rows.length}`);
      console.log('');
      
      dataResult.rows.forEach((type, index) => {
        console.log(`   ${index + 1}. ID: ${type.id}`);
        console.log(`      Nom: ${type.nom}`);
        console.log(`      Code: ${type.code || 'NULL'}`);
        console.log(`      Description: ${type.description || 'NULL'}`);
        console.log(`      Statut: ${type.statut || 'NULL'}`);
        console.log(`      Cr√©√© le: ${type.created_at ? new Date(type.created_at).toLocaleString('fr-FR') : 'NULL'}`);
        console.log('      ---');
      });
    } else {
      console.log('   ‚ùå Aucun type de collaborateur trouv√©');
    }
    console.log('');
    
    // 3. V√©rifier les doublons par nom
    console.log('üîç V√âRIFICATION DES DOUBLONS PAR NOM:');
    console.log('=====================================');
    
    const duplicatesQuery = `
      SELECT nom, COUNT(*) as count
      FROM types_collaborateurs
      GROUP BY nom
      HAVING COUNT(*) > 1
      ORDER BY count DESC, nom ASC
    `;
    
    const duplicatesResult = await client.query(duplicatesQuery);
    
    if (duplicatesResult.rows.length > 0) {
      console.log(`   ‚ö†Ô∏è ${duplicatesResult.rows.length} nom(s) en doublon trouv√©(s):`);
      duplicatesResult.rows.forEach(duplicate => {
        console.log(`      - "${duplicate.nom}": ${duplicate.count} occurrence(s)`);
      });
    } else {
      console.log('   ‚úÖ Aucun doublon par nom trouv√©');
    }
    console.log('');
    
    // 4. V√©rifier les doublons par code
    console.log('üîç V√âRIFICATION DES DOUBLONS PAR CODE:');
    console.log('======================================');
    
    const codeDuplicatesQuery = `
      SELECT code, COUNT(*) as count
      FROM types_collaborateurs
      WHERE code IS NOT NULL
      GROUP BY code
      HAVING COUNT(*) > 1
      ORDER BY count DESC, code ASC
    `;
    
    const codeDuplicatesResult = await client.query(codeDuplicatesQuery);
    
    if (codeDuplicatesResult.rows.length > 0) {
      console.log(`   ‚ö†Ô∏è ${codeDuplicatesResult.rows.length} code(s) en doublon trouv√©(s):`);
      codeDuplicatesResult.rows.forEach(duplicate => {
        console.log(`      - "${duplicate.code}": ${duplicate.count} occurrence(s)`);
      });
    } else {
      console.log('   ‚úÖ Aucun doublon par code trouv√©');
    }
    console.log('');
    
    // 5. V√©rifier les types avec des codes NULL
    console.log('üîç V√âRIFICATION DES TYPES SANS CODE:');
    console.log('=====================================');
    
    const nullCodeQuery = `
      SELECT id, nom, code
      FROM types_collaborateurs
      WHERE code IS NULL
      ORDER BY nom ASC
    `;
    
    const nullCodeResult = await client.query(nullCodeQuery);
    
    if (nullCodeResult.rows.length > 0) {
      console.log(`   ‚ö†Ô∏è ${nullCodeResult.rows.length} type(s) sans code:`);
      nullCodeResult.rows.forEach(type => {
        console.log(`      - "${type.nom}" (ID: ${type.id})`);
      });
    } else {
      console.log('   ‚úÖ Tous les types ont un code');
    }
    console.log('');
    
    // 6. V√©rifier l'API backend
    console.log('üîç V√âRIFICATION DE L\'API BACKEND:');
    console.log('===================================');
    
    // Simuler l'appel API que fait le frontend
    const apiQuery = `
      SELECT id, nom, code, description, statut
      FROM types_collaborateurs
      WHERE statut = 'ACTIF' OR statut IS NULL
      ORDER BY nom ASC
    `;
    
    const apiResult = await client.query(apiQuery);
    
    console.log(`   üì° R√©sultat de l'API simul√©e: ${apiResult.rows.length} types`);
    apiResult.rows.forEach((type, index) => {
      console.log(`      ${index + 1}. ${type.nom} (${type.code || 'SANS_CODE'})`);
    });
    console.log('');
    
    // 7. Recommandations
    console.log('üí° RECOMMANDATIONS:');
    console.log('===================');
    
    if (duplicatesResult.rows.length > 0 || codeDuplicatesResult.rows.length > 0) {
      console.log('‚ùå Probl√®mes d√©tect√©s:');
      console.log('   1. Des doublons existent dans la table types_collaborateurs');
      console.log('   2. Cela peut causer des duplications dans l\'interface');
      console.log('');
      console.log('üîß Solutions:');
      console.log('   1. Nettoyer les doublons dans la base de donn√©es');
      console.log('   2. Ajouter des contraintes UNIQUE sur nom et code');
      console.log('   3. V√©rifier le code JavaScript pour √©viter les ajouts multiples');
    } else if (nullCodeResult.rows.length > 0) {
      console.log('‚ö†Ô∏è Types sans code d√©tect√©s:');
      console.log('   1. Certains types n\'ont pas de code');
      console.log('   2. Cela peut causer des probl√®mes d\'affichage');
      console.log('');
      console.log('üîß Solutions:');
      console.log('   1. Ajouter des codes pour tous les types');
      console.log('   2. Modifier l\'API pour g√©rer les codes NULL');
    } else {
      console.log('‚úÖ Aucun probl√®me majeur d√©tect√© dans la base de donn√©es');
      console.log('   Le probl√®me de duplication pourrait venir du code JavaScript');
      console.log('');
      console.log('üîß V√©rifications √† faire:');
      console.log('   1. V√©rifier que loadTypesCollaborateurs() n\'est pas appel√©e plusieurs fois');
      console.log('   2. V√©rifier que les options ne sont pas ajout√©es plusieurs fois');
      console.log('   3. V√©rifier que les selects sont bien vid√©s avant d\'√™tre remplis');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.message);
  } finally {
    if (client) client.release();
    await pool.end();
    console.log('\n‚úÖ Diagnostic termin√© !');
  }
}

// Ex√©cuter le script
if (require.main === module) {
  debugCollaborateurTypesDuplication();
}

module.exports = { debugCollaborateurTypesDuplication };



