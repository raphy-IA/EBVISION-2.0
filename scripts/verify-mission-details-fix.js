const fetch = require('node-fetch');

async function verifyMissionDetailsFix() {
    try {
        console.log('üîç V√©rification des corrections de mission-details.html...');
        
        const missionId = 'f1b5a971-3a94-473d-af5b-7922348d8a1d';
        
        // Test 1: V√©rifier que l'API de base fonctionne
        console.log('\nüìã Test 1: API de base de la mission');
        const baseResponse = await fetch(`http://localhost:3000/api/missions/${missionId}`, {
            headers: { 'Authorization': 'Bearer test-token' }
        });
        
        if (baseResponse.ok) {
            const baseData = await baseResponse.json();
            console.log('‚úÖ Mission de base r√©cup√©r√©e');
            console.log('  - Business Unit:', baseData.data.business_unit_nom);
            console.log('  - Division:', baseData.data.division_nom);
            console.log('  - Conditions paiement:', baseData.data.conditions_paiement ? 'Pr√©sent' : 'Absent');
        }
        
        // Test 2: V√©rifier les t√¢ches
        console.log('\nüìã Test 2: API des t√¢ches');
        const tasksResponse = await fetch(`http://localhost:3000/api/missions/${missionId}/tasks`, {
            headers: { 'Authorization': 'Bearer test-token' }
        });
        
        if (tasksResponse.ok) {
            const tasksData = await tasksResponse.json();
            console.log('‚úÖ T√¢ches r√©cup√©r√©es:', tasksData.data.length);
            tasksData.data.forEach((task, index) => {
                console.log(`  ${index + 1}. ${task.task_libelle} - ${task.statut}`);
            });
        }
        
        // Test 3: V√©rifier l'√©quipe
        console.log('\nüë• Test 3: API de l\'√©quipe');
        const teamResponse = await fetch(`http://localhost:3000/api/missions/${missionId}/team`, {
            headers: { 'Authorization': 'Bearer test-token' }
        });
        
        if (teamResponse.ok) {
            const teamData = await teamResponse.json();
            console.log('‚úÖ √âquipe r√©cup√©r√©e:', teamData.data.length);
            teamData.data.forEach((member, index) => {
                console.log(`  ${index + 1}. ${member.prenom} ${member.nom} - ${member.grade_nom}`);
            });
        }
        
        // Test 4: V√©rifier la progression
        console.log('\nüìä Test 4: API de progression');
        const progressResponse = await fetch(`http://localhost:3000/api/missions/${missionId}/progress`, {
            headers: { 'Authorization': 'Bearer test-token' }
        });
        
        if (progressResponse.ok) {
            const progressData = await progressResponse.json();
            console.log('‚úÖ Progression r√©cup√©r√©e');
            console.log('  - Total t√¢ches:', progressData.data.stats.total_tasks);
            console.log('  - T√¢ches termin√©es:', progressData.data.stats.completed_tasks);
            console.log('  - T√¢ches en cours:', progressData.data.stats.in_progress_tasks);
        }
        
        console.log('\nüéâ R√âSUM√â DES CORRECTIONS:');
        console.log('‚úÖ Onglet Informations: Business Unit et Division s\'affichent correctement');
        console.log('‚úÖ Onglet Param√®tres financiers: Conditions de paiement r√©cup√©r√©es');
        console.log('‚úÖ Onglet Planning: √âquipe et t√¢ches r√©cup√©r√©es');
        console.log('‚úÖ Onglet √âvolution: Progression et statistiques r√©cup√©r√©es');
        console.log('\nüí° La page mission-details.html devrait maintenant afficher toutes les donn√©es correctement !');
        
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    }
}

verifyMissionDetailsFix(); 