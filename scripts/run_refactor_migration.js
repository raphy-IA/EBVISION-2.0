const { pool } = require('../src/utils/database');
const fs = require('fs');
const path = require('path');

async function runRefactorMigration() {
    try {
        console.log('üîÑ Ex√©cution de la migration de refactorisation Business Units et Divisions...\n');

        // Lire le fichier de migration
        const migrationPath = path.join(__dirname, '../database/migrations/012_refactor_business_units_divisions.sql');
        const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

        console.log('üìù Contenu de la migration:');
        console.log(migrationSQL);
        console.log('');

        // Ex√©cuter la migration
        console.log('üöÄ Ex√©cution des commandes SQL...');
        const result = await pool.query(migrationSQL);
        
        console.log('‚úÖ Migration ex√©cut√©e avec succ√®s!');
        console.log('üìä R√©sultat:', result);

        // V√©rifier la structure des tables
        console.log('\nüîç V√©rification de la structure des tables...');
        
        // V√©rifier business_units
        const businessUnitsStructure = await pool.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'business_units' 
            ORDER BY ordinal_position
        `);

        console.log('üìã Structure de la table business_units:');
        businessUnitsStructure.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });

        // V√©rifier divisions
        const divisionsStructure = await pool.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'divisions' 
            ORDER BY ordinal_position
        `);

        console.log('\nüìã Structure de la table divisions:');
        divisionsStructure.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });

        // V√©rifier les donn√©es existantes
        console.log('\nüìä V√©rification des donn√©es existantes...');
        
        const businessUnitsCount = await pool.query('SELECT COUNT(*) as count FROM business_units');
        console.log(`  - Business Units: ${businessUnitsCount.rows[0].count}`);
        
        const divisionsCount = await pool.query('SELECT COUNT(*) as count FROM divisions');
        console.log(`  - Divisions: ${divisionsCount.rows[0].count}`);

        console.log('\nüéâ Refactorisation termin√©e avec succ√®s !');

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'ex√©cution de la migration:', error);
    } finally {
        await pool.end();
    }
}

runRefactorMigration(); 