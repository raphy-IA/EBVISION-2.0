#!/usr/bin/env node

/**
 * Script de migration des utilisateurs vers le syst√®me de r√¥les multiples
 * 
 * Ce script migre tous les utilisateurs existants qui ont un r√¥le dans users.role
 * vers le nouveau syst√®me de r√¥les multiples (table user_roles)
 * 
 * Usage:
 *   node scripts/migrate-to-multi-roles.js
 *   node scripts/migrate-to-multi-roles.js --dry-run  (simulation sans modifications)
 */

const fs = require('fs');
const path = require('path');
const { pool } = require('../src/utils/database');

// Configuration
const DRY_RUN = process.argv.includes('--dry-run');
const MIGRATION_FILE = path.join(__dirname, '..', 'migrations', '006_migrate_users_to_multi_roles.sql');

// Couleurs pour la console
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
    console.log(`${color}${message}${colors.reset}`);
}

function logBox(title, color = colors.cyan) {
    const line = '‚ïê'.repeat(68);
    log(`‚ïî${line}‚ïó`, color);
    log(`‚ïë  ${title.padEnd(64)}  ‚ïë`, color);
    log(`‚ïö${line}‚ïù`, color);
}

async function checkPrerequisites() {
    log('\nüîç V√©rification des pr√©requis...', colors.blue);
    
    try {
        // V√©rifier la connexion √† la base de donn√©es
        await pool.query('SELECT 1');
        log('‚úÖ Connexion √† la base de donn√©es: OK', colors.green);
        
        // V√©rifier l'existence de la table users
        const usersTableCheck = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'users'
            );
        `);
        
        if (!usersTableCheck.rows[0].exists) {
            throw new Error('La table "users" n\'existe pas');
        }
        log('‚úÖ Table "users": OK', colors.green);
        
        // V√©rifier l'existence de la table roles
        const rolesTableCheck = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'roles'
            );
        `);
        
        if (!rolesTableCheck.rows[0].exists) {
            throw new Error('La table "roles" n\'existe pas');
        }
        log('‚úÖ Table "roles": OK', colors.green);
        
        // V√©rifier le fichier de migration
        if (!fs.existsSync(MIGRATION_FILE)) {
            throw new Error(`Fichier de migration non trouv√©: ${MIGRATION_FILE}`);
        }
        log('‚úÖ Fichier de migration: OK', colors.green);
        
        return true;
    } catch (error) {
        log(`‚ùå Erreur lors de la v√©rification: ${error.message}`, colors.red);
        return false;
    }
}

async function getStatisticsBefore() {
    log('\nüìä Statistiques AVANT migration:', colors.cyan);
    
    try {
        // Nombre total d'utilisateurs actifs
        const totalUsersResult = await pool.query(`
            SELECT COUNT(*) as count FROM users WHERE statut = 'ACTIF'
        `);
        const totalUsers = parseInt(totalUsersResult.rows[0].count);
        log(`   Utilisateurs actifs: ${totalUsers}`, colors.yellow);
        
        // Utilisateurs avec r√¥les multiples
        const usersWithMultiRolesResult = await pool.query(`
            SELECT COUNT(DISTINCT user_id) as count FROM user_roles
        `);
        const usersWithMultiRoles = parseInt(usersWithMultiRolesResult.rows[0].count);
        log(`   Utilisateurs avec r√¥les multiples: ${usersWithMultiRoles}`, colors.yellow);
        
        // Utilisateurs sans r√¥les multiples
        const usersWithoutMultiRolesResult = await pool.query(`
            SELECT COUNT(*) as count
            FROM users u
            WHERE u.statut = 'ACTIF'
            AND NOT EXISTS (
                SELECT 1 FROM user_roles ur WHERE ur.user_id = u.id
            )
        `);
        const usersWithoutMultiRoles = parseInt(usersWithoutMultiRolesResult.rows[0].count);
        log(`   Utilisateurs √† migrer: ${usersWithoutMultiRoles}`, colors.yellow);
        
        // Utilisateurs sans r√¥le d√©fini
        const usersWithoutRoleResult = await pool.query(`
            SELECT COUNT(*) as count
            FROM users u
            WHERE u.statut = 'ACTIF'
            AND (u.role IS NULL OR u.role = '')
            AND NOT EXISTS (
                SELECT 1 FROM user_roles ur WHERE ur.user_id = u.id
            )
        `);
        const usersWithoutRole = parseInt(usersWithoutRoleResult.rows[0].count);
        if (usersWithoutRole > 0) {
            log(`   ‚ö†Ô∏è  Utilisateurs sans r√¥le d√©fini: ${usersWithoutRole}`, colors.red);
        }
        
        return {
            totalUsers,
            usersWithMultiRoles,
            usersWithoutMultiRoles,
            usersWithoutRole
        };
    } catch (error) {
        log(`‚ùå Erreur lors de la r√©cup√©ration des statistiques: ${error.message}`, colors.red);
        throw error;
    }
}

async function runMigration() {
    log('\nüöÄ Ex√©cution de la migration...', colors.green);
    
    try {
        // Lire le fichier SQL
        const migrationSQL = fs.readFileSync(MIGRATION_FILE, 'utf8');
        
        if (DRY_RUN) {
            log('‚ö†Ô∏è  MODE DRY-RUN: La migration ne sera PAS ex√©cut√©e', colors.yellow);
            log('   Pour ex√©cuter r√©ellement, lancez sans --dry-run', colors.yellow);
            return { success: true, dryRun: true };
        }
        
        // Ex√©cuter la migration
        log('   Ex√©cution du script SQL...', colors.blue);
        await pool.query(migrationSQL);
        
        log('‚úÖ Migration ex√©cut√©e avec succ√®s!', colors.green);
        return { success: true, dryRun: false };
    } catch (error) {
        log(`‚ùå Erreur lors de l'ex√©cution de la migration: ${error.message}`, colors.red);
        throw error;
    }
}

async function getStatisticsAfter() {
    log('\nüìä Statistiques APR√àS migration:', colors.cyan);
    
    try {
        // Nombre total d'utilisateurs actifs
        const totalUsersResult = await pool.query(`
            SELECT COUNT(*) as count FROM users WHERE statut = 'ACTIF'
        `);
        const totalUsers = parseInt(totalUsersResult.rows[0].count);
        log(`   Utilisateurs actifs: ${totalUsers}`, colors.yellow);
        
        // Utilisateurs avec r√¥les multiples
        const usersWithMultiRolesResult = await pool.query(`
            SELECT COUNT(DISTINCT user_id) as count FROM user_roles
        `);
        const usersWithMultiRoles = parseInt(usersWithMultiRolesResult.rows[0].count);
        log(`   Utilisateurs avec r√¥les multiples: ${usersWithMultiRoles}`, colors.yellow);
        
        // Utilisateurs sans r√¥les multiples
        const usersWithoutMultiRolesResult = await pool.query(`
            SELECT COUNT(*) as count
            FROM users u
            WHERE u.statut = 'ACTIF'
            AND NOT EXISTS (
                SELECT 1 FROM user_roles ur WHERE ur.user_id = u.id
            )
        `);
        const usersWithoutMultiRoles = parseInt(usersWithoutMultiRolesResult.rows[0].count);
        
        if (usersWithoutMultiRoles > 0) {
            log(`   ‚ö†Ô∏è  Utilisateurs restants √† migrer: ${usersWithoutMultiRoles}`, colors.red);
            
            // Lister les utilisateurs concern√©s
            const usersListResult = await pool.query(`
                SELECT id, nom, prenom, email, role
                FROM users u
                WHERE u.statut = 'ACTIF'
                AND NOT EXISTS (
                    SELECT 1 FROM user_roles ur WHERE ur.user_id = u.id
                )
                LIMIT 10
            `);
            
            log('\n   Utilisateurs non migr√©s:', colors.yellow);
            usersListResult.rows.forEach(user => {
                log(`     - ${user.prenom} ${user.nom} (${user.email}) - R√¥le: ${user.role || 'NULL'}`, colors.yellow);
            });
            
            if (usersWithoutMultiRoles > 10) {
                log(`     ... et ${usersWithoutMultiRoles - 10} autre(s)`, colors.yellow);
            }
        } else {
            log(`   ‚úÖ Tous les utilisateurs ont √©t√© migr√©s!`, colors.green);
        }
        
        // Total d'assignations de r√¥les
        const totalAssignmentsResult = await pool.query(`
            SELECT COUNT(*) as count FROM user_roles
        `);
        const totalAssignments = parseInt(totalAssignmentsResult.rows[0].count);
        log(`   Total d'assignations de r√¥les: ${totalAssignments}`, colors.yellow);
        
        // Utilisateurs avec plusieurs r√¥les
        const usersWithMultipleRolesResult = await pool.query(`
            SELECT COUNT(*) as count
            FROM (
                SELECT user_id
                FROM user_roles
                GROUP BY user_id
                HAVING COUNT(*) > 1
            ) AS multi
        `);
        const usersWithMultipleRoles = parseInt(usersWithMultipleRolesResult.rows[0].count);
        log(`   Utilisateurs avec plusieurs r√¥les: ${usersWithMultipleRoles}`, colors.yellow);
        
        return {
            totalUsers,
            usersWithMultiRoles,
            usersWithoutMultiRoles,
            totalAssignments,
            usersWithMultipleRoles
        };
    } catch (error) {
        log(`‚ùå Erreur lors de la r√©cup√©ration des statistiques: ${error.message}`, colors.red);
        throw error;
    }
}

async function main() {
    try {
        logBox('MIGRATION VERS SYST√àME DE R√îLES MULTIPLES', colors.magenta);
        
        if (DRY_RUN) {
            log('\n‚ö†Ô∏è  MODE DRY-RUN ACTIV√â', colors.yellow);
            log('   La migration sera simul√©e sans modifications r√©elles\n', colors.yellow);
        }
        
        // V√©rification des pr√©requis
        const prereqsOk = await checkPrerequisites();
        if (!prereqsOk) {
            log('\n‚ùå Les pr√©requis ne sont pas satisfaits. Migration annul√©e.', colors.red);
            process.exit(1);
        }
        
        // Statistiques avant
        const statsBefore = await getStatisticsBefore();
        
        if (statsBefore.usersWithoutMultiRoles === 0) {
            log('\n‚úÖ Tous les utilisateurs ont d√©j√† des r√¥les multiples!', colors.green);
            log('   Aucune migration n√©cessaire.', colors.green);
            process.exit(0);
        }
        
        // Confirmation si pas en dry-run
        if (!DRY_RUN) {
            log('\n‚ö†Ô∏è  ATTENTION: Cette migration va modifier la base de donn√©es', colors.yellow);
            log(`   ${statsBefore.usersWithoutMultiRoles} utilisateur(s) seront migr√©(s)`, colors.yellow);
            log('\n   Appuyez sur Ctrl+C pour annuler, ou attendez 5 secondes...', colors.yellow);
            
            await new Promise(resolve => setTimeout(resolve, 5000));
        }
        
        // Ex√©cution de la migration
        const result = await runMigration();
        
        if (!result.dryRun) {
            // Statistiques apr√®s
            const statsAfter = await getStatisticsAfter();
            
            // R√©sum√©
            log('\n', colors.reset);
            logBox('R√âSUM√â DE LA MIGRATION', colors.green);
            log(`   Utilisateurs migr√©s: ${statsAfter.usersWithMultiRoles - statsBefore.usersWithMultiRoles}`, colors.green);
            log(`   Total d'utilisateurs avec r√¥les multiples: ${statsAfter.usersWithMultiRoles}`, colors.green);
            log(`   Utilisateurs restants sans r√¥les: ${statsAfter.usersWithoutMultiRoles}`, colors.yellow);
        }
        
        log('\n‚úÖ Migration termin√©e avec succ√®s!\n', colors.green);
        process.exit(0);
        
    } catch (error) {
        log(`\n‚ùå Erreur fatale: ${error.message}`, colors.red);
        console.error(error);
        process.exit(1);
    } finally {
        // Fermer la connexion
        await pool.end();
    }
}

// Ex√©cution
main();


