const { pool } = require('../src/utils/database');

async function executeRefactorStepByStep() {
    try {
        console.log('üîÑ Ex√©cution de la refactorisation √©tape par √©tape...\n');

        // √âtape 1: Renommer la table divisions en business_units
        console.log('üìù √âtape 1: Renommer divisions en business_units...');
        await pool.query('ALTER TABLE divisions RENAME TO business_units');
        console.log('‚úÖ Table divisions renomm√©e en business_units');

        // √âtape 2: Cr√©er la nouvelle table divisions
        console.log('\nüìù √âtape 2: Cr√©er la nouvelle table divisions...');
        const createDivisionsSQL = `
            CREATE TABLE divisions (
                id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                nom VARCHAR(100) NOT NULL,
                code VARCHAR(10) NOT NULL UNIQUE,
                description TEXT,
                business_unit_id UUID NOT NULL REFERENCES business_units(id) ON DELETE CASCADE,
                statut VARCHAR(20) NOT NULL DEFAULT 'ACTIF' CHECK (statut IN ('ACTIF', 'INACTIF')),
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `;
        await pool.query(createDivisionsSQL);
        console.log('‚úÖ Nouvelle table divisions cr√©√©e');

        // √âtape 3: Cr√©er les index pour divisions
        console.log('\nüìù √âtape 3: Cr√©er les index pour divisions...');
        await pool.query('CREATE INDEX idx_divisions_code ON divisions(code)');
        await pool.query('CREATE INDEX idx_divisions_statut ON divisions(statut)');
        await pool.query('CREATE INDEX idx_divisions_business_unit_id ON divisions(business_unit_id)');
        console.log('‚úÖ Index pour divisions cr√©√©s');

        // √âtape 4: Cr√©er les triggers pour divisions
        console.log('\nüìù √âtape 4: Cr√©er les triggers pour divisions...');
        await pool.query('CREATE TRIGGER update_divisions_updated_at BEFORE UPDATE ON divisions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()');
        console.log('‚úÖ Trigger pour divisions cr√©√©');

        // √âtape 5: Cr√©er les index pour business_units
        console.log('\nüìù √âtape 5: Cr√©er les index pour business_units...');
        await pool.query('CREATE INDEX idx_business_units_code ON business_units(code)');
        await pool.query('CREATE INDEX idx_business_units_statut ON business_units(statut)');
        console.log('‚úÖ Index pour business_units cr√©√©s');

        // √âtape 6: Cr√©er les triggers pour business_units
        console.log('\nüìù √âtape 6: Cr√©er les triggers pour business_units...');
        await pool.query('CREATE TRIGGER update_business_units_updated_at BEFORE UPDATE ON business_units FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()');
        console.log('‚úÖ Trigger pour business_units cr√©√©');

        // √âtape 7: Ajouter la colonne description √† business_units si elle n'existe pas
        console.log('\nüìù √âtape 7: Ajouter la colonne description √† business_units...');
        try {
            await pool.query('ALTER TABLE business_units ADD COLUMN description TEXT');
            console.log('‚úÖ Colonne description ajout√©e √† business_units');
        } catch (error) {
            if (error.code === '42701') { // colonne d√©j√† existe
                console.log('‚ÑπÔ∏è Colonne description existe d√©j√† dans business_units');
            } else {
                throw error;
            }
        }

        // V√©rification finale
        console.log('\nüîç V√©rification finale...');
        
        const businessUnitsCount = await pool.query('SELECT COUNT(*) as count FROM business_units');
        const divisionsCount = await pool.query('SELECT COUNT(*) as count FROM divisions');
        
        console.log(`üìä Nombre de business units: ${businessUnitsCount.rows[0].count}`);
        console.log(`üìä Nombre de divisions: ${divisionsCount.rows[0].count}`);

        // V√©rifier la structure des tables
        const businessUnitsStructure = await pool.query(`
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'business_units' 
            ORDER BY ordinal_position
        `);

        console.log('\nüìã Structure finale de business_units:');
        businessUnitsStructure.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });

        const divisionsStructure = await pool.query(`
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'divisions' 
            ORDER BY ordinal_position
        `);

        console.log('\nüìã Structure finale de divisions:');
        divisionsStructure.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });

        console.log('\nüéâ Refactorisation termin√©e avec succ√®s !');

    } catch (error) {
        console.error('‚ùå Erreur lors de la refactorisation:', error);
        console.error('D√©tails:', error.message);
    } finally {
        await pool.end();
    }
}

executeRefactorStepByStep(); 