const { Pool } = require('pg');

// Configuration de la base de donn√©es de production
const pool = new Pool({
    host: 'localhost',
    port: 5432,
    database: 'ebpadfbq_eb_vision_2_0',
    user: 'ebpadfbq_eb_admin20',
    password: 'Canaan@2020',
    ssl: false
});

async function checkSecteursDatabase() {
    console.log('üîç V√©rification des secteurs d\'activit√© dans la base de donn√©es...\n');

    try {
        // Test 1: V√©rifier la table secteurs_activite
        console.log('1Ô∏è‚É£ V√©rification de la table secteurs_activite:');
        const secteursResult = await pool.query(`
            SELECT COUNT(*) as total, 
                   COUNT(CASE WHEN actif = true THEN 1 END) as actifs
            FROM secteurs_activite
        `);
        console.log(`   üìä Total secteurs: ${secteursResult.rows[0].total}`);
        console.log(`   ‚úÖ Secteurs actifs: ${secteursResult.rows[0].actifs}`);

        // Test 2: Lister les secteurs actifs
        console.log('\n2Ô∏è‚É£ Secteurs actifs:');
        const secteursActifs = await pool.query(`
            SELECT id, nom, code, actif, ordre
            FROM secteurs_activite 
            WHERE actif = true 
            ORDER BY ordre, nom
        `);
        
        if (secteursActifs.rows.length > 0) {
            secteursActifs.rows.forEach((secteur, index) => {
                console.log(`   ${index + 1}. ${secteur.nom} (${secteur.code}) - Ordre: ${secteur.ordre}`);
            });
        } else {
            console.log('   ‚ùå Aucun secteur actif trouv√©!');
        }

        // Test 3: V√©rifier les sous-secteurs
        console.log('\n3Ô∏è‚É£ V√©rification des sous-secteurs:');
        const sousSecteursResult = await pool.query(`
            SELECT COUNT(*) as total, 
                   COUNT(CASE WHEN actif = true THEN 1 END) as actifs
            FROM sous_secteurs_activite
        `);
        console.log(`   üìä Total sous-secteurs: ${sousSecteursResult.rows[0].total}`);
        console.log(`   ‚úÖ Sous-secteurs actifs: ${sousSecteursResult.rows[0].actifs}`);

        // Test 4: Requ√™te exacte de l'API
        console.log('\n4Ô∏è‚É£ Test de la requ√™te exacte de l\'API:');
        const apiQuery = await pool.query(`
            SELECT s.nom, s.code, s.couleur, s.icone, 
                   array_agg(ss.nom ORDER BY ss.ordre) as sous_secteurs
            FROM secteurs_activite s
            LEFT JOIN sous_secteurs_activite ss ON s.id = ss.secteur_id AND ss.actif = true
            WHERE s.actif = true
            GROUP BY s.id, s.nom, s.code, s.couleur, s.icone
            ORDER BY s.ordre, s.nom
        `);
        
        console.log(`   üìä R√©sultats de la requ√™te API: ${apiQuery.rows.length} secteurs`);
        if (apiQuery.rows.length > 0) {
            apiQuery.rows.forEach((secteur, index) => {
                const sousSecteurs = secteur.sous_secteurs.filter(ss => ss !== null);
                console.log(`   ${index + 1}. ${secteur.nom} (${secteur.code}) - ${sousSecteurs.length} sous-secteurs`);
            });
        } else {
            console.log('   ‚ùå Aucun r√©sultat pour la requ√™te API!');
        }

        // Test 5: V√©rifier la structure des tables
        console.log('\n5Ô∏è‚É£ Structure des tables:');
        const structureSecteurs = await pool.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'secteurs_activite' 
            ORDER BY ordinal_position
        `);
        console.log('   üìã Colonnes de secteurs_activite:');
        structureSecteurs.rows.forEach(col => {
            console.log(`      - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error.message);
        console.error('   D√©tails:', error);
    } finally {
        await pool.end();
    }
}

// Ex√©cuter la v√©rification
checkSecteursDatabase();







