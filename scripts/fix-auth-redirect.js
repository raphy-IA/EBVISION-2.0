const fs = require('fs');
const path = require('path');

function fixAuthRedirect() {
    console.log('üîß CORRECTION DU SYST√àME DE REDIRECTION AUTH');
    console.log('============================================');

    try {
        // 1. V√©rifier et corriger auth.js
        console.log('\nüìù 1. CORRECTION DE auth.js');
        
        const authJsPath = path.join(__dirname, '../public/js/auth.js');
        let authJsContent = fs.readFileSync(authJsPath, 'utf8');
        
        // V√©rifier que les redirections pointent vers /login.html
        if (!authJsContent.includes('window.location.href = \'/login.html\'')) {
            console.log('‚ö†Ô∏è Redirection incorrecte d√©tect√©e dans auth.js');
            
            // Remplacer les redirections incorrectes
            authJsContent = authJsContent.replace(
                /window\.location\.href = ['"]\/['"]/g,
                'window.location.href = \'/login.html\''
            );
            
            fs.writeFileSync(authJsPath, authJsContent);
            console.log('‚úÖ auth.js corrig√©');
        } else {
            console.log('‚úÖ auth.js d√©j√† correct');
        }

        // 2. V√©rifier et corriger les pages HTML
        console.log('\nüìù 2. V√âRIFICATION DES PAGES HTML');
        
        const publicDir = path.join(__dirname, '../public');
        const htmlFiles = fs.readdirSync(publicDir).filter(file => file.endsWith('.html'));
        
        let correctedFiles = 0;
        
        htmlFiles.forEach(file => {
            if (file === 'login.html') return; // Ignorer la page de login
            
            const filePath = path.join(publicDir, file);
            let content = fs.readFileSync(filePath, 'utf8');
            
            // V√©rifier si la page inclut auth.js
            if (content.includes('auth.js')) {
                console.log(`   - ${file}: Inclut auth.js ‚úÖ`);
                
                // V√©rifier que la page a une structure de base
                if (!content.includes('<html') || !content.includes('</html>')) {
                    console.log(`   ‚ö†Ô∏è ${file}: Structure HTML incompl√®te`);
                }
            } else {
                console.log(`   - ${file}: N'inclut pas auth.js ‚ö†Ô∏è`);
                
                // Ajouter auth.js si c'est une page principale
                const mainPages = ['dashboard.html', 'collaborateurs.html', 'missions.html', 'opportunities.html'];
                if (mainPages.includes(file)) {
                    console.log(`   üìù Ajout d'auth.js √† ${file}`);
                    
                    // Ajouter auth.js apr√®s les autres scripts
                    const scriptTag = '    <script src="js/auth.js"></script>';
                    if (!content.includes(scriptTag)) {
                        // Trouver la position pour ins√©rer auth.js
                        const insertPosition = content.lastIndexOf('</head>');
                        if (insertPosition !== -1) {
                            content = content.slice(0, insertPosition) + 
                                    '\n    ' + scriptTag + '\n' + 
                                    content.slice(insertPosition);
                            fs.writeFileSync(filePath, content);
                            correctedFiles++;
                            console.log(`   ‚úÖ auth.js ajout√© √† ${file}`);
                        }
                    }
                }
            }
        });
        
        console.log(`‚úÖ ${correctedFiles} fichiers corrig√©s`);

        // 3. Cr√©er un script de v√©rification d'authentification global
        console.log('\nüìù 3. CR√âATION D\'UN SCRIPT DE V√âRIFICATION GLOBAL');
        
        const globalAuthScript = `
// Script de v√©rification d'authentification global
(function() {
    'use strict';
    
    // V√©rifier l'authentification au chargement de la page
    document.addEventListener('DOMContentLoaded', function() {
        // Si on est sur la page de login, ne rien faire
        if (window.location.pathname === '/login.html' || 
            window.location.pathname === '/' || 
            window.location.pathname.includes('login')) {
            return;
        }
        
        // V√©rifier si un token existe
        const token = localStorage.getItem('authToken');
        if (!token) {
            console.log('üîí Aucun token trouv√©, redirection vers la page de connexion');
            window.location.href = '/login.html';
            return;
        }
        
        // V√©rifier la validit√© du token
        fetch('/api/auth/verify', {
            method: 'GET',
            headers: {
                'Authorization': \`Bearer \${token}\`,
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                console.log('üîí Token invalide, redirection vers la page de connexion');
                localStorage.removeItem('authToken');
                localStorage.removeItem('user');
                window.location.href = '/login.html';
            } else {
                console.log('‚úÖ Token valide, utilisateur authentifi√©');
            }
        })
        .catch(error => {
            console.error('‚ùå Erreur lors de la v√©rification du token:', error);
            localStorage.removeItem('authToken');
            localStorage.removeItem('user');
            window.location.href = '/login.html';
        });
    });
})();
`;
        
        const globalAuthPath = path.join(__dirname, '../public/js/global-auth.js');
        fs.writeFileSync(globalAuthPath, globalAuthScript);
        console.log('‚úÖ Script global-auth.js cr√©√©');

        // 4. Ajouter le script global aux pages principales
        console.log('\nüìù 4. AJOUT DU SCRIPT GLOBAL AUX PAGES PRINCIPALES');
        
        const mainPages = ['dashboard.html', 'collaborateurs.html', 'missions.html', 'opportunities.html', 'analytics.html'];
        let updatedPages = 0;
        
        mainPages.forEach(page => {
            const filePath = path.join(publicDir, page);
            if (fs.existsSync(filePath)) {
                let content = fs.readFileSync(filePath, 'utf8');
                
                // Ajouter le script global s'il n'est pas d√©j√† pr√©sent
                const globalScriptTag = '    <script src="js/global-auth.js"></script>';
                if (!content.includes(globalScriptTag)) {
                    const insertPosition = content.lastIndexOf('</head>');
                    if (insertPosition !== -1) {
                        content = content.slice(0, insertPosition) + 
                                '\n    ' + globalScriptTag + '\n' + 
                                content.slice(insertPosition);
                        fs.writeFileSync(filePath, content);
                        updatedPages++;
                        console.log(`   ‚úÖ Script global ajout√© √† ${page}`);
                    }
                } else {
                    console.log(`   - ${page}: Script global d√©j√† pr√©sent`);
                }
            }
        });
        
        console.log(`‚úÖ ${updatedPages} pages mises √† jour`);

        // 5. Cr√©er un guide de test
        console.log('\nüìù 5. CR√âATION D\'UN GUIDE DE TEST');
        
        const testGuide = `# Guide de Test - Syst√®me d'Authentification

## Tests √† effectuer

### 1. Test de redirection automatique
1. Ouvrir http://localhost:3000/dashboard.html sans √™tre connect√©
2. V√©rifier que vous √™tes redirig√© vers http://localhost:3000/login.html

### 2. Test de connexion
1. Aller sur http://localhost:3000/login.html
2. Se connecter avec :
   - Email: test@trs.com
   - Mot de passe: Test123!
3. V√©rifier que vous √™tes redirig√© vers le dashboard

### 3. Test de d√©connexion
1. √ätre connect√© sur une page
2. Cliquer sur "D√©connexion"
3. V√©rifier que vous √™tes redirig√© vers la page de connexion

### 4. Test de session expir√©e
1. √ätre connect√©
2. Supprimer le token dans localStorage (F12 > Application > Local Storage)
3. Recharger la page
4. V√©rifier que vous √™tes redirig√© vers la page de connexion

## Pages test√©es
- ‚úÖ dashboard.html
- ‚úÖ collaborateurs.html
- ‚úÖ missions.html
- ‚úÖ opportunities.html
- ‚úÖ analytics.html

## Utilisateur de test
- Email: test@trs.com
- Mot de passe: Test123!
- Statut: ACTIF
- R√¥le: ADMIN
`;
        
        const guidePath = path.join(__dirname, '../GUIDE_TEST_AUTH.md');
        fs.writeFileSync(guidePath, testGuide);
        console.log('‚úÖ Guide de test cr√©√©: GUIDE_TEST_AUTH.md');

        console.log('\n‚úÖ CORRECTION TERMIN√âE AVEC SUCC√àS');
        console.log('\nüéØ PROCHAINES √âTAPES:');
        console.log('1. Red√©marrer le serveur: npm start');
        console.log('2. Tester la redirection: http://localhost:3000/dashboard.html');
        console.log('3. Se connecter avec: test@trs.com / Test123!');
        console.log('4. V√©rifier que toutes les pages prot√®gent l\'acc√®s');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error);
        throw error;
    }
}

// Ex√©cuter la correction
if (require.main === module) {
    fixAuthRedirect();
    console.log('\nüéâ Correction termin√©e');
}

module.exports = { fixAuthRedirect }; 