#!/usr/bin/env node

/**
 * Script pour tester la correction finale du changement de mot de passe
 */

const User = require('../src/models/User');

async function testPasswordChangeFix() {
    console.log('üß™ TEST DE LA CORRECTION FINALE DU CHANGEMENT DE MOT DE PASSE');
    console.log('============================================================\n');

    try {
        // R√©cup√©rer l'utilisateur admin (le plus r√©cemment modifi√©)
        console.log('üîç R√©cup√©ration de l\'utilisateur admin...');
        const adminUser = await User.findByLogin('admin');
        
        if (!adminUser) {
            console.log('‚ùå Utilisateur admin non trouv√©');
            return;
        }

        console.log('‚úÖ Utilisateur admin trouv√©:');
        console.log(`   ID: ${adminUser.id}`);
        console.log(`   Login: ${adminUser.login}`);
        console.log(`   Email: ${adminUser.email}`);
        console.log(`   Nom: ${adminUser.nom} ${adminUser.prenom}`);
        console.log(`   R√¥le: ${adminUser.role}`);
        console.log(`   Password Hash: ${adminUser.password_hash ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
        console.log(`   Longueur Hash: ${adminUser.password_hash ? adminUser.password_hash.length : 0} caract√®res\n`);

        // Tester la m√©thode findById
        console.log('üîç Test de la m√©thode findById...');
        const userById = await User.findById(adminUser.id);
        
        if (!userById) {
            console.log('‚ùå Utilisateur non trouv√© par ID');
            return;
        }

        console.log('‚úÖ Utilisateur trouv√© par ID:');
        console.log(`   Password Hash: ${userById.password_hash ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
        console.log(`   Longueur Hash: ${userById.password_hash ? userById.password_hash.length : 0} caract√®res\n`);

        // V√©rifier que les deux m√©thodes retournent le m√™me password_hash
        const hashesMatch = adminUser.password_hash === userById.password_hash;
        console.log(`üîç Correspondance des hash: ${hashesMatch ? '‚úÖ Identiques' : '‚ùå Diff√©rents'}\n`);

        if (hashesMatch && userById.password_hash) {
            console.log('üéâ CORRECTION R√âUSSIE !');
            console.log('======================');
            console.log('‚úÖ La m√©thode findById retourne maintenant le password_hash');
            console.log('‚úÖ Le changement de mot de passe devrait fonctionner');
            console.log('‚úÖ L\'utilisateur peut maintenant changer son mot de passe');
        } else {
            console.log('‚ùå PROBL√àME PERSISTANT');
            console.log('======================');
            console.log('‚ùå La m√©thode findById ne retourne toujours pas le password_hash');
        }

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        // Fermer la connexion √† la base de donn√©es
        const { pool } = require('../src/utils/database');
        await pool.end();
    }
}

// Ex√©cuter le test
testPasswordChangeFix().catch(console.error);
