const fs = require('fs');
const path = require('path');

// Script pour analyser les permissions de soumission des campagnes de prospection
function analyzeCampaignSubmissionPermissions() {
  console.log('üîç Analyse des permissions de soumission des campagnes...\n');
  
  try {
    const summaryPath = path.join(__dirname, '..', 'public', 'prospecting-campaign-summary.html');
    const routesPath = path.join(__dirname, '..', 'src', 'routes', 'prospecting.js');
    
    console.log('üìÅ V√©rification des fichiers...');
    
    if (!fs.existsSync(summaryPath)) {
      console.error('‚ùå Fichier prospecting-campaign-summary.html non trouv√©');
      return;
    }
    
    if (!fs.existsSync(routesPath)) {
      console.error('‚ùå Fichier src/routes/prospecting.js non trouv√©');
      return;
    }
    
    console.log('‚úÖ Fichiers trouv√©s\n');
    
    console.log('üîç ANALYSE DES PERMISSIONS:');
    console.log('============================');
    
    // 1. Analyse du frontend
    console.log('üì± FRONTEND (prospecting-campaign-summary.html):');
    console.log('================================================');
    
    const summaryContent = fs.readFileSync(summaryPath, 'utf8');
    
    // V√©rifier la logique d'affichage du bouton de soumission
    const hasSubmitButton = summaryContent.includes('submitCampaignBtn');
    const hasSubmitFunction = summaryContent.includes('submitForValidation()');
    const hasUpdateActionButtons = summaryContent.includes('updateActionButtons');
    
    console.log(`   Bouton de soumission: ${hasSubmitButton ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Fonction de soumission: ${hasSubmitFunction ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Gestion des boutons: ${hasUpdateActionButtons ? '‚úÖ' : '‚ùå'}`);
    
    // Extraire la logique d'affichage du bouton
    const buttonLogicMatch = summaryContent.match(/if \(status === 'DRAFT' \|\| status === 'BROUILLON'\)/);
    if (buttonLogicMatch) {
      console.log('   ‚úÖ Bouton affich√© uniquement pour les campagnes en brouillon');
    } else {
      console.log('   ‚ùå Logique d\'affichage du bouton non trouv√©e');
    }
    
    // 2. Analyse du backend
    console.log('\nüîß BACKEND (src/routes/prospecting.js):');
    console.log('=======================================');
    
    const routesContent = fs.readFileSync(routesPath, 'utf8');
    
    // V√©rifier l'endpoint de soumission
    const hasSubmitEndpoint = routesContent.includes('/campaigns/:id/submit');
    const hasCheckAuthFunction = routesContent.includes('checkCampaignAuthorization');
    
    console.log(`   Endpoint de soumission: ${hasSubmitEndpoint ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Fonction de v√©rification: ${hasCheckAuthFunction ? '‚úÖ' : '‚ùå'}`);
    
    // Extraire la logique d'autorisation
    const authLogicMatch = routesContent.match(/authorized: isCreator \|\| isManager/);
    if (authLogicMatch) {
      console.log('   ‚úÖ Autorisation bas√©e sur cr√©ateur OU manager');
    } else {
      console.log('   ‚ùå Logique d\'autorisation non trouv√©e');
    }
    
    // 3. Analyse d√©taill√©e des permissions
    console.log('\nüîê PERMISSIONS D√âTAILL√âES:');
    console.log('===========================');
    
    // Extraire la fonction checkCampaignAuthorization
    const authFunctionMatch = routesContent.match(/async function checkCampaignAuthorization\([\s\S]*?return \{[\s\S]*?\}/);
    if (authFunctionMatch) {
      const authFunction = authFunctionMatch[0];
      
      // V√©rifier les conditions d'autorisation
      const hasCreatorCheck = authFunction.includes('isCreator = campaign.created_by === userId');
      const hasManagerCheck = authFunction.includes('isManager');
      const hasBUManagerCheck = authFunction.includes('getBusinessUnitManagers');
      const hasDivManagerCheck = authFunction.includes('getDivisionManagers');
      
      console.log('   üìã Conditions d\'autorisation:');
      console.log(`      - Cr√©ateur de la campagne: ${hasCreatorCheck ? '‚úÖ' : '‚ùå'}`);
      console.log(`      - Manager de la campagne: ${hasManagerCheck ? '‚úÖ' : '‚ùå'}`);
      console.log(`      - Manager de Business Unit: ${hasBUManagerCheck ? '‚úÖ' : '‚ùå'}`);
      console.log(`      - Manager de Division: ${hasDivManagerCheck ? '‚úÖ' : '‚ùå'}`);
      
      // V√©rifier la logique finale
      const hasFinalAuth = authFunction.includes('authorized: isCreator || isManager');
      console.log(`      - Logique finale (cr√©ateur OU manager): ${hasFinalAuth ? '‚úÖ' : '‚ùå'}`);
    }
    
    // 4. R√©sum√© des permissions
    console.log('\nüìä R√âSUM√â DES PERMISSIONS:');
    console.log('===========================');
    console.log('‚úÖ QUI PEUT SOUMETTRE UNE CAMPAGNE:');
    console.log('   1. Le cr√©ateur de la campagne');
    console.log('   2. Le responsable principal de la Business Unit');
    console.log('   3. Le responsable adjoint de la Business Unit');
    console.log('   4. Le responsable principal de la Division');
    console.log('   5. Le responsable adjoint de la Division');
    console.log('');
    console.log('‚ùå QUI NE PEUT PAS SOUMETTRE:');
    console.log('   - Les autres utilisateurs');
    console.log('   - Les utilisateurs sans r√¥le de management');
    console.log('   - Les utilisateurs d\'autres Business Units/Divisions');
    console.log('');
    
    // 5. Conditions d'affichage du bouton
    console.log('üéØ CONDITIONS D\'AFFICHAGE DU BOUTON:');
    console.log('=====================================');
    console.log('‚úÖ Le bouton "Soumettre pour validation" s\'affiche si:');
    console.log('   1. La campagne est en statut "DRAFT" ou "BROUILLON"');
    console.log('   2. L\'utilisateur a les permissions (cr√©ateur OU manager)');
    console.log('');
    console.log('‚ùå Le bouton ne s\'affiche pas si:');
    console.log('   - La campagne est d√©j√† soumise (PENDING_VALIDATION)');
    console.log('   - La campagne est valid√©e (VALIDATED)');
    console.log('   - La campagne est rejet√©e (REJECTED)');
    console.log('');
    
    // 6. Workflow de soumission
    console.log('üîÑ WORKFLOW DE SOUMISSION:');
    console.log('===========================');
    console.log('1. L\'utilisateur clique sur "Soumettre pour validation"');
    console.log('2. Le frontend appelle l\'API POST /api/prospecting/campaigns/:id/submit');
    console.log('3. Le backend v√©rifie les permissions avec checkCampaignAuthorization()');
    console.log('4. Si autoris√©, la campagne passe en statut "EN_VALIDATION"');
    console.log('5. Les validateurs sont notifi√©s pour validation');
    console.log('6. Le bouton de soumission dispara√Æt');
    console.log('');
    
    // 7. Recommandations
    console.log('üí° RECOMMANDATIONS:');
    console.log('===================');
    console.log('‚úÖ Le syst√®me de permissions est bien con√ßu:');
    console.log('   - S√©curit√©: Seuls les cr√©ateurs et managers peuvent soumettre');
    console.log('   - Flexibilit√©: Les managers peuvent soumettre les campagnes de leur √©quipe');
    console.log('   - Tra√ßabilit√©: Chaque soumission est enregistr√©e avec l\'utilisateur');
    console.log('');
    console.log('üîß Am√©liorations possibles:');
    console.log('   - Ajouter des logs d√©taill√©s des tentatives de soumission');
    console.log('   - Notifier le cr√©ateur quand un manager soumet sa campagne');
    console.log('   - Ajouter une confirmation avant soumission');
    console.log('   - Permettre l\'annulation de soumission si pas encore valid√©e');
    console.log('');
    
    console.log('üéâ Analyse termin√©e !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error.message);
    throw error;
  }
}

// Ex√©cuter le script
if (require.main === module) {
  analyzeCampaignSubmissionPermissions();
}

module.exports = { analyzeCampaignSubmissionPermissions };




