require('dotenv').config();
const axios = require('axios');

async function debugOpenLogic() {
    console.log('üîç Debug de la logique d\'ouverture');
    
    try {
        // 1. Authentification
        console.log('\n1. Authentification...');
        const loginResponse = await axios.post('http://localhost:3000/api/auth/login', {
            email: 'admin@trs.com',
            password: 'admin123'
        });
        
        const token = loginResponse.data.data?.token;
        if (!token) {
            console.error('‚ùå Aucun token re√ßu');
            return;
        }
        console.log('‚úÖ Authentification r√©ussie');
        
        const headers = {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        };
        
        // 2. √âtat initial
        console.log('\n2. √âtat initial...');
        const initialResponse = await axios.get('http://localhost:3000/api/fiscal-years', { headers });
        const fiscalYears = initialResponse.data.data;
        
        console.log('üìä √âtat initial:');
        fiscalYears.forEach((fy, index) => {
            const statusIcon = fy.statut === 'EN_COURS' ? 'üü¢' : 
                             fy.statut === 'OUVERTE' ? 'üü°' : 'üî¥';
            console.log(`${index + 1}. ${statusIcon} ${fy.libelle} (${fy.annee}) - ${fy.statut} - ID: ${fy.id}`);
        });
        
        const currentYear = fiscalYears.find(fy => fy.statut === 'EN_COURS');
        const closedYear = fiscalYears.find(fy => fy.statut === 'FERMEE');
        
        if (!currentYear) {
            console.log('‚ùå Aucune ann√©e en cours trouv√©e');
            return;
        }
        
        if (!closedYear) {
            console.log('‚ùå Aucune ann√©e ferm√©e trouv√©e');
            return;
        }
        
        console.log(`\nüéØ Ann√©e en cours: ${currentYear.libelle} (${currentYear.annee}) - ${currentYear.statut}`);
        console.log(`üéØ Ann√©e ferm√©e √† ouvrir: ${closedYear.libelle} (${closedYear.annee}) - ${closedYear.statut}`);
        
        // 3. Analyser la logique attendue
        console.log('\n3. Analyse de la logique attendue...');
        console.log(`- FY26 (EN_COURS) ne devrait PAS √™tre affect√©e par l'ouverture de FY25`);
        console.log(`- Seules les ann√©es OUVERTE devraient √™tre ferm√©es`);
        console.log(`- FY25 devrait passer de FERMEE √† OUVERTE`);
        
        // 4. Test avec v√©rification √©tape par √©tape
        console.log('\n4. Test d\'ouverture avec v√©rification...');
        console.log(`üß™ Ouverture de ${closedYear.libelle} (${closedYear.annee})...`);
        
        try {
            // V√©rifier l'√©tat avant
            console.log('\nüìä √âtat AVANT ouverture:');
            fiscalYears.forEach((fy, index) => {
                const statusIcon = fy.statut === 'EN_COURS' ? 'üü¢' : 
                                 fy.statut === 'OUVERTE' ? 'üü°' : 'üî¥';
                console.log(`${index + 1}. ${statusIcon} ${fy.libelle} (${fy.annee}) - ${fy.statut}`);
            });
            
            await axios.put(`http://localhost:3000/api/fiscal-years/${closedYear.id}/open`, {}, { headers });
            console.log('‚úÖ Ann√©e ouverte avec succ√®s');
            
            // V√©rifier l'√©tat apr√®s
            const afterOpenResponse = await axios.get('http://localhost:3000/api/fiscal-years', { headers });
            const afterOpen = afterOpenResponse.data.data;
            
            console.log('\nüìä √âtat APR√àS ouverture:');
            afterOpen.forEach((fy, index) => {
                const statusIcon = fy.statut === 'EN_COURS' ? 'üü¢' : 
                                 fy.statut === 'OUVERTE' ? 'üü°' : 'üî¥';
                console.log(`${index + 1}. ${statusIcon} ${fy.libelle} (${fy.annee}) - ${fy.statut}`);
            });
            
            // V√©rifications d√©taill√©es
            const currentYearAfter = afterOpen.find(fy => fy.id === currentYear.id);
            const openedYearAfter = afterOpen.find(fy => fy.id === closedYear.id);
            
            console.log('\nüîç V√©rifications d√©taill√©es:');
            console.log(`- FY26 (ann√©e en cours) avant: ${currentYear.statut}`);
            console.log(`- FY26 (ann√©e en cours) apr√®s: ${currentYearAfter?.statut}`);
            console.log(`- FY25 (ann√©e ouverte) avant: ${closedYear.statut}`);
            console.log(`- FY25 (ann√©e ouverte) apr√®s: ${openedYearAfter?.statut}`);
            
            if (currentYearAfter && currentYearAfter.statut === 'EN_COURS') {
                console.log('‚úÖ FY26 reste en cours (correct)');
            } else {
                console.log(`‚ùå ERREUR: FY26 est pass√©e de ${currentYear.statut} √† ${currentYearAfter?.statut}`);
            }
            
            if (openedYearAfter && openedYearAfter.statut === 'OUVERTE') {
                console.log('‚úÖ FY25 a √©t√© ouverte correctement');
            } else {
                console.log(`‚ùå ERREUR: FY25 est pass√©e de ${closedYear.statut} √† ${openedYearAfter?.statut}`);
            }
            
        } catch (error) {
            console.log('‚ùå Erreur lors de l\'ouverture:', error.response?.status, error.response?.data);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error.response?.data || error.message);
    }
}

debugOpenLogic(); 