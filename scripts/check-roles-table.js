#!/usr/bin/env node

/**
 * Script pour v√©rifier la table roles dans la base de donn√©es
 * Usage: node scripts/check-roles-table.js
 */

const { Pool } = require('pg');
require('dotenv').config();

console.log('üîç V√âRIFICATION DE LA TABLE ROLES');
console.log('==================================\n');

async function checkRolesTable() {
    const pool = new Pool({
        user: process.env.DB_USER || 'postgres',
        host: process.env.DB_HOST || 'localhost',
        database: process.env.DB_NAME || 'eb_vision_2_0',
        password: process.env.DB_PASSWORD || '',
        port: process.env.DB_PORT || 5432,
    });

    try {
        console.log('üìã V√âRIFICATIONS:');
        
        // 1. V√©rifier la connexion
        console.log('üîÑ Test de connexion...');
        await pool.query('SELECT NOW()');
        console.log('‚úÖ Connexion r√©ussie');
        
        // 2. V√©rifier l'existence de la table roles
        console.log('üîç V√©rification de la table roles...');
        const tableExists = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'roles'
            );
        `);
        
        if (tableExists.rows[0].exists) {
            console.log('‚úÖ Table roles existe');
            
            // 3. Compter les r√¥les
            const countResult = await pool.query('SELECT COUNT(*) as count FROM roles');
            const count = parseInt(countResult.rows[0].count);
            console.log(`üìä Nombre de r√¥les: ${count}`);
            
            if (count > 0) {
                // 4. Lister les r√¥les
                console.log('üìã Liste des r√¥les:');
                const roles = await pool.query('SELECT id, name, description FROM roles ORDER BY name');
                roles.rows.forEach((role, index) => {
                    console.log(`   ${index + 1}. ${role.name} (${role.id})`);
                });
            } else {
                console.log('‚ùå Aucun r√¥le trouv√© dans la table');
            }
        } else {
            console.log('‚ùå Table roles n\'existe pas');
            console.log('üí° Ex√©cutez: node scripts/setup-roles-system.js');
        }
        
        // 5. V√©rifier la table user_roles
        console.log('\nüîç V√©rification de la table user_roles...');
        const userRolesExists = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'user_roles'
            );
        `);
        
        if (userRolesExists.rows[0].exists) {
            console.log('‚úÖ Table user_roles existe');
            
            const userRolesCount = await pool.query('SELECT COUNT(*) as count FROM user_roles');
            console.log(`üìä Nombre d\'assignations de r√¥les: ${userRolesCount.rows[0].count}`);
        } else {
            console.log('‚ùå Table user_roles n\'existe pas');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
        console.error('üí° V√©rifiez la configuration de la base de donn√©es');
    } finally {
        await pool.end();
    }
}

checkRolesTable().catch(console.error);
