const { query } = require('../src/utils/database');

async function fixTimeSheetsConstraint() {
    console.log('üîß CORRECTION DE LA CONTRAINTE TIME_SHEETS');
    console.log('==========================================');

    try {
        // 1. V√©rifier la contrainte actuelle
        console.log('\nüìã 1. V√âRIFICATION DE LA CONTRAINTE ACTUELLE');
        
        const constraintCheck = await query(`
            SELECT 
                conname,
                pg_get_constraintdef(oid) as constraint_definition
            FROM pg_constraint 
            WHERE conname = 'time_sheets_statut_check'
        `);

        if (constraintCheck.rows.length > 0) {
            console.log('‚úÖ Contrainte trouv√©e:', constraintCheck.rows[0].constraint_definition);
        } else {
            console.log('‚ùå Contrainte non trouv√©e');
        }

        // 2. V√©rifier les valeurs possibles pour le statut
        console.log('\nüìä 2. V√âRIFICATION DES VALEURS DE STATUT');
        
        const statusValues = await query(`
            SELECT DISTINCT statut 
            FROM time_sheets 
            WHERE statut IS NOT NULL
        `);

        console.log('Valeurs de statut existantes:', statusValues.rows.map(r => r.statut));

        // 3. Supprimer l'ancienne contrainte si elle existe
        console.log('\nüóëÔ∏è 3. SUPPRESSION DE L\'ANCIENNE CONTRAINTE');
        
        try {
            await query(`ALTER TABLE time_sheets DROP CONSTRAINT IF EXISTS time_sheets_statut_check`);
            console.log('‚úÖ Ancienne contrainte supprim√©e');
        } catch (error) {
            console.log('‚ö†Ô∏è Erreur lors de la suppression:', error.message);
        }

        // 4. Cr√©er la nouvelle contrainte avec les bonnes valeurs
        console.log('\n‚úÖ 4. CR√âATION DE LA NOUVELLE CONTRAINTE');
        
        await query(`
            ALTER TABLE time_sheets 
            ADD CONSTRAINT time_sheets_statut_check 
            CHECK (statut IN ('draft', 'submitted', 'approved', 'rejected'))
        `);

        console.log('‚úÖ Nouvelle contrainte cr√©√©e');

        // 5. V√©rifier que la contrainte fonctionne
        console.log('\nüß™ 5. TEST DE LA NOUVELLE CONTRAINTE');
        
        // R√©cup√©rer un collaborateur de test
        const testCollaborateur = await query(`
            SELECT id FROM collaborateurs LIMIT 1
        `);

        if (testCollaborateur.rows.length > 0) {
            const collaborateurId = testCollaborateur.rows[0].id;
            
            // Tester avec une valeur valide
            try {
                await query(`
                    INSERT INTO time_sheets (
                        collaborateur_id, semaine, annee, date_debut_semaine, 
                        date_fin_semaine, statut, total_heures, 
                        total_heures_chargeables, total_heures_non_chargeables
                    )
                    VALUES ($1, 1, 2025, '2025-01-06', '2025-01-12', 'draft', 0, 0, 0)
                    ON CONFLICT DO NOTHING
                `, [collaborateurId]);
                console.log('‚úÖ Test avec valeur valide r√©ussi');
            } catch (error) {
                console.log('‚ùå Test avec valeur valide √©chou√©:', error.message);
            }

            // 6. Nettoyer les donn√©es de test
            console.log('\nüßπ 6. NETTOYAGE DES DONN√âES DE TEST');
            
            await query(`
                DELETE FROM time_sheets 
                WHERE collaborateur_id = $1 
                AND semaine = 1 
                AND annee = 2025
            `, [collaborateurId]);

            console.log('‚úÖ Donn√©es de test nettoy√©es');
        } else {
            console.log('‚ö†Ô∏è Aucun collaborateur trouv√© pour le test');
        }

        // 7. V√©rifier la contrainte finale
        console.log('\n‚úÖ 7. V√âRIFICATION FINALE');
        
        const finalCheck = await query(`
            SELECT 
                conname,
                pg_get_constraintdef(oid) as constraint_definition
            FROM pg_constraint 
            WHERE conname = 'time_sheets_statut_check'
        `);

        if (finalCheck.rows.length > 0) {
            console.log('‚úÖ Contrainte finale:', finalCheck.rows[0].constraint_definition);
        }

        console.log('\n‚úÖ CORRECTION TERMIN√âE AVEC SUCC√àS');

    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error);
        throw error;
    }
}

// Ex√©cuter la correction
if (require.main === module) {
    fixTimeSheetsConstraint().then(() => {
        console.log('\nüéâ Correction termin√©e');
        process.exit(0);
    }).catch(error => {
        console.error('‚ùå Erreur:', error);
        process.exit(1);
    });
}

module.exports = { fixTimeSheetsConstraint }; 