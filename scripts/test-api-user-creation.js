// Script pour tester l'API de cr√©ation de compte utilisateur
const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';

async function testAPIUserCreation() {
    try {
        console.log('üß™ Test de l\'API de cr√©ation de compte utilisateur...\n');
        
        // 1. Se connecter en tant que SUPER_ADMIN
        console.log('üîê Connexion en tant que SUPER_ADMIN...');
        const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
            email: 'admin@trs.com',
            password: 'admin123'
        });
        
        if (!loginResponse.data.success) {
            console.log('‚ùå √âchec de la connexion:', loginResponse.data.message);
            return;
        }
        
        const token = loginResponse.data.data.token;
        console.log('‚úÖ Connexion r√©ussie');
        
        // 2. R√©cup√©rer la liste des r√¥les disponibles
        console.log('\nüìã R√©cup√©ration des r√¥les disponibles...');
        const rolesResponse = await axios.get(`${API_BASE_URL}/users/roles`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        console.log('‚úÖ R√¥les disponibles:', rolesResponse.data.map(r => r.name));
        
        // 3. Trouver un collaborateur sans compte utilisateur
        console.log('\nüë§ Recherche d\'un collaborateur sans compte...');
        const collaborateursResponse = await axios.get(`${API_BASE_URL}/collaborateurs`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        const collaborateurSansCompte = collaborateursResponse.data.data.find(c => !c.user_id);
        if (!collaborateurSansCompte) {
            console.log('‚ùå Aucun collaborateur sans compte trouv√©');
            return;
        }
        
        console.log('‚úÖ Collaborateur trouv√©:', `${collaborateurSansCompte.nom} ${collaborateurSansCompte.prenom}`);
        
        // 4. Cr√©er le compte utilisateur avec des donn√©es personnalis√©es
        console.log('\nüÜï Cr√©ation du compte utilisateur...');
        const createUserResponse = await axios.post(
            `${API_BASE_URL}/collaborateurs/${collaborateurSansCompte.id}/generate-user-account`,
            {
                login: 'test.api.user',
                email: collaborateurSansCompte.email,
                nom: collaborateurSansCompte.nom,
                prenom: collaborateurSansCompte.prenom,
                role: 'CONSULTANT',
                password: 'TestAPI123!'
            },
            {
                headers: { Authorization: `Bearer ${token}` }
            }
        );
        
        if (createUserResponse.data.success) {
            console.log('‚úÖ Compte utilisateur cr√©√© avec succ√®s !');
            console.log('   üë§ Utilisateur:', createUserResponse.data.data.user);
            console.log('   üîë Mot de passe:', createUserResponse.data.data.password);
        } else {
            console.log('‚ùå √âchec de la cr√©ation:', createUserResponse.data.message);
        }
        
        // 5. Tester aussi avec g√©n√©ration automatique
        console.log('\nüé≤ Test avec g√©n√©ration automatique...');
        const autreCollaborateur = collaborateursResponse.data.data.find(c => !c.user_id && c.id !== collaborateurSansCompte.id);
        
        if (autreCollaborateur) {
            const createAutoResponse = await axios.post(
                `${API_BASE_URL}/collaborateurs/${autreCollaborateur.id}/generate-user-account`,
                {
                    role: 'COLLABORATEUR' // Seul le r√¥le est sp√©cifi√©
                },
                {
                    headers: { Authorization: `Bearer ${token}` }
                }
            );
            
            if (createAutoResponse.data.success) {
                console.log('‚úÖ Compte avec g√©n√©ration automatique cr√©√© !');
                console.log('   üë§ Login g√©n√©r√©:', createAutoResponse.data.data.user?.login || 'N/A');
                console.log('   üîë Mot de passe g√©n√©r√©:', createAutoResponse.data.data.password || 'N/A');
            } else {
                console.log('‚ùå √âchec de la g√©n√©ration automatique:', createAutoResponse.data.message);
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erreur:', error.response?.data || error.message);
    }
}

testAPIUserCreation();
