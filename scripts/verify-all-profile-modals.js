#!/usr/bin/env node

/**
 * Script pour v√©rifier que toutes les pages ont les m√™mes modales de profil
 * Usage: node scripts/verify-all-profile-modals.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç V√âRIFICATION DE TOUTES LES MODALES DE PROFIL');
console.log('===============================================\n');

class ProfileModalsVerifier {
    constructor() {
        this.publicDir = path.join(__dirname, '..', 'public');
        this.pagesWithModals = [];
        this.pagesWithoutModals = [];
        this.modalDifferences = [];
        this.referenceModal = null;
    }

    async verify() {
        try {
            // 1. Analyser toutes les pages
            this.analyzeAllPages();
            
            // 2. Identifier les diff√©rences
            this.identifyDifferences();
            
            // 3. Afficher le rapport d√©taill√©
            this.showDetailedReport();
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la v√©rification:', error);
        }
    }

    analyzeAllPages() {
        const files = fs.readdirSync(this.publicDir);
        const htmlFiles = files.filter(file => 
            file.endsWith('.html') && 
            !file.startsWith('template-') && 
            !file.includes('backup') &&
            file !== 'login.html' &&
            file !== 'logout.html' &&
            file !== 'index.html'
        );

        console.log(`üìÑ ${htmlFiles.length} pages √† v√©rifier`);

        for (const file of htmlFiles) {
            const filePath = path.join(this.publicDir, file);
            const content = fs.readFileSync(filePath, 'utf8');
            
            // V√©rifier si la page a des modales de profil
            const hasProfileModal = content.includes('profileModal') || 
                                  content.includes('id="profileModal"') ||
                                  content.includes('Mon Profil');
            
            const hasChangePasswordModal = content.includes('changePasswordModal') ||
                                         content.includes('Changer le mot de passe');
            
            const hasTwoFactorModal = content.includes('twoFactorModal') ||
                                    content.includes('Authentification √† deux facteurs');
            
            if (hasProfileModal || hasChangePasswordModal || hasTwoFactorModal) {
                this.pagesWithModals.push({
                    file,
                    hasProfileModal,
                    hasChangePasswordModal,
                    hasTwoFactorModal,
                    content: this.extractModals(content)
                });
            } else {
                this.pagesWithoutModals.push(file);
            }
        }

        console.log(`‚úÖ Pages avec modales: ${this.pagesWithModals.length}`);
        console.log(`‚ùå Pages sans modales: ${this.pagesWithoutModals.length}`);
    }

    extractModals(content) {
        const modals = {};
        
        // Extraire la modale de profil
        const profileModalMatch = content.match(/<div[^>]*id="profileModal"[^>]*>([\s\S]*?)<\/div>\s*<\/div>\s*<\/div>/i);
        if (profileModalMatch) {
            modals.profileModal = profileModalMatch[0];
        }
        
        // Extraire la modale de changement de mot de passe
        const passwordModalMatch = content.match(/<div[^>]*id="changePasswordModal"[^>]*>([\s\S]*?)<\/div>\s*<\/div>\s*<\/div>/i);
        if (passwordModalMatch) {
            modals.changePasswordModal = passwordModalMatch[0];
        }
        
        // Extraire la modale 2FA
        const twoFactorModalMatch = content.match(/<div[^>]*id="twoFactorModal"[^>]*>([\s\S]*?)<\/div>\s*<\/div>\s*<\/div>/i);
        if (twoFactorModalMatch) {
            modals.twoFactorModal = twoFactorModalMatch[0];
        }
        
        return modals;
    }

    identifyDifferences() {
        if (this.pagesWithModals.length === 0) {
            console.log('‚ùå Aucune page avec modales trouv√©e');
            return;
        }

        // Prendre la premi√®re page comme r√©f√©rence
        this.referenceModal = this.pagesWithModals[0];
        console.log(`\nüîç R√©f√©rence: ${this.referenceModal.file}`);

        // Comparer avec toutes les autres pages
        for (let i = 1; i < this.pagesWithModals.length; i++) {
            const page = this.pagesWithModals[i];
            const differences = this.compareModals(this.referenceModal, page);
            
            if (differences.length > 0) {
                this.modalDifferences.push({
                    file: page.file,
                    differences
                });
            }
        }
    }

    compareModals(reference, page) {
        const differences = [];
        
        // Comparer les modales de profil
        if (reference.content.profileModal && page.content.profileModal) {
            if (reference.content.profileModal !== page.content.profileModal) {
                differences.push('Modale de profil diff√©rente');
            }
        } else if (reference.content.profileModal && !page.content.profileModal) {
            differences.push('Modale de profil manquante');
        } else if (!reference.content.profileModal && page.content.profileModal) {
            differences.push('Modale de profil en trop');
        }
        
        // Comparer les modales de changement de mot de passe
        if (reference.content.changePasswordModal && page.content.changePasswordModal) {
            if (reference.content.changePasswordModal !== page.content.changePasswordModal) {
                differences.push('Modale changement mot de passe diff√©rente');
            }
        } else if (reference.content.changePasswordModal && !page.content.changePasswordModal) {
            differences.push('Modale changement mot de passe manquante');
        } else if (!reference.content.changePasswordModal && page.content.changePasswordModal) {
            differences.push('Modale changement mot de passe en trop');
        }
        
        // Comparer les modales 2FA
        if (reference.content.twoFactorModal && page.content.twoFactorModal) {
            if (reference.content.twoFactorModal !== page.content.twoFactorModal) {
                differences.push('Modale 2FA diff√©rente');
            }
        } else if (reference.content.twoFactorModal && !page.content.twoFactorModal) {
            differences.push('Modale 2FA manquante');
        } else if (!reference.content.twoFactorModal && page.content.twoFactorModal) {
            differences.push('Modale 2FA en trop');
        }
        
        return differences;
    }

    showDetailedReport() {
        console.log('\nüìä RAPPORT D√âTAILL√â');
        console.log('===================');
        console.log(`‚úÖ Pages avec modales: ${this.pagesWithModals.length}`);
        console.log(`‚ùå Pages sans modales: ${this.pagesWithoutModals.length}`);
        console.log(`‚ö†Ô∏è  Pages avec diff√©rences: ${this.modalDifferences.length}`);
        
        if (this.pagesWithoutModals.length > 0) {
            console.log('\nüìã PAGES SANS MODALES:');
            this.pagesWithoutModals.forEach(page => {
                console.log(`   - ${page}`);
            });
        }
        
        if (this.modalDifferences.length > 0) {
            console.log('\n‚ö†Ô∏è  PAGES AVEC DIFF√âRENCES:');
            this.modalDifferences.forEach(page => {
                console.log(`\nüìÑ ${page.file}:`);
                page.differences.forEach(diff => {
                    console.log(`   ‚ùå ${diff}`);
                });
            });
        }
        
        // Afficher les d√©tails des modales de r√©f√©rence
        if (this.referenceModal) {
            console.log('\nüîç MODALES DE R√âF√âRENCE:');
            console.log(`üìÑ Page: ${this.referenceModal.file}`);
            console.log(`   ‚úÖ Modale profil: ${this.referenceModal.hasProfileModal ? 'Oui' : 'Non'}`);
            console.log(`   ‚úÖ Modale mot de passe: ${this.referenceModal.hasChangePasswordModal ? 'Oui' : 'Non'}`);
            console.log(`   ‚úÖ Modale 2FA: ${this.referenceModal.hasTwoFactorModal ? 'Oui' : 'Non'}`);
        }
        
        console.log('\nüéØ CONCLUSION:');
        if (this.modalDifferences.length === 0 && this.pagesWithoutModals.length === 0) {
            console.log('‚úÖ Toutes les pages ont des modales de profil identiques !');
            console.log('‚úÖ La coh√©rence des modales est parfaite');
        } else {
            console.log('‚ö†Ô∏è  Des incoh√©rences ont √©t√© d√©tect√©es dans les modales');
            console.log('üîß Correction n√©cessaire pour assurer la coh√©rence');
        }
        
        console.log('\nüí° RECOMMANDATIONS:');
        if (this.pagesWithoutModals.length > 0) {
            console.log('1. ‚úÖ Ajouter les modales manquantes aux pages sans modales');
        }
        if (this.modalDifferences.length > 0) {
            console.log('2. ‚úÖ Standardiser les modales diff√©rentes');
        }
        console.log('3. ‚úÖ Utiliser le template de sidebar pour toutes les modales');
        console.log('4. ‚úÖ V√©rifier que toutes les pages chargent le m√™me template');
        
        console.log('\nüîç V√©rification termin√©e !');
    }
}

// Ex√©cuter la v√©rification
const verifier = new ProfileModalsVerifier();
verifier.verify();

