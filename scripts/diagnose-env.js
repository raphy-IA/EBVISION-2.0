#!/usr/bin/env node

/**
 * Script de diagnostic du fichier .env
 * Usage: node scripts/diagnose-env.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç DIAGNOSTIC DU FICHIER .ENV');
console.log('==============================\n');

function diagnoseEnv() {
    try {
        const envPath = path.join(__dirname, '..', '.env');
        
        // V√©rifier si le fichier existe
        if (!fs.existsSync(envPath)) {
            console.log('‚ùå Fichier .env non trouv√©');
            console.log('üí° Solution: Ex√©cutez node scripts/fix-production-env.js');
            return;
        }
        
        console.log('‚úÖ Fichier .env trouv√©');
        
        // Lire le contenu
        const content = fs.readFileSync(envPath, 'utf8');
        console.log(`üìè Taille du fichier: ${content.length} caract√®res\n`);
        
        // Analyser les variables
        const lines = content.split('\n');
        const variables = {};
        let lineNumber = 0;
        
        lines.forEach(line => {
            lineNumber++;
            const trimmedLine = line.trim();
            
            // Ignorer les commentaires et lignes vides
            if (trimmedLine.startsWith('#') || trimmedLine === '') {
                return;
            }
            
            // Parser les variables
            const match = trimmedLine.match(/^([^=]+)=(.*)$/);
            if (match) {
                const [, key, value] = match;
                variables[key] = value;
            } else {
                console.log(`‚ö†Ô∏è  Ligne ${lineNumber} mal format√©e: ${trimmedLine}`);
            }
        });
        
        console.log(`üìä Variables trouv√©es: ${Object.keys(variables).length}\n`);
        
        // V√©rifier les variables critiques
        const criticalVars = [
            'JWT_SECRET',
            'BCRYPT_ROUNDS',
            'RATE_LIMIT_MAX_REQUESTS',
            'NODE_ENV',
            'CORS_ORIGIN',
            'DB_PASSWORD'
        ];
        
        console.log('üîç V√©rification des variables critiques:');
        criticalVars.forEach(varName => {
            if (variables[varName]) {
                const value = variables[varName];
                let status = '‚úÖ';
                let message = `${varName} d√©fini`;
                
                // V√©rifications sp√©cifiques
                switch (varName) {
                    case 'JWT_SECRET':
                        if (value.length < 50) {
                            status = '‚ùå';
                            message = `${varName} trop court (${value.length} caract√®res)`;
                        } else {
                            message = `${varName} correct (${value.length} caract√®res)`;
                        }
                        break;
                    case 'BCRYPT_ROUNDS':
                        if (!/^\d+$/.test(value) || parseInt(value) < 10) {
                            status = '‚ùå';
                            message = `${varName} invalide (${value})`;
                        } else {
                            message = `${varName} correct (${value})`;
                        }
                        break;
                    case 'RATE_LIMIT_MAX_REQUESTS':
                        if (!/^\d+$/.test(value)) {
                            status = '‚ùå';
                            message = `${varName} invalide (${value})`;
                        } else {
                            message = `${varName} correct (${value})`;
                        }
                        break;
                    case 'NODE_ENV':
                        if (value !== 'production') {
                            status = '‚ö†Ô∏è';
                            message = `${varName} = ${value} (recommand√©: production)`;
                        } else {
                            message = `${varName} correct (${value})`;
                        }
                        break;
                    case 'CORS_ORIGIN':
                        if (!value.startsWith('https://')) {
                            status = '‚ö†Ô∏è';
                            message = `${varName} = ${value} (recommand√©: https://)`;
                        } else {
                            message = `${varName} correct (${value})`;
                        }
                        break;
                    case 'DB_PASSWORD':
                        if (value === 'your_db_password_here') {
                            status = '‚ùå';
                            message = `${varName} non configur√© (valeur par d√©faut)`;
                        } else {
                            message = `${varName} configur√©`;
                        }
                        break;
                }
                
                console.log(`   ${status} ${message}`);
            } else {
                console.log(`   ‚ùå ${varName} manquant`);
            }
        });
        
        // V√©rifier les permissions
        const stats = fs.statSync(envPath);
        const permissions = (stats.mode & parseInt('777', 8)).toString(8);
        console.log(`\nüîí Permissions du fichier: ${permissions}`);
        
        if (permissions !== '600') {
            console.log('‚ö†Ô∏è  Permissions non s√©curis√©es (recommand√©: 600)');
            console.log('üí° Solution: chmod 600 .env');
        } else {
            console.log('‚úÖ Permissions s√©curis√©es');
        }
        
        // Test de chargement avec dotenv
        console.log('\nüß™ Test de chargement avec dotenv:');
        try {
            // Sauvegarder les variables d'environnement actuelles
            const originalEnv = { ...process.env };
            
            // Charger dotenv
            require('dotenv').config();
            
            // V√©rifier si les variables sont charg√©es
            const loadedVars = criticalVars.filter(varName => process.env[varName]);
            console.log(`   ‚úÖ ${loadedVars.length}/${criticalVars.length} variables charg√©es`);
            
            if (loadedVars.length < criticalVars.length) {
                console.log('   ‚ùå Certaines variables ne sont pas charg√©es');
                const missingVars = criticalVars.filter(varName => !process.env[varName]);
                console.log(`   Variables manquantes: ${missingVars.join(', ')}`);
            }
            
        } catch (error) {
            console.log(`   ‚ùå Erreur lors du chargement: ${error.message}`);
        }
        
        // Recommandations
        console.log('\nüí° RECOMMANDATIONS:');
        const issues = [];
        
        if (!variables.JWT_SECRET || variables.JWT_SECRET.length < 50) {
            issues.push('JWT_SECRET trop court ou manquant');
        }
        
        if (!variables.BCRYPT_ROUNDS || parseInt(variables.BCRYPT_ROUNDS) < 10) {
            issues.push('BCRYPT_ROUNDS invalide');
        }
        
        if (!variables.RATE_LIMIT_MAX_REQUESTS) {
            issues.push('RATE_LIMIT_MAX_REQUESTS manquant');
        }
        
        if (variables.NODE_ENV !== 'production') {
            issues.push('NODE_ENV devrait √™tre "production"');
        }
        
        if (permissions !== '600') {
            issues.push('Permissions du fichier .env non s√©curis√©es');
        }
        
        if (issues.length === 0) {
            console.log('   ‚úÖ Configuration .env correcte');
        } else {
            issues.forEach(issue => {
                console.log(`   ‚ùå ${issue}`);
            });
            console.log('\nüîß Solution: Ex√©cutez node scripts/fix-production-env.js');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors du diagnostic:', error);
    }
}

// Ex√©cuter le diagnostic
diagnoseEnv();
