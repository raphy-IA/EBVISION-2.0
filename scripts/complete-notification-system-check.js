const NotificationSystemTester = require('./test-notification-system');
const NotificationAnomalyFixer = require('./fix-notification-anomalies');

class CompleteNotificationSystemCheck {
    constructor() {
        this.testResults = [];
        this.fixResults = [];
    }

    async runCompleteCheck() {
        console.log('üöÄ V√âRIFICATION COMPL√àTE DU SYST√àME DE NOTIFICATIONS TRS');
        console.log('=' .repeat(80));
        console.log('üìÖ Date:', new Date().toLocaleString('fr-FR'));
        console.log('üîó Base de donn√©es: eb_vision_2_0');
        console.log('üë§ Utilisateur: postgres');
        console.log('');
        
        try {
            // √âTAPE 1: Tests initiaux
            console.log('üîç √âTAPE 1: Tests initiaux du syst√®me');
            console.log('-'.repeat(50));
            
            const initialTester = new NotificationSystemTester();
            await initialTester.runAllTests();
            this.testResults.push({
                phase: 'Initial',
                results: initialTester.testResults
            });
            
            // √âTAPE 2: Analyse des probl√®mes
            console.log('\nüìä √âTAPE 2: Analyse des probl√®mes d√©tect√©s');
            console.log('-'.repeat(50));
            
            const initialFailures = initialTester.testResults.filter(r => r.status === 'FAIL');
            const initialWarnings = initialTester.testResults.filter(r => r.status === 'WARNING');
            
            if (initialFailures.length > 0 || initialWarnings.length > 0) {
                console.log(`‚ùå Probl√®mes d√©tect√©s:`);
                console.log(`   - Erreurs: ${initialFailures.length}`);
                console.log(`   - Avertissements: ${initialWarnings.length}`);
                
                initialFailures.forEach(failure => {
                    console.log(`   ‚ùå ${failure.test}: ${failure.details}`);
                });
                
                initialWarnings.forEach(warning => {
                    console.log(`   ‚ö†Ô∏è ${warning.test}: ${warning.details}`);
                });
                
                // √âTAPE 3: Corrections automatiques
                console.log('\nüîß √âTAPE 3: Application des corrections automatiques');
                console.log('-'.repeat(50));
                
                const fixer = new NotificationAnomalyFixer();
                await fixer.runAllFixes();
                this.fixResults = fixer.fixesApplied;
                
                // √âTAPE 4: Tests post-correction
                console.log('\n‚úÖ √âTAPE 4: Tests post-correction');
                console.log('-'.repeat(50));
                
                const finalTester = new NotificationSystemTester();
                await finalTester.runAllTests();
                this.testResults.push({
                    phase: 'Post-Correction',
                    results: finalTester.testResults
                });
                
                // √âTAPE 5: Comparaison des r√©sultats
                await this.compareResults();
                
            } else {
                console.log('‚úÖ Aucun probl√®me d√©tect√© - syst√®me op√©rationnel !');
            }
            
            // √âTAPE 6: Rapport final
            await this.generateFinalReport();
            
        } catch (error) {
            console.error('‚ùå Erreur critique lors de la v√©rification compl√®te:', error.message);
        }
    }

    async compareResults() {
        console.log('\nüìà √âTAPE 5: Comparaison des r√©sultats');
        console.log('-'.repeat(50));
        
        const initialResults = this.testResults[0].results;
        const finalResults = this.testResults[1].results;
        
        const initialPassed = initialResults.filter(r => r.status === 'PASS').length;
        const initialFailed = initialResults.filter(r => r.status === 'FAIL').length;
        const initialWarnings = initialResults.filter(r => r.status === 'WARNING').length;
        
        const finalPassed = finalResults.filter(r => r.status === 'PASS').length;
        const finalFailed = finalResults.filter(r => r.status === 'FAIL').length;
        const finalWarnings = finalResults.filter(r => r.status === 'WARNING').length;
        
        console.log('üìä Comparaison des r√©sultats:');
        console.log(`   Tests initiaux:  ‚úÖ ${initialPassed} | ‚ùå ${initialFailed} | ‚ö†Ô∏è ${initialWarnings}`);
        console.log(`   Tests finaux:    ‚úÖ ${finalPassed} | ‚ùå ${finalFailed} | ‚ö†Ô∏è ${finalWarnings}`);
        
        const improvement = finalPassed - initialPassed;
        if (improvement > 0) {
            console.log(`\nüéâ Am√©lioration: +${improvement} tests r√©ussis`);
        } else if (improvement < 0) {
            console.log(`\n‚ö†Ô∏è D√©gradation: ${improvement} tests r√©ussis`);
        } else {
            console.log(`\n‚û°Ô∏è Aucun changement dans le nombre de tests r√©ussis`);
        }
        
        // Identifier les tests qui ont chang√© de statut
        const statusChanges = [];
        for (let i = 0; i < initialResults.length; i++) {
            const initial = initialResults[i];
            const final = finalResults[i];
            
            if (initial.status !== final.status) {
                statusChanges.push({
                    test: initial.test,
                    from: initial.status,
                    to: final.status
                });
            }
        }
        
        if (statusChanges.length > 0) {
            console.log('\nüîÑ Changements de statut:');
            statusChanges.forEach(change => {
                const fromIcon = { 'PASS': '‚úÖ', 'FAIL': '‚ùå', 'WARNING': '‚ö†Ô∏è', 'SKIP': '‚è≠Ô∏è' }[change.from];
                const toIcon = { 'PASS': '‚úÖ', 'FAIL': '‚ùå', 'WARNING': '‚ö†Ô∏è', 'SKIP': '‚è≠Ô∏è' }[change.to];
                console.log(`   ${change.test}: ${fromIcon} ‚Üí ${toIcon}`);
            });
        }
    }

    async generateFinalReport() {
        console.log('\nüìã RAPPORT FINAL DE V√âRIFICATION COMPL√àTE');
        console.log('=' .repeat(80));
        
        // R√©sum√© des corrections
        if (this.fixResults.length > 0) {
            console.log('\nüîß Corrections appliqu√©es:');
            this.fixResults.forEach((fix, index) => {
                console.log(`   ${index + 1}. ${fix}`);
            });
        }
        
        // R√©sum√© des tests
        console.log('\nüìä R√©sum√© des tests:');
        this.testResults.forEach((phase, index) => {
            const passed = phase.results.filter(r => r.status === 'PASS').length;
            const failed = phase.results.filter(r => r.status === 'FAIL').length;
            const warnings = phase.results.filter(r => r.status === 'WARNING').length;
            const skipped = phase.results.filter(r => r.status === 'SKIP').length;
            
            console.log(`   ${phase.phase}: ‚úÖ ${passed} | ‚ùå ${failed} | ‚ö†Ô∏è ${warnings} | ‚è≠Ô∏è ${skipped}`);
        });
        
        // √âtat final du syst√®me
        const finalResults = this.testResults[this.testResults.length - 1].results;
        const finalPassed = finalResults.filter(r => r.status === 'PASS').length;
        const totalTests = finalResults.length;
        
        console.log('\nüéØ √âtat final du syst√®me:');
        if (finalPassed === totalTests) {
            console.log('   üü¢ SYST√àME OP√âRATIONNEL - Tous les tests r√©ussis !');
        } else if (finalPassed >= totalTests * 0.8) {
            console.log('   üü° SYST√àME FONCTIONNEL - La plupart des tests r√©ussis');
        } else {
            console.log('   üî¥ SYST√àME PROBL√âMATIQUE - Nombreux √©checs de tests');
        }
        
        // Recommandations
        console.log('\nüí° Recommandations:');
        
        const finalFailures = finalResults.filter(r => r.status === 'FAIL');
        const finalWarnings = finalResults.filter(r => r.status === 'WARNING');
        
        if (finalFailures.length > 0) {
            console.log('   ‚ùå Actions requises:');
            finalFailures.forEach(failure => {
                console.log(`      - Corriger: ${failure.test} - ${failure.details}`);
            });
        }
        
        if (finalWarnings.length > 0) {
            console.log('   ‚ö†Ô∏è Am√©liorations recommand√©es:');
            finalWarnings.forEach(warning => {
                console.log(`      - Am√©liorer: ${warning.test} - ${warning.details}`);
            });
        }
        
        if (finalPassed === totalTests) {
            console.log('   ‚úÖ Aucune action requise - syst√®me optimal');
        }
        
        // Prochaines √©tapes
        console.log('\nüìù Prochaines √©tapes:');
        console.log('   1. Configurer le mot de passe email dans l\'interface');
        console.log('   2. Tester manuellement l\'envoi d\'emails');
        console.log('   3. V√©rifier les notifications dans l\'interface utilisateur');
        console.log('   4. Surveiller les t√¢ches cron quotidiennes');
        console.log('   5. Planifier des tests r√©guliers du syst√®me');
        
        console.log('\n' + '=' .repeat(80));
        console.log('üèÅ V√©rification compl√®te termin√©e');
    }
}

// Ex√©cution du script
async function main() {
    const checker = new CompleteNotificationSystemCheck();
    await checker.runCompleteCheck();
}

// Ex√©cution si le script est appel√© directement
if (require.main === module) {
    main().catch(console.error);
}

module.exports = CompleteNotificationSystemCheck;
