const { pool } = require('../src/utils/database');
const fs = require('fs');
const path = require('path');

async function runMigration029() {
    try {
        console.log('üöÄ Ex√©cution de la migration 029: Cr√©ation des tables t√¢ches');
        console.log('============================================================');

        // Lire le fichier de migration
        const migrationPath = path.join(__dirname, '../database/migrations/029_create_tasks_tables.sql');
        const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

        console.log('üìã Contenu de la migration:');
        console.log('   - Table tasks (t√¢ches)');
        console.log('   - Table task_mission_types (liaison t√¢ches/types)');
        console.log('   - Table mission_tasks (t√¢ches de mission)');
        console.log('   - Table task_assignments (assignations personnel)');
        console.log('   - Index et triggers');
        console.log('   - Donn√©es de test (10 t√¢ches)');

        // Ex√©cuter la migration
        console.log('\nüîÑ Ex√©cution de la migration...');
        await pool.query(migrationSQL);

        console.log('‚úÖ Migration ex√©cut√©e avec succ√®s !');

        // V√©rifier les tables cr√©√©es
        console.log('\nüîç V√©rification des tables cr√©√©es:');
        
        const tables = ['tasks', 'task_mission_types', 'mission_tasks', 'task_assignments'];
        for (const table of tables) {
            const result = await pool.query(`SELECT COUNT(*) as count FROM ${table}`);
            console.log(`   - ${table}: ${result.rows[0].count} enregistrements`);
        }

        // V√©rifier les t√¢ches cr√©√©es
        console.log('\nüìä T√¢ches cr√©√©es:');
        const tasksResult = await pool.query(`
            SELECT code, libelle, duree_estimee, priorite 
            FROM tasks 
            ORDER BY code
        `);
        
        tasksResult.rows.forEach(task => {
            console.log(`   - ${task.code}: ${task.libelle} (${task.duree_estimee}h, ${task.priorite})`);
        });

        // V√©rifier les associations
        console.log('\nüîó Associations t√¢ches/types de mission:');
        const associationsResult = await pool.query(`
            SELECT 
                t.code as task_code,
                t.libelle as task_libelle,
                mt.codification as mission_type_code,
                tmt.obligatoire
            FROM task_mission_types tmt
            JOIN tasks t ON tmt.task_id = t.id
            JOIN mission_types mt ON tmt.mission_type_id = mt.id
            ORDER BY mt.codification, tmt.ordre
        `);
        
        associationsResult.rows.forEach(assoc => {
            const obligatoire = assoc.obligatoire ? '(Obligatoire)' : '(Optionnel)';
            console.log(`   - ${assoc.task_code} ‚Üí ${assoc.mission_type_code} ${obligatoire}`);
        });

        console.log('\nüéâ Migration 029 termin√©e avec succ√®s !');
        console.log('üìã Prochaines √©tapes:');
        console.log('   1. Cr√©er le mod√®le Task.js');
        console.log('   2. Cr√©er les routes API');
        console.log('   3. Cr√©er la page task-templates.html');
        console.log('   4. Int√©grer dans la cr√©ation de missions');

    } catch (error) {
        console.error('‚ùå Erreur lors de la migration:', error);
        throw error;
    } finally {
        await pool.end();
    }
}

// Ex√©cuter la migration
runMigration029().catch(console.error); 