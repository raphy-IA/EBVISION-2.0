// Script pour importer le dump propre sur le serveur de production
require('dotenv').config();
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

async function importCleanDump() {
    console.log('üöÄ Import du dump propre vers la production...\n');
    
    try {
        // 1. Configuration de la base de donn√©es
        const pool = new Pool({
            host: process.env.DB_HOST || 'localhost',
            port: parseInt(process.env.DB_PORT) || 5432,
            database: process.env.DB_NAME || 'ebpadfbq_eb_vision_2_0',
            user: process.env.DB_USER || 'ebpadfbq_eb_admin20',
            password: process.env.DB_PASSWORD || '87ifet-Z)&',
            max: 20,
            idleTimeoutMillis: 30000,
            connectionTimeoutMillis: 5000,
            ssl: false,
            family: 4
        });

        // 2. Test de connexion
        console.log('1Ô∏è‚É£ Test de connexion √† la base de production...');
        const testResult = await pool.query('SELECT NOW() as current_time');
        console.log(`‚úÖ Connexion r√©ussie - Heure serveur: ${testResult.rows[0].current_time}`);
        await pool.end();

        // 3. Recherche du fichier de dump
        console.log('\n2Ô∏è‚É£ Recherche du fichier de dump...');
        const files = fs.readdirSync(__dirname + '/..');
        const dumpFiles = files.filter(file => 
            file.startsWith('backup_local_clean_') && file.endsWith('.sql')
        ).sort().reverse(); // Prendre le plus r√©cent
        
        if (dumpFiles.length === 0) {
            console.error('‚ùå Aucun fichier de dump trouv√© !');
            console.log('üí° Assurez-vous d\'avoir transf√©r√© le fichier de dump depuis votre machine locale');
            return;
        }
        
        const dumpFile = dumpFiles[0];
        const dumpPath = path.join(__dirname, '..', dumpFile);
        const stats = fs.statSync(dumpPath);
        const fileSizeMB = (stats.size / (1024 * 1024)).toFixed(2);
        
        console.log(`‚úÖ Fichier trouv√©: ${dumpFile}`);
        console.log(`üìä Taille: ${fileSizeMB} MB`);

        // 4. V√©rification du contenu du fichier
        console.log('\n3Ô∏è‚É£ V√©rification du contenu du dump...');
        const content = fs.readFileSync(dumpPath, 'utf8');
        
        // V√©rifier l'encodage
        const hasBOM = content.charCodeAt(0) === 0xFEFF;
        if (hasBOM) {
            console.log('‚ö†Ô∏è  BOM d√©tect√©, nettoyage en cours...');
            const cleanContent = content.slice(1);
            fs.writeFileSync(dumpPath, cleanContent, 'utf8');
            console.log('‚úÖ BOM supprim√©');
        }
        
        // V√©rifier les tables importantes
        const hasUsers = content.includes('CREATE TABLE users') || content.includes('INSERT INTO users');
        const hasBusinessUnits = content.includes('CREATE TABLE business_units') || content.includes('INSERT INTO business_units');
        const hasRoles = content.includes('CREATE TABLE roles') || content.includes('INSERT INTO roles');
        
        console.log('üîç V√©rification des tables importantes:');
        console.log(`   ${hasUsers ? '‚úÖ' : '‚ùå'} Table users`);
        console.log(`   ${hasBusinessUnits ? '‚úÖ' : '‚ùå'} Table business_units`);
        console.log(`   ${hasRoles ? '‚úÖ' : '‚ùå'} Table roles`);

        // 5. Confirmation avant import
        console.log('\n‚ö†Ô∏è  ATTENTION: Cette op√©ration va √©craser la base de production !');
        console.log('üìã Voulez-vous continuer ? (Ctrl+C pour annuler)');
        console.log('‚è≥ Attente de 10 secondes...');
        
        await new Promise(resolve => setTimeout(resolve, 10000));

        // 6. Import vers la production
        console.log('\n4Ô∏è‚É£ Import vers la production...');
        const importCommand = `psql -h localhost -p 5432 -U ebpadfbq_eb_admin20 -d ebpadfbq_eb_vision_2_0 -f "${dumpPath}"`;
        
        console.log(`üîß Ex√©cution de: ${importCommand}`);
        
        exec(importCommand, { maxBuffer: 1024 * 1024 * 10 }, (error, stdout, stderr) => {
            if (error) {
                console.error('‚ùå Erreur lors de l\'import:', error.message);
                return;
            }
            
            if (stderr) {
                console.log('‚ö†Ô∏è  Avertissements de l\'import:');
                console.log(stderr);
            }
            
            if (stdout) {
                console.log('üìã Sortie de l\'import:');
                console.log(stdout);
            }
            
            console.log('\n‚úÖ Import termin√© !');
            
            // 7. V√©rification post-import
            console.log('\n5Ô∏è‚É£ V√©rification post-import...');
            verifyImport();
        });
        
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    }
}

async function verifyImport() {
    try {
        const pool = new Pool({
            host: process.env.DB_HOST || 'localhost',
            port: parseInt(process.env.DB_PORT) || 5432,
            database: process.env.DB_NAME || 'ebpadfbq_eb_vision_2_0',
            user: process.env.DB_USER || 'ebpadfbq_eb_admin20',
            password: process.env.DB_PASSWORD || '87ifet-Z)&',
            max: 20,
            idleTimeoutMillis: 30000,
            connectionTimeoutMillis: 5000,
            ssl: false,
            family: 4
        });

        // V√©rifier les tables d'authentification
        const authTables = ['users', 'business_units', 'roles', 'permissions'];
        
        for (const table of authTables) {
            try {
                const countResult = await pool.query(`SELECT COUNT(*) as count FROM ${table}`);
                console.log(`üìä ${table}: ${countResult.rows[0].count} enregistrements`);
                
                if (table === 'users' && countResult.rows[0].count > 0) {
                    const usersResult = await pool.query(`
                        SELECT nom, prenom, email, role, statut 
                        FROM users 
                        LIMIT 3
                    `);
                    console.log('üë• Utilisateurs:');
                    usersResult.rows.forEach(user => {
                        console.log(`   - ${user.nom} ${user.prenom} (${user.email}) - ${user.role}`);
                    });
                }
            } catch (error) {
                console.log(`‚ùå Erreur avec ${table}: ${error.message}`);
            }
        }

        await pool.end();
        
        console.log('\nüéâ V√©rification termin√©e !');
        console.log('\nüí° Prochaines √©tapes:');
        console.log('1. Red√©marrez l\'application: pm2 restart eb-vision-2-0');
        console.log('2. Testez la connexion avec vos identifiants');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error.message);
    }
}

importCleanDump().catch(console.error);







