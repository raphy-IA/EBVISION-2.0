# Script PowerShell de d√©ploiement des corrections de s√©curit√©
# Usage: .\scripts\deploy-security-fixes.ps1

Write-Host "üöÄ D√âPLOIEMENT DES CORRECTIONS DE S√âCURIT√â" -ForegroundColor Green
Write-Host "==========================================" -ForegroundColor Green
Write-Host ""

# Fonction pour afficher les messages color√©s
function Write-Success {
    param($Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Warning {
    param($Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-Error {
    param($Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Write-Info {
    param($Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Blue
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "package.json")) {
    Write-Error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
}

Write-Host "üìã √âTAPES DE D√âPLOIEMENT:" -ForegroundColor Cyan
Write-Host ""

# 1. V√©rifier l'√©tat de Git
Write-Info "1. V√©rification de l'√©tat Git..."
$gitStatus = git status --porcelain
if ($gitStatus) {
    Write-Warning "Des modifications non commit√©es d√©tect√©es:"
    git status --short
    Write-Host ""
    $response = Read-Host "Voulez-vous continuer ? (y/N)"
    if ($response -notmatch "^[Yy]$") {
        Write-Error "D√©ploiement annul√©"
        exit 1
    }
} else {
    Write-Success "Aucune modification non commit√©e"
}

# 2. V√©rifier la branche
Write-Info "2. V√©rification de la branche..."
$currentBranch = git branch --show-current
Write-Info "Branche actuelle: $currentBranch"

if ($currentBranch -ne "main" -and $currentBranch -ne "master") {
    Write-Warning "Vous n'√™tes pas sur la branche principale"
    $response = Read-Host "Voulez-vous continuer ? (y/N)"
    if ($response -notmatch "^[Yy]$") {
        Write-Error "D√©ploiement annul√©"
        exit 1
    }
}

# 3. V√©rifier les corrections de s√©curit√©
Write-Info "3. V√©rification des corrections de s√©curit√©..."

# V√©rifier la cl√© JWT
if (Test-Path ".env") {
    $envContent = Get-Content ".env" -Raw
    if ($envContent -match "JWT_SECRET=dev-secret-key-2024") {
        Write-Error "Cl√© JWT par d√©faut d√©tect√©e dans .env"
        Write-Warning "G√©n√©rez une nouvelle cl√© avec: node scripts/generate-secure-jwt-key.js --update"
        exit 1
    } else {
        Write-Success "Cl√© JWT s√©curis√©e configur√©e"
    }
} else {
    Write-Warning "Fichier .env non trouv√©"
}

# V√©rifier les credentials supprim√©s
$loginContent = Get-Content "public/login.html" -Raw
if ($loginContent -match "admin@ebvision.com") {
    Write-Error "Credentials de d√©mo encore pr√©sents dans login.html"
    exit 1
} else {
    Write-Success "Credentials de d√©mo supprim√©s"
}

# V√©rifier le rate limiting
$serverContent = Get-Content "server.js" -Raw
if ($serverContent -match "Rate limiting activ√© pour l'authentification") {
    Write-Success "Rate limiting activ√©"
} else {
    Write-Warning "Rate limiting non d√©tect√© dans server.js"
}

# V√©rifier les cookies httpOnly
if (Test-Path "src/middleware/cookieAuth.js") {
    Write-Success "Middleware cookies httpOnly pr√©sent"
} else {
    Write-Error "Middleware cookies httpOnly manquant"
    exit 1
}

# 4. Tests de s√©curit√©
Write-Info "4. Ex√©cution des tests de s√©curit√©..."

if (Test-Path "scripts/security-audit-passwords.js") {
    Write-Info "Audit des mots de passe..."
    $auditResult = node scripts/security-audit-passwords.js 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Audit des mots de passe r√©ussi"
        # Extraire le score de s√©curit√©
        $scoreMatch = $auditResult | Select-String "Score: (\d+)/100"
        if ($scoreMatch) {
            $score = $scoreMatch.Matches[0].Groups[1].Value
            Write-Info "Score de s√©curit√©: $score/100"
        }
    } else {
        Write-Error "√âchec de l'audit des mots de passe"
        Write-Host $auditResult
        exit 1
    }
} else {
    Write-Warning "Script d'audit des mots de passe non trouv√©"
}

# 5. Pr√©paration du d√©ploiement
Write-Info "5. Pr√©paration du d√©ploiement..."

# Cr√©er un tag de version
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$tagName = "security-fix-$timestamp"

Write-Info "Cr√©ation du tag: $tagName"
git tag -a $tagName -m "Corrections de s√©curit√© - $timestamp"

# 6. Instructions de d√©ploiement
Write-Host ""
Write-Host "üìã INSTRUCTIONS DE D√âPLOIEMENT SUR LE SERVEUR:" -ForegroundColor Cyan
Write-Host "==============================================" -ForegroundColor Cyan
Write-Host ""
Write-Info "1. Sur le serveur de production, ex√©cutez:"
Write-Host "   git fetch origin"
Write-Host "   git checkout $currentBranch"
Write-Host "   git pull origin $currentBranch"
Write-Host "   git checkout $tagName"
Write-Host ""
Write-Info "2. Installez les nouvelles d√©pendances:"
Write-Host "   npm install"
Write-Host ""
Write-Info "3. Mettez √† jour le fichier .env avec la nouvelle cl√© JWT:"
Write-Host "   # Copiez la cl√© JWT depuis votre .env local vers le serveur"
Write-Host ""
Write-Info "4. Red√©marrez l'application:"
Write-Host "   pm2 restart eb-vision"
Write-Host "   # ou selon votre configuration de d√©ploiement"
Write-Host ""
Write-Info "5. V√©rifiez que l'application fonctionne:"
Write-Host "   curl -I http://localhost:3000/api/health"
Write-Host ""

# 7. Checklist de v√©rification post-d√©ploiement
Write-Host "üîç CHECKLIST DE V√âRIFICATION POST-D√âPLOIEMENT:" -ForegroundColor Cyan
Write-Host "==============================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "‚ñ° L'application d√©marre sans erreur"
Write-Host "‚ñ° La connexion fonctionne avec les nouveaux cookies"
Write-Host "‚ñ° Le rate limiting est actif (tester avec plusieurs tentatives)"
Write-Host "‚ñ° Les credentials de d√©mo ne sont plus visibles"
Write-Host "‚ñ° L'audit de s√©curit√© montre un score > 90/100"
Write-Host "‚ñ° Les logs ne montrent pas d'erreurs de s√©curit√©"
Write-Host ""

Write-Success "Pr√©paration du d√©ploiement termin√©e !"
Write-Info "Tag cr√©√©: $tagName"
Write-Warning "N'oubliez pas de pousser les changements: git push origin $currentBranch --tags"


