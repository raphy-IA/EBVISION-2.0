// Script de diagnostic rapide pour identifier le probl√®me de d√©marrage
require('dotenv').config();
const fs = require('fs');
const path = require('path');

async function diagnosticRapide() {
    console.log('üîç DIAGNOSTIC RAPIDE - Identification du probl√®me de d√©marrage...\n');
    
    try {
        console.log('1Ô∏è‚É£ V√âRIFICATION DU PERMISSIONMANAGER...');
        
        const permissionManagerPath = path.join(__dirname, '../src/utils/PermissionManager.js');
        if (fs.existsSync(permissionManagerPath)) {
            const content = fs.readFileSync(permissionManagerPath, 'utf8');
            console.log('‚úÖ PermissionManager.js existe et fait', content.length, 'caract√®res');
            
            // V√©rifier la syntaxe
            try {
                require(permissionManagerPath);
                console.log('‚úÖ PermissionManager.js peut √™tre charg√© sans erreur');
            } catch (error) {
                console.log('‚ùå Erreur de syntaxe dans PermissionManager.js:', error.message);
            }
        } else {
            console.log('‚ùå PermissionManager.js n\'existe pas !');
        }
        
        console.log('\n2Ô∏è‚É£ V√âRIFICATION DU MIDDLEWARE DES PERMISSIONS...');
        
        const permissionsPath = path.join(__dirname, '../src/routes/permissions.js');
        if (fs.existsSync(permissionsPath)) {
            const content = fs.readFileSync(permissionsPath, 'utf8');
            console.log('‚úÖ permissions.js existe et fait', content.length, 'caract√®res');
            
            // V√©rifier la syntaxe
            try {
                require(permissionsPath);
                console.log('‚úÖ permissions.js peut √™tre charg√© sans erreur');
            } catch (error) {
                console.log('‚ùå Erreur de syntaxe dans permissions.js:', error.message);
            }
        } else {
            console.log('‚ùå permissions.js n\'existe pas !');
        }
        
        console.log('\n3Ô∏è‚É£ V√âRIFICATION DE LA SYNTAXE GLOBALE...');
        
        // V√©rifier les fichiers principaux
        const filesToCheck = [
            '../src/routes/permissions.js',
            '../src/utils/PermissionManager.js',
            '../src/utils/database.js'
        ];
        
        for (const file of filesToCheck) {
            const filePath = path.join(__dirname, file);
            if (fs.existsSync(filePath)) {
                try {
                    require(filePath);
                    console.log(`‚úÖ ${file} - OK`);
                } catch (error) {
                    console.log(`‚ùå ${file} - Erreur:`, error.message);
                }
            } else {
                console.log(`‚ùå ${file} - Fichier manquant`);
            }
        }
        
        console.log('\n4Ô∏è‚É£ V√âRIFICATION DES IMPORTS...');
        
        // V√©rifier les imports critiques
        try {
            const { pool } = require('../src/utils/database');
            console.log('‚úÖ Import database.js - OK');
        } catch (error) {
            console.log('‚ùå Import database.js - Erreur:', error.message);
        }
        
        console.log('\nüéØ DIAGNOSTIC TERMIN√â');
        console.log('\nüí° Si des erreurs sont trouv√©es, corrigez-les avant de red√©marrer l\'application');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du diagnostic:', error.message);
    }
}

diagnosticRapide().catch(console.error);










