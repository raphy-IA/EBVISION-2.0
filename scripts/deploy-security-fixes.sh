#!/bin/bash

# Script de d√©ploiement des corrections de s√©curit√©
# Usage: ./scripts/deploy-security-fixes.sh

echo "üöÄ D√âPLOIEMENT DES CORRECTIONS DE S√âCURIT√â"
echo "=========================================="
echo ""

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
fi

echo "üìã √âTAPES DE D√âPLOIEMENT:"
echo ""

# 1. V√©rifier l'√©tat de Git
print_info "1. V√©rification de l'√©tat Git..."
if [ -n "$(git status --porcelain)" ]; then
    print_warning "Des modifications non commit√©es d√©tect√©es:"
    git status --short
    echo ""
    read -p "Voulez-vous continuer ? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_error "D√©ploiement annul√©"
        exit 1
    fi
else
    print_status "Aucune modification non commit√©e"
fi

# 2. V√©rifier la branche
print_info "2. V√©rification de la branche..."
current_branch=$(git branch --show-current)
print_info "Branche actuelle: $current_branch"

if [ "$current_branch" != "main" ] && [ "$current_branch" != "master" ]; then
    print_warning "Vous n'√™tes pas sur la branche principale"
    read -p "Voulez-vous continuer ? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_error "D√©ploiement annul√©"
        exit 1
    fi
fi

# 3. V√©rifier les corrections de s√©curit√©
print_info "3. V√©rification des corrections de s√©curit√©..."

# V√©rifier la cl√© JWT
if grep -q "JWT_SECRET=dev-secret-key-2024" .env 2>/dev/null; then
    print_error "Cl√© JWT par d√©faut d√©tect√©e dans .env"
    print_warning "G√©n√©rez une nouvelle cl√© avec: node scripts/generate-secure-jwt-key.js --update"
    exit 1
else
    print_status "Cl√© JWT s√©curis√©e configur√©e"
fi

# V√©rifier les credentials supprim√©s
if grep -q "admin@ebvision.com" public/login.html; then
    print_error "Credentials de d√©mo encore pr√©sents dans login.html"
    exit 1
else
    print_status "Credentials de d√©mo supprim√©s"
fi

# V√©rifier le rate limiting
if grep -q "Rate limiting activ√© pour l'authentification" server.js; then
    print_status "Rate limiting activ√©"
else
    print_warning "Rate limiting non d√©tect√© dans server.js"
fi

# V√©rifier les cookies httpOnly
if [ -f "src/middleware/cookieAuth.js" ]; then
    print_status "Middleware cookies httpOnly pr√©sent"
else
    print_error "Middleware cookies httpOnly manquant"
    exit 1
fi

# 4. Tests de s√©curit√©
print_info "4. Ex√©cution des tests de s√©curit√©..."

if [ -f "scripts/security-audit-passwords.js" ]; then
    print_info "Audit des mots de passe..."
    node scripts/security-audit-passwords.js > /tmp/security-audit.log 2>&1
    if [ $? -eq 0 ]; then
        print_status "Audit des mots de passe r√©ussi"
        # Afficher le score de s√©curit√©
        score=$(grep "Score:" /tmp/security-audit.log | grep -o '[0-9]*/100' | head -1)
        if [ -n "$score" ]; then
            print_info "Score de s√©curit√©: $score"
        fi
    else
        print_error "√âchec de l'audit des mots de passe"
        cat /tmp/security-audit.log
        exit 1
    fi
else
    print_warning "Script d'audit des mots de passe non trouv√©"
fi

# 5. Pr√©paration du d√©ploiement
print_info "5. Pr√©paration du d√©ploiement..."

# Cr√©er un tag de version
timestamp=$(date +"%Y%m%d_%H%M%S")
tag_name="security-fix-$timestamp"

print_info "Cr√©ation du tag: $tag_name"
git tag -a "$tag_name" -m "Corrections de s√©curit√© - $timestamp"

# 6. Instructions de d√©ploiement
echo ""
echo "üìã INSTRUCTIONS DE D√âPLOIEMENT SUR LE SERVEUR:"
echo "=============================================="
echo ""
print_info "1. Sur le serveur de production, ex√©cutez:"
echo "   git fetch origin"
echo "   git checkout $current_branch"
echo "   git pull origin $current_branch"
echo "   git checkout $tag_name"
echo ""
print_info "2. Installez les nouvelles d√©pendances:"
echo "   npm install"
echo ""
print_info "3. Mettez √† jour le fichier .env avec la nouvelle cl√© JWT:"
echo "   # Copiez la cl√© JWT depuis votre .env local vers le serveur"
echo ""
print_info "4. Red√©marrez l'application:"
echo "   pm2 restart eb-vision"
echo "   # ou selon votre configuration de d√©ploiement"
echo ""
print_info "5. V√©rifiez que l'application fonctionne:"
echo "   curl -I http://localhost:3000/api/health"
echo ""

# 7. Checklist de v√©rification post-d√©ploiement
echo "üîç CHECKLIST DE V√âRIFICATION POST-D√âPLOIEMENT:"
echo "=============================================="
echo ""
echo "‚ñ° L'application d√©marre sans erreur"
echo "‚ñ° La connexion fonctionne avec les nouveaux cookies"
echo "‚ñ° Le rate limiting est actif (tester avec plusieurs tentatives)"
echo "‚ñ° Les credentials de d√©mo ne sont plus visibles"
echo "‚ñ° L'audit de s√©curit√© montre un score > 90/100"
echo "‚ñ° Les logs ne montrent pas d'erreurs de s√©curit√©"
echo ""

print_status "Pr√©paration du d√©ploiement termin√©e !"
print_info "Tag cr√©√©: $tag_name"
print_warning "N'oubliez pas de pousser les changements: git push origin $current_branch --tags"
