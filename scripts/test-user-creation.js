// Script de test pour la cr√©ation de compte utilisateur
const { pool } = require('../src/utils/database');

async function testUserCreation() {
    try {
        console.log('üß™ Test de cr√©ation de compte utilisateur...\n');
        
        // 1. V√©rifier qu'un collaborateur existe
        const collaborateurResult = await pool.query(`
            SELECT id, nom, prenom, email 
            FROM collaborateurs 
            WHERE user_id IS NULL 
            LIMIT 1
        `);
        
        if (collaborateurResult.rows.length === 0) {
            console.log('‚ùå Aucun collaborateur sans compte utilisateur trouv√©');
            return;
        }
        
        const collaborateur = collaborateurResult.rows[0];
        console.log('üë§ Collaborateur trouv√©:', collaborateur);
        
        // 2. V√©rifier que le r√¥le ADMIN existe
        const roleResult = await pool.query(`
            SELECT name FROM roles WHERE name = 'ADMIN'
        `);
        
        if (roleResult.rows.length === 0) {
            console.log('‚ùå R√¥le ADMIN non trouv√©');
            return;
        }
        
        console.log('‚úÖ R√¥le ADMIN trouv√©');
        
        // 3. Tester la cr√©ation avec le service
        const UserAccessService = require('../src/services/userAccessService');
        
        const testData = {
            id: collaborateur.id,
            nom: collaborateur.nom,
            prenom: collaborateur.prenom,
            email: collaborateur.email,
            login: 'test.login', // Login personnalis√©
            role: 'ADMIN',       // R√¥le s√©lectionn√©
            password: 'TestPass123!' // Mot de passe personnalis√©
        };
        
        console.log('\nüìù Donn√©es de test:', testData);
        
        const result = await UserAccessService.createUserAccessForCollaborateur(testData);
        
        if (result.success) {
            console.log('\n‚úÖ Compte utilisateur cr√©√© avec succ√®s !');
            console.log('üë§ Utilisateur:', result.user);
            console.log('üîë Mot de passe:', result.password);
            
            // 4. V√©rifier que l'utilisateur existe bien en base
            const userCheck = await pool.query(`
                SELECT u.*, c.nom as collaborateur_nom 
                FROM users u 
                JOIN collaborateurs c ON c.user_id = u.id 
                WHERE u.id = $1
            `, [result.user.id]);
            
            if (userCheck.rows.length > 0) {
                console.log('\n‚úÖ V√©rification en base r√©ussie:');
                console.log('   - Utilisateur cr√©√©:', userCheck.rows[0]);
                console.log('   - Liaison collaborateur:', userCheck.rows[0].collaborateur_nom);
            } else {
                console.log('\n‚ùå L\'utilisateur n\'existe pas en base !');
            }
            
        } else {
            console.log('\n‚ùå √âchec de la cr√©ation:', result.error);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await pool.end();
    }
}

testUserCreation();










