const fs = require('fs');
const path = require('path');
const { pool } = require('../src/utils/database');

async function runSimplePermissionsMigration() {
    console.log('üöÄ D√©but de la migration du syst√®me de permissions simple...');
    
    try {
        const client = await pool.connect();
        console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
        
        // √âtape 1: Structure des tables
        console.log('\nüìã √âtape 1: Cr√©ation de la structure des tables...');
        const structureSQL = fs.readFileSync(
            path.join(__dirname, '../database/migrations/047_create_simple_permissions_system.sql'), 
            'utf8'
        );
        await client.query(structureSQL);
        console.log('‚úÖ Structure des tables cr√©√©e avec succ√®s');
        
        // √âtape 2: Peuplement des donn√©es
        console.log('\nüìã √âtape 2: Peuplement des donn√©es...');
        const dataSQL = fs.readFileSync(
            path.join(__dirname, '../database/migrations/048_populate_simple_permissions.sql'), 
            'utf8'
        );
        await client.query(dataSQL);
        console.log('‚úÖ Donn√©es peupl√©es avec succ√®s');
        
        // V√©rification finale
        console.log('\nüîç V√©rification de la migration...');
        
        const rolesCount = await client.query('SELECT COUNT(*) FROM roles');
        const permissionsCount = await client.query('SELECT COUNT(*) FROM permissions');
        const rolePermissionsCount = await client.query('SELECT COUNT(*) FROM role_permissions');
        const usersWithRoles = await client.query('SELECT COUNT(*) FROM users WHERE role_id IS NOT NULL');
        const buAccessCount = await client.query('SELECT COUNT(*) FROM user_business_unit_access');
        
        console.log(`üìä R√©sultats de la migration:`);
        console.log(`   - R√¥les cr√©√©s: ${rolesCount.rows[0].count}`);
        console.log(`   - Permissions cr√©√©es: ${permissionsCount.rows[0].count}`);
        console.log(`   - Liaisons r√¥les-permissions: ${rolePermissionsCount.rows[0].count}`);
        console.log(`   - Utilisateurs avec r√¥les: ${usersWithRoles.rows[0].count}`);
        console.log(`   - Acc√®s BU configur√©s: ${buAccessCount.rows[0].count}`);
        
        // Affichage des r√¥les cr√©√©s
        const roles = await client.query('SELECT name, description FROM roles ORDER BY name');
        console.log('\nüìã R√¥les disponibles:');
        roles.rows.forEach(role => {
            console.log(`   - ${role.name}: ${role.description}`);
        });
        
        // Affichage des cat√©gories de permissions
        const categories = await client.query('SELECT DISTINCT category FROM permissions ORDER BY category');
        console.log('\nüìã Cat√©gories de permissions:');
        categories.rows.forEach(cat => {
            console.log(`   - ${cat.category}`);
        });
        
        // V√©rifier les utilisateurs et leurs r√¥les
        const users = await client.query(`
            SELECT u.username, u.role, r.name as new_role_name
            FROM users u
            LEFT JOIN roles r ON u.role_id = r.id
            LIMIT 10
        `);
        
        console.log('\nüìã Exemples d\'utilisateurs et leurs r√¥les:');
        users.rows.forEach(user => {
            console.log(`   - ${user.username}: ancien=${user.role}, nouveau=${user.new_role_name || 'Non assign√©'}`);
        });
        
        client.release();
        console.log('\nüéâ Migration du syst√®me de permissions termin√©e avec succ√®s !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la migration:', error);
        throw error;
    }
}

runSimplePermissionsMigration()
    .then(() => {
        console.log('‚úÖ Migration compl√©t√©e');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå √âchec de la migration:', error);
        process.exit(1);
    });
