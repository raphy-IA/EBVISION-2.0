<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Business Units - EBVISION 2.0</title>
    
    <!-- CSS Bootstrap et FontAwesome -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <!-- CSS de la sidebar moderne -->
    <link rel="stylesheet" href="css/modern-sidebar.css">
    
    
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --success-color: #27ae60;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --light-bg: #f8f9fa;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--light-bg);
            overflow-x: hidden; /* Empêche le défilement horizontal */
        }
        
        /* Le conteneur principal de la page qui contient la sidebar et le contenu */
        .page-wrapper {
            display: flex;
            min-height: 100vh;
        }

        /* Styles pour le contenu principal */
        .main-content-area {
            flex-grow: 1; /* Prend l'espace restant */
            padding: 2rem;
            background-color: var(--light-bg);
        }
        
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .stat-card.success {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        }
        
        .stat-card.warning {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        
        .stat-card.info {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }
        
        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
        }
        
        .table thead th {
            background-color: var(--primary-color);
            color: white;
        }
        
        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .status-saisie { background-color: #e3f2fd; color: #1976d2; }
        .status-soumise { background-color: #fff3e0; color: #f57c00; }
        .status-validee { background-color: #e8f5e8; color: #388e3c; }
        .status-rejetee { background-color: #ffebee; color: #d32f2f; }
        
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
        }
        
        /* Styles pour la gestion des responsables */
        .manager-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            border: 1px solid #e9ecef;
            transition: all 0.3s ease;
        }
        
        .manager-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .manager-card.has-managers {
            border-left: 4px solid #28a745;
        }
        
        .manager-card.no-managers {
            border-left: 4px solid #dc3545;
        }
        
        .manager-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .manager-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        .manager-details h6 {
            margin-bottom: 0.25rem;
            color: #495057;
        }
        
        .manager-details p {
            margin-bottom: 0;
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .manager-badges {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }
        
        .manager-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .badge-principal {
            background-color: #d1ecf1;
            color: #0c5460;
        }
        
        .badge-adjoint {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .manager-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }
        
        .no-managers-alert {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
        }
        
        .filters-active {
            background-color: #e3f2fd;
            border: 1px solid #2196f3;
        }
        
        /* Styles pour les badges de statut */
        .badge.bg-success {
            background-color: #28a745 !important;
            color: white !important;
        }
        
        .badge.bg-secondary {
            background-color: #6c757d !important;
            color: white !important;
        }
        
        .badge i {
            font-size: 0.8em;
        }
        
        .filters-active .card-title {
            color: #1976d2;
        }

        /* Ajustements pour les petits écrans */
        @media (max-width: 768px) {
            .page-wrapper {
                flex-direction: column; /* Empile la sidebar et le contenu */
            }
            
            .main-content-area {
                padding: 1rem;
            }
        }
    
        /* Styles pour la sidebar unifiée */
        .main-content-wrapper {
            margin-left: 300px;
            transition: margin-left 0.3s ease;
            min-height: 100vh;
            padding: 0;
        }
        
        .main-content {
            padding: 2rem;
        }
        
        @media (max-width: 768px) {
            .main-content-wrapper {
                margin-left: 0;
            }

            .sidebar-container.open {
                transform: translateX(0);
            }
            
            .main-content {
                padding: 1rem;
            }
        }
    </style>
    <!-- Scripts pour la top bar EBVISION 2.0 -->
    
    
    
    <!-- Script pour la gestion utilisateur -->
    <script src="js/user-header.js"></script>
    <script src="js/menu-permissions.js"></script>
    <script src="js/profile-menu.js"></script>
    <script src="js/notifications.js"></script>
    <script src="js/tasks.js"></script>
</head>
<body>
    <!-- Bouton toggle sidebar mobile -->
    <button class="sidebar-toggle d-md-none">
        <i class="fas fa-bars"></i>
    </button>
    <div class="page-wrapper">
        <!-- Sidebar Container -->
        <div class="sidebar-container">
            <!-- La sidebar sera générée par JavaScript -->
        </div>

        <!-- Main Content Area -->
        <div class="main-content-area">
            <div id="business-units-section">
                <!-- Header -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <h2><i class="fas fa-building me-2"></i>Gestion des Business Units</h2>
                            <button class="btn btn-primary" onclick="openCreateModal()">
                                <i class="fas fa-plus"></i> Nouvelle Business Unit
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Onglets -->
                <div class="card mb-4">
                    <div class="card-header">
                        <ul class="nav nav-tabs card-header-tabs" id="businessUnitsTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="list-tab" data-bs-toggle="tab" data-bs-target="#list" type="button" role="tab" aria-controls="list" aria-selected="true">
                                    <i class="fas fa-list me-2"></i>Liste des Business Units
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="activities-tab" data-bs-toggle="tab" data-bs-target="#activities" type="button" role="tab" aria-controls="activities" aria-selected="false">
                                    <i class="fas fa-cogs me-2"></i>Configuration Activités Internes
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="managers-tab" data-bs-toggle="tab" data-bs-target="#managers" type="button" role="tab" aria-controls="managers" aria-selected="false">
                                    <i class="fas fa-users-cog me-2"></i>Gestion des Responsables
                                </button>
                            </li>
                        </ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content" id="businessUnitsTabContent">
                            <!-- Onglet Liste des Business Units -->
                            <div class="tab-pane fade show active" id="list" role="tabpanel" aria-labelledby="list-tab">
                                <div id="bu-loading" class="loading">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Chargement...</span>
                                    </div>
                                </div>
                                <div id="bu-content">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Code</th>
                                                    <th>Nom</th>
                                                    <th>Description</th>
                                                    <th>Divisions</th>
                                                    <th>Statut</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="bu-table">
                                                <!-- Business Units will be loaded here by JavaScript -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Onglet Configuration Activités Internes -->
                            <div class="tab-pane fade" id="activities" role="tabpanel" aria-labelledby="activities-tab">
                                <div id="activities-config-section">
                                    <!-- Header de la configuration -->
                                    <div class="d-flex justify-content-between align-items-center mb-4">
                                        <div>
                                            <h5><i class="fas fa-cogs me-2"></i>Configuration Activités Internes par Business Unit</h5>
                                            <p class="text-muted mb-0">Configurez les activités internes pour chaque Business Unit</p>
                                        </div>
                                        <button class="btn btn-primary" onclick="saveAllActivityConfigurations()">
                                            <i class="fas fa-save me-2"></i>Sauvegarder Tout
                                        </button>
                                    </div>

                                    <!-- Statistiques -->
                                    <div class="row mb-4">
                                        <div class="col-md-3">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <i class="fas fa-building text-primary" style="font-size: 2rem;"></i>
                                                    <div class="stats-number" id="totalBusinessUnitsConfig">0</div>
                                                    <div class="stats-label">Business Units</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <i class="fas fa-list text-success" style="font-size: 2rem;"></i>
                                                    <div class="stats-number" id="totalActivitiesConfig">0</div>
                                                    <div class="stats-label">Activités Internes</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <i class="fas fa-link text-warning" style="font-size: 2rem;"></i>
                                                    <div class="stats-number" id="totalAssignmentsConfig">0</div>
                                                    <div class="stats-label">Affectations</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <i class="fas fa-check-circle text-info" style="font-size: 2rem;"></i>
                                                    <div class="stats-number" id="configuredUnitsConfig">0</div>
                                                    <div class="stats-label">BU Configurées</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Sélecteur de Business Unit -->
                                    <div class="card mb-4">
                                        <div class="card-body">
                                            <h6 class="card-title">
                                                <i class="fas fa-filter me-2"></i>Filtrer par Business Unit
                                            </h6>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <select class="form-select" id="businessUnitFilter">
                                                        <option value="">Toutes les Business Units</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" id="showConfiguredOnly">
                                                        <label class="form-check-label" for="showConfiguredOnly">
                                                            Afficher seulement les BU configurées
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Liste des Business Units pour configuration -->
                                    <div id="businessUnitsConfigContainer">
                                        <!-- Les business units seront chargées dynamiquement -->
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Onglet Gestion des Responsables -->
                            <div class="tab-pane fade" id="managers" role="tabpanel" aria-labelledby="managers-tab">
                                <div id="managers-section">
                                    <!-- Header de la gestion des responsables -->
                                    <div class="d-flex justify-content-between align-items-center mb-4">
                                        <div>
                                            <h5><i class="fas fa-users-cog me-2"></i>Gestion des Responsables BU et Divisions</h5>
                                            <p class="text-muted mb-0">Assignez les responsables principaux et adjoints pour chaque Business Unit et Division</p>
                                        </div>
                                    </div>

                                    <!-- Statistiques -->
                                    <div class="row mb-4">
                                        <div class="col-md-3">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <i class="fas fa-building text-primary" style="font-size: 2rem;"></i>
                                                    <div class="stats-number" id="totalBusinessUnitsManagers">0</div>
                                                    <div class="stats-label">Business Units</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <i class="fas fa-sitemap text-success" style="font-size: 2rem;"></i>
                                                    <div class="stats-number" id="totalDivisionsManagers">0</div>
                                                    <div class="stats-label">Divisions</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <i class="fas fa-user-check text-warning" style="font-size: 2rem;"></i>
                                                    <div class="stats-number" id="assignedManagers">0</div>
                                                    <div class="stats-label">Responsables Assignés</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <i class="fas fa-exclamation-triangle text-danger" style="font-size: 2rem;"></i>
                                                    <div class="stats-number" id="unassignedUnits">0</div>
                                                    <div class="stats-label">Sans Responsable</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Filtres -->
                                    <div class="card mb-4">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h6 class="card-title mb-0">
                                                    <i class="fas fa-filter me-2"></i>Filtres
                                                </h6>
                                                <button class="btn btn-sm btn-outline-secondary" onclick="resetManagersFilters()">
                                                    <i class="fas fa-undo me-1"></i>Réinitialiser
                                                </button>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-4">
                                                    <label for="entityTypeFilter" class="form-label">Type d'entité</label>
                                                    <select class="form-select" id="entityTypeFilter">
                                                        <option value="">Toutes les entités</option>
                                                        <option value="business-unit">Business Units</option>
                                                        <option value="division">Divisions</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-4">
                                                    <label for="managerStatusFilter" class="form-label">Statut des responsables</label>
                                                    <select class="form-select" id="managerStatusFilter">
                                                        <option value="">Tous les statuts</option>
                                                        <option value="assigned">Avec responsable</option>
                                                        <option value="unassigned">Sans responsable</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="form-check mt-4">
                                                        <input class="form-check-input" type="checkbox" id="showOnlyUnassigned">
                                                        <label class="form-check-label" for="showOnlyUnassigned">
                                                            Afficher seulement les entités sans responsable
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Liste des Business Units avec responsables -->
                                    <div class="card mb-4">
                                        <div class="card-header">
                                            <h6 class="mb-0">
                                                <i class="fas fa-building me-2"></i>Business Units
                                            </h6>
                                        </div>
                                        <div class="card-body">
                                            <div id="businessUnitsManagersContainer">
                                                <div class="text-center py-4">
                                                    <div class="spinner-border text-primary" role="status">
                                                        <span class="visually-hidden">Chargement...</span>
                                                    </div>
                                                    <p class="mt-2 text-muted">Chargement des Business Units...</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Liste des Divisions avec responsables -->
                                    <div class="card mb-4">
                                        <div class="card-header">
                                            <h6 class="mb-0">
                                                <i class="fas fa-sitemap me-2"></i>Divisions
                                            </h6>
                                        </div>
                                        <div class="card-body">
                                            <div id="divisionsManagersContainer">
                                                <div class="text-center py-4">
                                                    <div class="spinner-border text-primary" role="status">
                                                        <span class="visually-hidden">Chargement...</span>
                                                    </div>
                                                    <p class="mt-2 text-muted">Chargement des Divisions...</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <!-- Create/Edit Modal -->
    <div class="modal fade" id="buModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="buModalLabel">Nouvelle Business Unit</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="buForm">
                        <input type="hidden" id="buId">
                        <div class="mb-3">
                            <label for="buName" class="form-label">Nom *</label>
                            <input type="text" class="form-control" id="buName" required>
                        </div>
                        <div class="mb-3">
                            <label for="buCode" class="form-label">Code *</label>
                            <input type="text" class="form-control" id="buCode" required>
                        </div>
                        <div class="mb-3">
                            <label for="buDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="buDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-primary" onclick="saveBusinessUnit()">
                        <i class="fas fa-save me-1"></i>
                        Enregistrer
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2 text-warning"></i>
                        Confirmer la suppression
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer cette Business Unit ?</p>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Note :</strong> Si la Business Unit contient des données liées (collaborateurs, activités, etc.), elle sera désactivée au lieu d'être supprimée définitivement.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-warning" onclick="confirmDelete(false)">
                        <i class="fas fa-ban me-1"></i>
                        Désactiver
                    </button>
                    <button type="button" class="btn btn-danger" onclick="confirmDelete(true)">
                        <i class="fas fa-trash me-1"></i>
                        Supprimer définitivement
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de détails pour la configuration des activités -->
    <div class="modal fade" id="activityDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-info-circle me-2"></i>Détails de la Configuration
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="activityDetailsModalBody">
                    <!-- Les détails seront chargés dynamiquement -->
                </div>
            </div>
        </div>
    </div>

    <!-- Divisions Modal -->
    <div class="modal fade" id="divisionsModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-sitemap me-2"></i>
                        Divisions de la Business Unit: <span id="bu-name-display"></span>
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">Liste des divisions</h6>
                        <button class="btn btn-primary btn-sm" onclick="openCreateDivisionModal()">
                            <i class="fas fa-plus me-1"></i> Nouvelle Division
                        </button>
                    </div>
                    <div id="divisions-loading" class="loading">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Chargement...</span>
                        </div>
                    </div>
                    <div id="divisions-content">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Code</th>
                                        <th>Nom</th>
                                        <th>Description</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="divisions-table">
                                    <!-- Divisions will be loaded here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Create/Edit Division Modal -->
    <div class="modal fade" id="divisionModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="divisionModalLabel">Nouvelle Division</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="divisionForm">
                        <input type="hidden" id="divisionId">
                        <input type="hidden" id="currentBuId">
                        <div class="mb-3">
                            <label for="divisionName" class="form-label">Nom *</label>
                            <input type="text" class="form-control" id="divisionName" required>
                        </div>
                        <div class="mb-3">
                            <label for="divisionCode" class="form-label">Code *</label>
                            <input type="text" class="form-control" id="divisionCode" required>
                        </div>
                        <div class="mb-3">
                            <label for="divisionDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="divisionDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-primary" onclick="saveDivision()">
                        <i class="fas fa-save me-1"></i>
                        Enregistrer
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Division Confirmation Modal -->
    <div class="modal fade" id="deleteDivisionConfirmModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2 text-warning"></i>
                        Confirmer la suppression
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer cette Division ?</p>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Note :</strong> Si la Division contient des données liées (collaborateurs, activités, etc.), elle sera désactivée au lieu d'être supprimée définitivement.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-warning" onclick="confirmDeleteDivision(false)">
                        <i class="fas fa-ban me-1"></i>
                        Désactiver
                    </button>
                    <button type="button" class="btn btn-danger" onclick="confirmDeleteDivision(true)">
                        <i class="fas fa-trash me-1"></i>
                        Supprimer définitivement
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de gestion des responsables -->
    <div class="modal fade" id="managersModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-users-cog me-2"></i>
                        Gestion des Responsables: <span id="entity-name-display"></span>
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="managersForm">
                        <input type="hidden" id="entityId">
                        <input type="hidden" id="entityType">
                        
                        <!-- Responsable Principal -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="fas fa-user-tie me-2 text-primary"></i>
                                    Responsable Principal
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="principalManager" class="form-label">Responsable Principal *</label>
                                    <select class="form-select" id="principalManager" required>
                                        <option value="">Sélectionnez un responsable principal</option>
                                    </select>
                                    <div class="form-text">
                                        <i class="fas fa-info-circle me-1"></i>
                                        Seuls les collaborateurs de cette entité sont éligibles. Le responsable principal sera le premier contact pour les validations.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Responsable Adjoint -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="fas fa-user-friends me-2 text-secondary"></i>
                                    Responsable Adjoint
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="adjointManager" class="form-label">Responsable Adjoint</label>
                                    <select class="form-select" id="adjointManager">
                                        <option value="">Sélectionnez un responsable adjoint (optionnel)</option>
                                    </select>
                                    <div class="form-text">
                                        <i class="fas fa-info-circle me-1"></i>
                                        Seuls les collaborateurs de cette entité sont éligibles. Le responsable adjoint remplacera le principal en cas d'absence.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Alerte si aucun collaborateur éligible -->
                        <div class="alert alert-warning" id="noEligibleCollaboratorsAlert" style="display: none;">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>Attention :</strong> Aucun collaborateur actif n'est assigné à cette entité. 
                            Vous devez d'abord assigner des collaborateurs à cette Business Unit/Division avant de pouvoir désigner des responsables.
                        </div>

                        <!-- Informations sur les responsables actuels -->
                        <div class="card mb-3" id="currentManagersInfo" style="display: none;">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="fas fa-info-circle me-2 text-info"></i>
                                    Responsables Actuels
                                </h6>
                            </div>
                            <div class="card-body">
                                <div id="currentManagersContent">
                                    <!-- Les informations seront chargées dynamiquement -->
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-primary" onclick="saveManagers()">
                        <i class="fas fa-save me-1"></i>
                        Enregistrer les Responsables
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/auth.js" defer></script>
    <script src="/js/sidebar.js" defer></script>
    <script>
        const API_BASE_URL = '/api';
        // Fonction utilitaire pour les appels API authentifiés
        async function authenticatedFetch(url, options = {}) {
            const token = localStorage.getItem('authToken');
            const defaultHeaders = {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            };
            
            return fetch(url, {
                ...options,
                headers: {
                    ...defaultHeaders,
                    ...options.headers
                }
            });
        }

        let buToDelete = null;
        let divisionToDelete = null;
        let currentBuId = null;
        let businessUnits = []; // Variable globale pour les business units

        document.addEventListener('DOMContentLoaded', function() {
            loadBusinessUnits();
        });

        async function loadBusinessUnits() {
            showLoading(true);
            try {
                console.log('🔄 Chargement des Business Units...');
                // Charger toutes les Business Units en une seule fois
                const response = await authenticatedFetch(`${API_BASE_URL}/business-units?limit=100`);
                const data = await response.json();
                console.log('📊 Réponse API:', data);
                
                if (data.success) {
                    console.log(`✅ ${data.data.length} Business Units chargées`);
                    businessUnits = data.data; // Stocker dans la variable globale
                    displayBusinessUnits(data.data);
                } else {
                    console.error('❌ Erreur API:', data.message);
                    showAlert('Erreur lors du chargement des business units', 'danger');
                }
            } catch (error) {
                console.error('❌ Erreur fetch:', error);
                showAlert('Erreur de connexion', 'danger');
            } finally {
                showLoading(false);
            }
        }

        function displayBusinessUnits(bus) {
            console.log('🎨 Affichage des Business Units:', bus);
            const tbody = document.getElementById('bu-table');
            if (!tbody) {
                console.error('❌ Élément bu-table non trouvé');
                return;
            }
            
            tbody.innerHTML = '';
            if (bus.length === 0) {
                console.log('📭 Aucune Business Unit à afficher');
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-muted py-4">
                            <i class="fas fa-building fa-2x mb-3"></i>
                            <p>Aucune Business Unit trouvée</p>
                        </td>
                    </tr>
                `;
                return;
            }

            console.log(`📋 Affichage de ${bus.length} Business Units`);
            bus.forEach((bu, index) => {
                console.log(`   ${index + 1}. ${bu.nom} (${bu.code}) - Divisions: ${bu.divisions_count}`);
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${bu.code}</td>
                    <td>${bu.nom}</td>
                    <td>${bu.description || '-'}</td>
                    <td>
                        <span class="badge bg-info">${bu.divisions_count || 0}</span>
                    </td>
                    <td>
                        <span class="badge ${bu.statut === 'ACTIF' ? 'bg-success' : 'bg-secondary'}">
                            <i class="fas ${bu.statut === 'ACTIF' ? 'fa-check-circle' : 'fa-times-circle'} me-1"></i>
                            ${bu.statut === 'ACTIF' ? 'Actif' : 'Inactif'}
                        </span>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-info" onclick="viewDivisions('${bu.id}', '${bu.nom}')" title="Voir les divisions">
                                <i class="fas fa-sitemap"></i>
                            </button>
                            <button class="btn btn-outline-warning" onclick="editBusinessUnit('${bu.id}')" title="Modifier">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-danger" onclick="deleteBusinessUnit('${bu.id}')" title="Supprimer">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
            console.log('✅ Affichage terminé');
        }

        function openCreateModal() {
            document.getElementById('buForm').reset();
            document.getElementById('buId').value = '';
            document.getElementById('buModalLabel').textContent = 'Nouvelle Business Unit';
            new bootstrap.Modal(document.getElementById('buModal')).show();
        }

        async function saveBusinessUnit() {
            const form = document.getElementById('buForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const id = document.getElementById('buId').value;
            const formData = {
                nom: document.getElementById('buName').value.trim(),
                code: document.getElementById('buCode').value.trim(),
                description: document.getElementById('buDescription').value.trim()
            };

            if (!formData.nom) {
                showAlert('Le nom de la Business Unit ne peut pas être vide.', 'danger');
                return;
            }

            try {
                const url = id ? `${API_BASE_URL}/business-units/${id}` : `${API_BASE_URL}/business-units`;
                const method = id ? 'PUT' : 'POST';

                const response = await authenticatedFetch(url, {
                    method: method,
                    body: JSON.stringify(formData)
                });
                const data = await response.json();
                if (data.success) {
                    showAlert(`Business Unit ${id ? 'mise à jour' : 'créée'} avec succès`, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('buModal')).hide();
                    loadBusinessUnits();
                } else {
                    showAlert(`Erreur lors de la sauvegarde: ${data.message || data.error || 'Erreur inconnue'}`, 'danger');
                }
            } catch (error) {
                console.error('Erreur lors de la sauvegarde:', error);
                showAlert('Erreur lors de la sauvegarde', 'danger');
            }
        }

        async function editBusinessUnit(id) {
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/business-units/${id}`);
                const data = await response.json();
                if (data.success) {
                    const bu = data.data;
                    document.getElementById('buId').value = bu.id;
                    document.getElementById('buName').value = bu.nom;
                    document.getElementById('buCode').value = bu.code; // Add this line
                    document.getElementById('buDescription').value = bu.description || '';
                    document.getElementById('buModalLabel').textContent = 'Modifier Business Unit';
                    new bootstrap.Modal(document.getElementById('buModal')).show();
                } else {
                    showAlert('Business Unit non trouvée', 'danger');
                }
            } catch (error) {
                console.error('Erreur:', error);
                showAlert('Erreur de connexion', 'danger');
            }
        }

        function deleteBusinessUnit(id) {
            buToDelete = id;
            new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
        }

        async function confirmDelete(force = false) {
            if (!buToDelete) return;

            try {
                const url = force ? 
                    `${API_BASE_URL}/business-units/${buToDelete}?force=true` : 
                    `${API_BASE_URL}/business-units/${buToDelete}`;
                
                const response = await authenticatedFetch(url, {
                    method: 'DELETE'
                });
                const data = await response.json();
                
                if (data.success) {
                    const action = data.action === 'deleted' ? 'supprimée définitivement' : 'désactivée';
                    showAlert(`Business Unit ${action} avec succès`, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                    loadBusinessUnits();
                } else {
                    // Gérer les erreurs détaillées
                    if (data.details) {
                        const reasons = data.details.reasons.join(', ');
                        const message = `${data.message}\n\nRaisons: ${reasons}\n\nSuggestion: ${data.details.suggestion}`;
                        showAlert(message, 'warning');
                    } else {
                        showAlert(data.message || 'Erreur lors de la suppression', 'danger');
                    }
                }
            } catch (error) {
                console.error('Erreur lors de la suppression:', error);
                showAlert('Erreur lors de la suppression', 'danger');
            } finally {
                buToDelete = null;
            }
        }

        async function viewDivisions(buId, buName) {
            try {
                // Stocker l'ID de la BU courante
                currentBuId = buId;
                
                // Afficher le nom de la BU dans le modal
                document.getElementById('bu-name-display').textContent = buName;
                
                // Afficher le loading
                showDivisionsLoading(true);
                
                // Charger les divisions de cette BU
                const response = await authenticatedFetch(`${API_BASE_URL}/divisions?business_unit_id=${buId}`);
                const data = await response.json();
                
                if (data.success) {
                    displayDivisions(data.data);
                } else {
                    showAlert('Erreur lors du chargement des divisions', 'danger');
                }
                
                // Afficher le modal (éviter de le ré-ouvrir si déjà affiché)
                const divisionsModalEl = document.getElementById('divisionsModal');
                const existingModal = bootstrap.Modal.getInstance(divisionsModalEl) || new bootstrap.Modal(divisionsModalEl);
                if (!divisionsModalEl.classList.contains('show')) {
                    existingModal.show();
                }
                
            } catch (error) {
                console.error('Erreur lors du chargement des divisions:', error);
                showAlert('Erreur de connexion', 'danger');
            } finally {
                showDivisionsLoading(false);
            }
        }

        // Recharger les divisions pour la BU courante sans ré-ouvrir le modal
        async function reloadDivisionsForCurrentBu() {
            if (!currentBuId) return;
            try {
                showDivisionsLoading(true);
                const response = await authenticatedFetch(`${API_BASE_URL}/divisions?business_unit_id=${currentBuId}`);
                const data = await response.json();
                if (data.success) {
                    displayDivisions(data.data);
                }
            } catch (error) {
                console.error('Erreur lors du rechargement des divisions:', error);
            } finally {
                showDivisionsLoading(false);
            }
        }

        function displayDivisions(divisions) {
            const tbody = document.getElementById('divisions-table');
            tbody.innerHTML = '';
            
            if (divisions.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="4" class="text-center text-muted py-4">
                            <i class="fas fa-sitemap fa-2x mb-3"></i>
                            <p>Aucune division trouvée pour cette Business Unit</p>
                        </td>
                    </tr>
                `;
                return;
            }

            divisions.forEach(division => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${division.code}</td>
                    <td>${division.nom}</td>
                    <td>${division.description || '-'}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-warning" onclick="editDivision('${division.id}')" title="Modifier">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-danger" onclick="deleteDivision('${division.id}')" title="Supprimer">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function showDivisionsLoading(show) {
            document.getElementById('divisions-loading').style.display = show ? 'flex' : 'none';
            document.getElementById('divisions-content').style.display = show ? 'none' : 'block';
        }

        // Nettoyage de sécurité des backdrops et de la classe body après fermeture d'un modal
        function cleanupModalArtifacts() {
            // S'il n'y a plus de modal visible, retirer les backdrops et la classe sur le body
            const anyOpenModal = document.querySelector('.modal.show');
            const backdrops = document.querySelectorAll('.modal-backdrop');
            if (!anyOpenModal) {
                backdrops.forEach(bd => bd.remove());
                document.body.classList.remove('modal-open');
                document.body.style.removeProperty('padding-right');
            } else if (backdrops.length > 1) {
                // Éviter l'empilement: garder un backdrop si un modal est ouvert
                backdrops.forEach((bd, idx) => {
                    if (idx < backdrops.length - 1) bd.remove();
                });
            }
        }
        document.addEventListener('hidden.bs.modal', cleanupModalArtifacts);

        function showLoading(show) {
            document.getElementById('bu-loading').style.display = show ? 'flex' : 'none';
            document.getElementById('bu-content').style.display = show ? 'none' : 'block';
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            
            // Convertir les retours à la ligne en <br>
            const formattedMessage = message.replace(/\n/g, '<br>');
            
            alertDiv.innerHTML = `
                <div class="d-flex align-items-start">
                    <div class="flex-grow-1">
                        ${formattedMessage}
                    </div>
                    <button type="button" class="btn-close ms-2" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            const container = document.querySelector('.main-content-area');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
            } else {
                document.body.appendChild(alertDiv);
            }
            
            // Auto-dismiss after 8 seconds for warning/error messages
            const timeout = type === 'warning' || type === 'danger' ? 8000 : 5000;
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, timeout);
        }

        function openCreateDivisionModal() {
            document.getElementById('divisionForm').reset();
            document.getElementById('divisionId').value = '';
            document.getElementById('currentBuId').value = currentBuId;
            document.getElementById('divisionModalLabel').textContent = 'Nouvelle Division';
            new bootstrap.Modal(document.getElementById('divisionModal')).show();
        }

        async function saveDivision() {
            const form = document.getElementById('divisionForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const id = document.getElementById('divisionId').value;
            const formData = {
                nom: document.getElementById('divisionName').value.trim(),
                code: document.getElementById('divisionCode').value.trim(),
                description: document.getElementById('divisionDescription').value.trim(),
                business_unit_id: currentBuId
            };

            if (!formData.nom) {
                showAlert('Le nom de la Division ne peut pas être vide.', 'danger');
                return;
            }

            try {
                const url = id ? `${API_BASE_URL}/divisions/${id}` : `${API_BASE_URL}/divisions`;
                const method = id ? 'PUT' : 'POST';

                const response = await authenticatedFetch(url, {
                    method: method,
                    body: JSON.stringify(formData)
                });
                const data = await response.json();
                if (data.success) {
                    showAlert(`Division ${id ? 'mise à jour' : 'créée'} avec succès`, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('divisionModal')).hide();
                    // Recharger les divisions de la BU courante sans ré-ouvrir le modal
                    await reloadDivisionsForCurrentBu();
                } else {
                    showAlert(`Erreur lors de la sauvegarde: ${data.message || data.error || 'Erreur inconnue'}`, 'danger');
                }
            } catch (error) {
                console.error('Erreur lors de la sauvegarde:', error);
                showAlert('Erreur lors de la sauvegarde', 'danger');
            }
        }

        async function editDivision(id) {
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/divisions/${id}`);
                const data = await response.json();
                if (data.success) {
                    const division = data.data;
                    document.getElementById('divisionId').value = division.id;
                    document.getElementById('divisionName').value = division.nom;
                    document.getElementById('divisionCode').value = division.code;
                    document.getElementById('divisionDescription').value = division.description || '';
                    document.getElementById('divisionModalLabel').textContent = 'Modifier Division';
                    new bootstrap.Modal(document.getElementById('divisionModal')).show();
                } else {
                    showAlert('Division non trouvée', 'danger');
                }
            } catch (error) {
                console.error('Erreur:', error);
                showAlert('Erreur de connexion', 'danger');
            }
        }

        function deleteDivision(id) {
            divisionToDelete = id;
            new bootstrap.Modal(document.getElementById('deleteDivisionConfirmModal')).show();
        }

        async function confirmDeleteDivision(force = false) {
            if (!divisionToDelete) return;

            try {
                const url = force ? 
                    `${API_BASE_URL}/divisions/${divisionToDelete}?force=true` : 
                    `${API_BASE_URL}/divisions/${divisionToDelete}`;
                
                const response = await authenticatedFetch(url, {
                    method: 'DELETE'
                });
                const data = await response.json();
                
                if (data.success) {
                    const action = data.action === 'deleted' ? 'supprimée définitivement' : 'désactivée';
                    showAlert(`Division ${action} avec succès`, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('deleteDivisionConfirmModal')).hide();
                    // Recharger les divisions de la BU courante sans ré-ouvrir le modal
                    await reloadDivisionsForCurrentBu();
                } else {
                    // Gérer les erreurs détaillées
                    if (data.details) {
                        const reasons = data.details.reasons.join(', ');
                        const message = `${data.message}\n\nRaisons: ${reasons}\n\nSuggestion: ${data.details.suggestion}`;
                        showAlert(message, 'warning');
                    } else {
                        showAlert(data.message || 'Erreur lors de la suppression', 'danger');
                    }
                }
            } catch (error) {
                console.error('Erreur lors de la suppression:', error);
                showAlert('Erreur lors de la suppression', 'danger');
            } finally {
                divisionToDelete = null;
            }
        }

        // ===== CONFIGURATION DES ACTIVITÉS INTERNES =====
        
        // Variables globales pour la configuration des activités
        let activitiesConfig = [];
        let assignmentsConfig = {};

        // Charger les données de configuration quand l'onglet est activé
        document.getElementById('activities-tab').addEventListener('click', function() {
            loadActivitiesConfig();
        });

        // Charger les activités internes pour la configuration
        async function loadActivitiesConfig() {
            try {
                const response = await fetch('/api/internal-activities', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    activitiesConfig = data.data;
                    loadAssignmentsConfig();
                    updateConfigStatistics();
                    populateConfigFilter();
                } else {
                    console.error('Erreur lors du chargement des activités');
                }
            } catch (error) {
                console.error('Erreur:', error);
            }
        }

        // Charger les affectations existantes pour la configuration
        async function loadAssignmentsConfig() {
            assignmentsConfig = {};
            
            for (const bu of businessUnits) {
                try {
                    const response = await fetch(`/api/internal-activities/business-unit/${bu.id}`, {
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        assignmentsConfig[bu.id] = data.data.map(activity => activity.id);
                    }
                } catch (error) {
                    console.error(`Erreur lors du chargement des affectations pour ${bu.nom}:`, error);
                    assignmentsConfig[bu.id] = [];
                }
            }
            
            displayBusinessUnitsConfig();
            updateConfigStatistics();
            
            // Initialiser le statut "sauvegardé" pour toutes les BU après un délai pour laisser le DOM se charger
            setTimeout(() => {
                businessUnits.forEach(bu => {
                    updateBusinessUnitStatus(bu.id, true);
                });
            }, 100);
        }

        // Afficher les business units pour la configuration
        function displayBusinessUnitsConfig() {
            const container = document.getElementById('businessUnitsConfigContainer');
            container.innerHTML = '';

            const selectedBu = document.getElementById('businessUnitFilter').value;
            const showConfiguredOnly = document.getElementById('showConfiguredOnly').checked;

            businessUnits.forEach(bu => {
                // Filtrer si nécessaire
                if (selectedBu && bu.id !== selectedBu) return;
                if (showConfiguredOnly && (!assignmentsConfig[bu.id] || assignmentsConfig[bu.id].length === 0)) return;

                const card = document.createElement('div');
                card.className = 'card mb-3';
                
                const assignedActivities = assignmentsConfig[bu.id] || [];
                const assignedCount = assignedActivities.length;
                
                card.innerHTML = `
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <div>
                                <h6 class="mb-1">
                                    <i class="fas fa-building me-2"></i>${bu.nom}
                                </h6>
                                <p class="text-muted mb-0">${bu.description || 'Aucune description'}</p>
                            </div>
                            <div class="text-end">
                                <span class="badge bg-primary">${assignedCount} activité${assignedCount > 1 ? 's' : ''}</span>
                                <button class="btn btn-sm btn-outline-primary ms-2" onclick="viewActivityDetails('${bu.id}')">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <h6><i class="fas fa-list me-2"></i>Activités Internes</h6>
                            <div class="row">
                                ${activitiesConfig.map(activity => {
                                    const isAssigned = assignedActivities.includes(activity.id);
                                    return `
                                        <div class="col-md-6 mb-2">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" 
                                                       id="config_bu_${bu.id}_activity_${activity.id}"
                                                       ${isAssigned ? 'checked' : ''}
                                                       onchange="toggleActivityAssignment('${bu.id}', '${activity.id}', this.checked)">
                                                <label class="form-check-label" for="config_bu_${bu.id}_activity_${activity.id}">
                                                    <strong>${activity.name}</strong>
                                                    <br>
                                                    <small class="text-muted">${activity.description || 'Aucune description'}</small>
                                                </label>
                                            </div>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="text-muted small">
                                <i class="fas fa-info-circle me-1"></i>
                                <span id="status_${bu.id}">Modifications non sauvegardées</span>
                            </div>
                            <button class="btn btn-sm btn-success" onclick="saveBusinessUnitConfigurations('${bu.id}')" id="save_btn_${bu.id}">
                                <i class="fas fa-save me-1"></i>Sauvegarder
                            </button>
                        </div>
                    </div>
                `;
                
                container.appendChild(card);
            });
        }

        // Basculer une affectation d'activité
        function toggleActivityAssignment(businessUnitId, activityId, isAssigned) {
            if (!assignmentsConfig[businessUnitId]) {
                assignmentsConfig[businessUnitId] = [];
            }
            
            if (isAssigned) {
                if (!assignmentsConfig[businessUnitId].includes(activityId)) {
                    assignmentsConfig[businessUnitId].push(activityId);
                }
            } else {
                assignmentsConfig[businessUnitId] = assignmentsConfig[businessUnitId].filter(id => id !== activityId);
            }
            
            // Mettre à jour le statut pour indiquer qu'il y a des modifications non sauvegardées
            updateBusinessUnitStatus(businessUnitId, false);
            updateConfigStatistics();
        }

        // Mettre à jour le statut d'une business unit
        function updateBusinessUnitStatus(businessUnitId, isSaved = false) {
            const statusElement = document.getElementById(`status_${businessUnitId}`);
            const saveButton = document.getElementById(`save_btn_${businessUnitId}`);
            
            if (statusElement && saveButton) {
                if (isSaved) {
                    statusElement.innerHTML = '<i class="fas fa-check-circle text-success me-1"></i>Sauvegardé';
                    statusElement.className = 'text-success small';
                    saveButton.disabled = true;
                    saveButton.innerHTML = '<i class="fas fa-check me-1"></i>Sauvegardé';
                    saveButton.className = 'btn btn-sm btn-outline-success';
                } else {
                    statusElement.innerHTML = '<i class="fas fa-exclamation-triangle text-warning me-1"></i>Modifications non sauvegardées';
                    statusElement.className = 'text-warning small';
                    saveButton.disabled = false;
                    saveButton.innerHTML = '<i class="fas fa-save me-1"></i>Sauvegarder';
                    saveButton.className = 'btn btn-sm btn-success';
                }
            }
        }

        // Sauvegarder les configurations d'activités pour une business unit spécifique
        async function saveBusinessUnitConfigurations(businessUnitId) {
            try {
                const activityIds = assignmentsConfig[businessUnitId] || [];
                const saveButton = document.getElementById(`save_btn_${businessUnitId}`);
                
                // Désactiver le bouton pendant la sauvegarde
                if (saveButton) {
                    saveButton.disabled = true;
                    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Sauvegarde...';
                }
                
                // Si aucune activité n'est assignée, supprimer toutes les affectations
                if (activityIds.length === 0) {
                    // Supprimer toutes les affectations existantes pour cette BU
                    const response = await fetch(`/api/internal-activities/clear-business-unit/${businessUnitId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                        }
                    });
                    
                    if (response.ok) {
                        updateBusinessUnitStatus(businessUnitId, true);
                        showAlert(`Configuration de la BU sauvegardée avec succès`, 'success');
                    } else {
                        throw new Error('Erreur lors de la suppression des affectations');
                    }
                } else {
                    // Affecter les activités sélectionnées à cette BU
                    const promises = activityIds.map(activityId =>
                        fetch(`/api/internal-activities/${activityId}/assign`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                            },
                            body: JSON.stringify({
                                business_unit_ids: [businessUnitId]
                            })
                        })
                    );
                    
                    const responses = await Promise.all(promises);
                    const allSuccessful = responses.every(response => response.ok);
                    
                    if (allSuccessful) {
                        updateBusinessUnitStatus(businessUnitId, true);
                        showAlert(`Configuration de la BU sauvegardée avec succès`, 'success');
                    } else {
                        throw new Error('Erreur lors de la sauvegarde des affectations');
                    }
                }
                
            } catch (error) {
                console.error('Erreur lors de la sauvegarde:', error);
                showAlert('Erreur lors de la sauvegarde', 'danger');
                
                // Réactiver le bouton en cas d'erreur
                const saveButton = document.getElementById(`save_btn_${businessUnitId}`);
                if (saveButton) {
                    saveButton.disabled = false;
                    saveButton.innerHTML = '<i class="fas fa-save me-1"></i>Sauvegarder';
                }
            }
        }

        // Sauvegarder toutes les configurations d'activités (fonction existante)
        async function saveAllActivityConfigurations() {
            const promises = [];
            
            for (const [businessUnitId, activityIds] of Object.entries(assignmentsConfig)) {
                if (activityIds.length > 0) {
                    promises.push(
                        fetch(`/api/internal-activities/${activityIds[0]}/assign`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                            },
                            body: JSON.stringify({
                                business_unit_ids: activityIds
                            })
                        })
                    );
                }
            }
            
            try {
                await Promise.all(promises);
                showAlert('Configurations sauvegardées avec succès', 'success');
                await loadAssignmentsConfig(); // Recharger les données
            } catch (error) {
                console.error('Erreur lors de la sauvegarde:', error);
                showAlert('Erreur lors de la sauvegarde', 'danger');
            }
        }

        // Voir les détails d'une business unit pour les activités
        async function viewActivityDetails(businessUnitId) {
            const bu = businessUnits.find(b => b.id === businessUnitId);
            const assignedActivities = assignmentsConfig[businessUnitId] || [];
            
            const modalBody = document.getElementById('activityDetailsModalBody');
            modalBody.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h6>Informations Business Unit</h6>
                        <p><strong>Nom:</strong> ${bu.nom}</p>
                        <p><strong>Description:</strong> ${bu.description || 'Aucune description'}</p>
                        <p><strong>Activités assignées:</strong> ${assignedActivities.length}</p>
                    </div>
                    <div class="col-md-6">
                        <h6>Activités assignées</h6>
                        ${assignedActivities.length > 0 
                            ? activitiesConfig.filter(a => assignedActivities.includes(a.id))
                                .map(activity => `<span class="badge bg-primary me-1">${activity.name}</span>`)
                                .join('')
                            : '<p class="text-muted">Aucune activité assignée</p>'
                        }
                    </div>
                </div>
            `;
            
            const modal = new bootstrap.Modal(document.getElementById('activityDetailsModal'));
            modal.show();
        }

        // Mettre à jour les statistiques de configuration
        function updateConfigStatistics() {
            document.getElementById('totalBusinessUnitsConfig').textContent = businessUnits.length;
            document.getElementById('totalActivitiesConfig').textContent = activitiesConfig.length;
            
            const totalAssignments = Object.values(assignmentsConfig).reduce((sum, ids) => sum + ids.length, 0);
            document.getElementById('totalAssignmentsConfig').textContent = totalAssignments;
            
            const configuredUnits = Object.values(assignmentsConfig).filter(ids => ids.length > 0).length;
            document.getElementById('configuredUnitsConfig').textContent = configuredUnits;
        }

        // Peupler le filtre de configuration
        function populateConfigFilter() {
            const select = document.getElementById('businessUnitFilter');
            select.innerHTML = '<option value="">Toutes les Business Units</option>';
            
            businessUnits.forEach(bu => {
                const option = document.createElement('option');
                option.value = bu.id;
                option.textContent = bu.nom;
                select.appendChild(option);
            });
        }

        // Événements de filtrage pour la configuration
        document.getElementById('businessUnitFilter').addEventListener('change', displayBusinessUnitsConfig);
        document.getElementById('showConfiguredOnly').addEventListener('change', displayBusinessUnitsConfig);

        // =====================================================
        // GESTION DES RESPONSABLES
        // =====================================================

        let managersData = {
            businessUnits: [],
            divisions: [],
            collaborators: []
        };

        // Charger les données des responsables
        async function loadManagersData() {
            try {
                // Charger tous les collaborateurs pour avoir la liste complète
                const collaboratorsRes = await fetch('/api/collaborateurs?limit=1000', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
                const collaboratorsData = await collaboratorsRes.json();
                managersData.collaborators = collaboratorsData.data || [];

                // Charger les Business Units avec leurs responsables
                const buRes = await fetch('/api/business-units', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
                const buData = await buRes.json();
                managersData.businessUnits = buData.data || [];

                // Charger les Divisions avec leurs responsables
                const divRes = await fetch('/api/divisions', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
                const divData = await divRes.json();
                managersData.divisions = divData.data || [];

                // Charger les responsables pour chaque BU
                for (const bu of managersData.businessUnits) {
                    const managersRes = await fetch(`/api/managers/business-units/${bu.id}/managers`, {
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                        }
                    });
                    const managersData = await managersRes.json();
                    bu.managers = managersData.success ? managersData.data : null;
                }

                // Charger les responsables pour chaque Division
                for (const div of managersData.divisions) {
                    const managersRes = await fetch(`/api/managers/divisions/${div.id}/managers`, {
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                        }
                    });
                    const managersData = await managersRes.json();
                    div.managers = managersData.success ? managersData.data : null;
                }

                // Afficher les données
                displayBusinessUnitsManagers();
                displayDivisionsManagers();
                updateManagersStatistics();

            } catch (error) {
                console.error('Erreur chargement données responsables:', error);
                showAlert('Erreur lors du chargement des données des responsables', 'danger');
            }
        }

        // Afficher les Business Units avec leurs responsables
        function displayBusinessUnitsManagers() {
            const container = document.getElementById('businessUnitsManagersContainer');
            
            if (managersData.businessUnits.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-building fa-3x text-muted mb-3"></i>
                        <p class="text-muted">Aucune Business Unit trouvée</p>
                    </div>
                `;
                return;
            }

            let html = '';
            managersData.businessUnits.forEach(bu => {
                const hasManagers = bu.managers && (bu.managers.principal_id || bu.managers.adjoint_id);
                const cardClass = hasManagers ? 'manager-card has-managers' : 'manager-card no-managers';
                
                html += `
                    <div class="${cardClass}">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h6 class="mb-2">
                                    <i class="fas fa-building text-primary me-2"></i>
                                    ${bu.nom}
                                </h6>
                                <p class="text-muted mb-2">${bu.description || 'Aucune description'}</p>
                                <p class="text-muted small mb-3">
                                    <i class="fas fa-code me-1"></i>Code: ${bu.code}
                                    <span class="mx-2">•</span>
                                    <i class="fas fa-users me-1"></i>${getEligibleCollaboratorsCount(bu.id, 'business-unit')} collaborateur(s) éligible(s)
                                </p>
                                
                                ${hasManagers ? `
                                    <div class="manager-info">
                                        ${bu.managers.principal_id ? `
                                            <div class="manager-avatar">
                                                ${getInitials(getCollaboratorName(bu.managers.principal_id))}
                                            </div>
                                            <div class="manager-details">
                                                <h6>${getCollaboratorName(bu.managers.principal_id)}</h6>
                                                <p>${getCollaboratorEmail(bu.managers.principal_id)}</p>
                                                <div class="manager-badges">
                                                    <span class="manager-badge badge-principal">Responsable Principal</span>
                                                </div>
                                            </div>
                                        ` : ''}
                                        
                                        ${bu.managers.adjoint_id ? `
                                            <div class="manager-avatar">
                                                ${getInitials(getCollaboratorName(bu.managers.adjoint_id))}
                                            </div>
                                            <div class="manager-details">
                                                <h6>${getCollaboratorName(bu.managers.adjoint_id)}</h6>
                                                <p>${getCollaboratorEmail(bu.managers.adjoint_id)}</p>
                                                <div class="manager-badges">
                                                    <span class="manager-badge badge-adjoint">Responsable Adjoint</span>
                                                </div>
                                            </div>
                                        ` : ''}
                                    </div>
                                ` : `
                                    <div class="no-managers-alert">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        Aucun responsable assigné à cette Business Unit
                                    </div>
                                `}
                            </div>
                            <div class="manager-actions">
                                <button class="btn btn-sm btn-outline-primary" onclick="openManagersModal('${bu.id}', 'business-unit', '${bu.nom}')">
                                    <i class="fas fa-users-cog me-1"></i>
                                    ${hasManagers ? 'Modifier' : 'Assigner'}
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        // Afficher les Divisions avec leurs responsables
        function displayDivisionsManagers() {
            const container = document.getElementById('divisionsManagersContainer');
            
            if (managersData.divisions.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-sitemap fa-3x text-muted mb-3"></i>
                        <p class="text-muted">Aucune Division trouvée</p>
                    </div>
                `;
                return;
            }

            let html = '';
            managersData.divisions.forEach(div => {
                const hasManagers = div.managers && (div.managers.principal_id || div.managers.adjoint_id);
                const cardClass = hasManagers ? 'manager-card has-managers' : 'manager-card no-managers';
                const buName = getBusinessUnitName(div.business_unit_id);
                
                html += `
                    <div class="${cardClass}">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h6 class="mb-2">
                                    <i class="fas fa-sitemap text-success me-2"></i>
                                    ${div.nom}
                                </h6>
                                <p class="text-muted mb-2">${div.description || 'Aucune description'}</p>
                                <p class="text-muted small mb-3">
                                    <i class="fas fa-code me-1"></i>Code: ${div.code}
                                    <span class="mx-2">•</span>
                                    <i class="fas fa-building me-1"></i>BU: ${buName}
                                    <span class="mx-2">•</span>
                                    <i class="fas fa-users me-1"></i>${getEligibleCollaboratorsCount(div.id, 'division')} collaborateur(s) éligible(s)
                                </p>
                                
                                ${hasManagers ? `
                                    <div class="manager-info">
                                        ${div.managers.principal_id ? `
                                            <div class="manager-avatar">
                                                ${getInitials(getCollaboratorName(div.managers.principal_id))}
                                            </div>
                                            <div class="manager-details">
                                                <h6>${getCollaboratorName(div.managers.principal_id)}</h6>
                                                <p>${getCollaboratorEmail(div.managers.principal_id)}</p>
                                                <div class="manager-badges">
                                                    <span class="manager-badge badge-principal">Responsable Principal</span>
                                                </div>
                                            </div>
                                        ` : ''}
                                        
                                        ${div.managers.adjoint_id ? `
                                            <div class="manager-avatar">
                                                ${getInitials(getCollaboratorName(div.managers.adjoint_id))}
                                            </div>
                                            <div class="manager-details">
                                                <h6>${getCollaboratorName(div.managers.adjoint_id)}</h6>
                                                <p>${getCollaboratorEmail(div.managers.adjoint_id)}</p>
                                                <div class="manager-badges">
                                                    <span class="manager-badge badge-adjoint">Responsable Adjoint</span>
                                                </div>
                                            </div>
                                        ` : ''}
                                    </div>
                                ` : `
                                    <div class="no-managers-alert">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        Aucun responsable assigné à cette Division
                                    </div>
                                `}
                            </div>
                            <div class="manager-actions">
                                <button class="btn btn-sm btn-outline-primary" onclick="openManagersModal('${div.id}', 'division', '${div.nom}')">
                                    <i class="fas fa-users-cog me-1"></i>
                                    ${hasManagers ? 'Modifier' : 'Assigner'}
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        // Mettre à jour les statistiques des responsables
        function updateManagersStatistics() {
            const totalBU = managersData.businessUnits.length;
            const totalDiv = managersData.divisions.length;
            
            let assignedManagers = 0;
            let unassignedUnits = 0;
            
            // Compter les BU avec responsables
            managersData.businessUnits.forEach(bu => {
                if (bu.managers && (bu.managers.principal_id || bu.managers.adjoint_id)) {
                    assignedManagers++;
                } else {
                    unassignedUnits++;
                }
            });
            
            // Compter les Divisions avec responsables
            managersData.divisions.forEach(div => {
                if (div.managers && (div.managers.principal_id || div.managers.adjoint_id)) {
                    assignedManagers++;
                } else {
                    unassignedUnits++;
                }
            });
            
            document.getElementById('totalBusinessUnitsManagers').textContent = totalBU;
            document.getElementById('totalDivisionsManagers').textContent = totalDiv;
            document.getElementById('assignedManagers').textContent = assignedManagers;
            document.getElementById('unassignedUnits').textContent = unassignedUnits;
        }

        // Fonctions utilitaires
        function getCollaboratorName(collaboratorId) {
            const collaborator = managersData.collaborators.find(c => c.id === collaboratorId);
            return collaborator ? `${collaborator.prenom} ${collaborator.nom}` : 'Collaborateur inconnu';
        }

        function getCollaboratorEmail(collaboratorId) {
            const collaborator = managersData.collaborators.find(c => c.id === collaboratorId);
            return collaborator ? collaborator.email : '';
        }

        function getBusinessUnitName(buId) {
            const bu = managersData.businessUnits.find(b => b.id === buId);
            return bu ? bu.nom : 'BU inconnue';
        }

        function getInitials(name) {
            return name.split(' ').map(n => n.charAt(0)).join('').toUpperCase();
        }

        // Compter les collaborateurs éligibles pour une entité
        function getEligibleCollaboratorsCount(entityId, entityType) {
            if (entityType === 'business-unit') {
                return managersData.collaborators.filter(collab => 
                    collab.business_unit_id === entityId && collab.statut === 'ACTIF'
                ).length;
            } else if (entityType === 'division') {
                return managersData.collaborators.filter(collab => 
                    collab.division_id === entityId && collab.statut === 'ACTIF'
                ).length;
            }
            return 0;
        }

        // Ouvrir le modal de gestion des responsables
        async function openManagersModal(entityId, entityType, entityName) {
            try {
                document.getElementById('entityId').value = entityId;
                document.getElementById('entityType').value = entityType;
                document.getElementById('entity-name-display').textContent = entityName;
                
                // Peupler les listes de collaborateurs
                populateManagerSelects();
                
                // Vérifier s'il y a des collaborateurs éligibles et ajuster le bouton de sauvegarde
                const eligibleCount = getEligibleCollaboratorsCount(entityId, entityType);
                const saveButton = document.querySelector('#managersModal .btn-primary');
                if (eligibleCount === 0) {
                    saveButton.disabled = true;
                    saveButton.innerHTML = '<i class="fas fa-ban me-1"></i>Aucun collaborateur éligible';
                } else {
                    saveButton.disabled = false;
                    saveButton.innerHTML = '<i class="fas fa-save me-1"></i>Enregistrer les Responsables';
                }
                
                // Charger les responsables actuels
                const endpoint = entityType === 'business-unit' ? 
                    `/api/managers/business-units/${entityId}/managers` :
                    `/api/managers/divisions/${entityId}/managers`;
                    
                const managersRes = await fetch(endpoint, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
                const managersData = await managersRes.json();
                
                if (managersData.success && managersData.data) {
                    document.getElementById('principalManager').value = managersData.data.principal_id || '';
                    document.getElementById('adjointManager').value = managersData.data.adjoint_id || '';
                    
                    // Afficher les informations actuelles
                    displayCurrentManagersInfo(managersData.data);
                } else {
                    document.getElementById('principalManager').value = '';
                    document.getElementById('adjointManager').value = '';
                    document.getElementById('currentManagersInfo').style.display = 'none';
                }
                
                const modal = new bootstrap.Modal(document.getElementById('managersModal'));
                modal.show();
                
            } catch (error) {
                console.error('Erreur ouverture modal responsables:', error);
                showAlert('Erreur lors de l\'ouverture du modal', 'danger');
            }
        }

        // Peupler les listes de collaborateurs
        function populateManagerSelects() {
            const principalSelect = document.getElementById('principalManager');
            const adjointSelect = document.getElementById('adjointManager');
            const entityId = document.getElementById('entityId').value;
            const entityType = document.getElementById('entityType').value;
            
            // Vider les listes
            principalSelect.innerHTML = '<option value="">Sélectionnez un responsable principal</option>';
            adjointSelect.innerHTML = '<option value="">Sélectionnez un responsable adjoint (optionnel)</option>';
            
            // Filtrer les collaborateurs selon le type d'entité
            let eligibleCollaborators = [];
            
            if (entityType === 'business-unit') {
                // Pour une Business Unit, prendre les collaborateurs de cette BU
                eligibleCollaborators = managersData.collaborators.filter(collab => 
                    collab.business_unit_id === entityId && collab.statut === 'ACTIF'
                );
            } else if (entityType === 'division') {
                // Pour une Division, prendre les collaborateurs de cette division
                eligibleCollaborators = managersData.collaborators.filter(collab => 
                    collab.division_id === entityId && collab.statut === 'ACTIF'
                );
            }
            
            // Ajouter les collaborateurs éligibles
            eligibleCollaborators.forEach(collab => {
                const option1 = document.createElement('option');
                option1.value = collab.id;
                option1.textContent = `${collab.prenom} ${collab.nom} (${collab.email})`;
                principalSelect.appendChild(option1);
                
                const option2 = document.createElement('option');
                option2.value = collab.id;
                option2.textContent = `${collab.prenom} ${collab.nom} (${collab.email})`;
                adjointSelect.appendChild(option2);
            });
            
            // Afficher un message si aucun collaborateur éligible
            if (eligibleCollaborators.length === 0) {
                const noOption1 = document.createElement('option');
                noOption1.value = "";
                noOption1.textContent = "Aucun collaborateur éligible trouvé";
                noOption1.disabled = true;
                principalSelect.appendChild(noOption1);
                
                const noOption2 = document.createElement('option');
                noOption2.value = "";
                noOption2.textContent = "Aucun collaborateur éligible trouvé";
                noOption2.disabled = true;
                adjointSelect.appendChild(noOption2);
                
                // Afficher l'alerte
                document.getElementById('noEligibleCollaboratorsAlert').style.display = 'block';
            } else {
                // Masquer l'alerte
                document.getElementById('noEligibleCollaboratorsAlert').style.display = 'none';
            }
        }

        // Afficher les informations des responsables actuels
        function displayCurrentManagersInfo(managers) {
            const container = document.getElementById('currentManagersContent');
            const infoDiv = document.getElementById('currentManagersInfo');
            
            if (managers.principal_id || managers.adjoint_id) {
                let html = '<div class="row">';
                
                if (managers.principal_id) {
                    html += `
                        <div class="col-md-6">
                            <div class="d-flex align-items-center mb-2">
                                <div class="manager-avatar me-3">
                                    ${getInitials(getCollaboratorName(managers.principal_id))}
                                </div>
                                <div>
                                    <h6 class="mb-1">${getCollaboratorName(managers.principal_id)}</h6>
                                    <p class="text-muted mb-0 small">${getCollaboratorEmail(managers.principal_id)}</p>
                                    <span class="manager-badge badge-principal">Responsable Principal</span>
                                </div>
                            </div>
                        </div>
                    `;
                }
                
                if (managers.adjoint_id) {
                    html += `
                        <div class="col-md-6">
                            <div class="d-flex align-items-center mb-2">
                                <div class="manager-avatar me-3">
                                    ${getInitials(getCollaboratorName(managers.adjoint_id))}
                                </div>
                                <div>
                                    <h6 class="mb-1">${getCollaboratorName(managers.adjoint_id)}</h6>
                                    <p class="text-muted mb-0 small">${getCollaboratorEmail(managers.adjoint_id)}</p>
                                    <span class="manager-badge badge-adjoint">Responsable Adjoint</span>
                                </div>
                            </div>
                        </div>
                    `;
                }
                
                html += '</div>';
                container.innerHTML = html;
                infoDiv.style.display = 'block';
            } else {
                infoDiv.style.display = 'none';
            }
        }

        // Sauvegarder les responsables
        async function saveManagers() {
            try {
                const entityId = document.getElementById('entityId').value;
                const entityType = document.getElementById('entityType').value;
                const principalId = document.getElementById('principalManager').value || null;
                const adjointId = document.getElementById('adjointManager').value || null;
                
                // Vérifier s'il y a des collaborateurs éligibles
                const eligibleCount = getEligibleCollaboratorsCount(entityId, entityType);
                if (eligibleCount === 0) {
                    showAlert('Aucun collaborateur éligible pour cette entité. Impossible de sauvegarder.', 'warning');
                    return;
                }
                
                // Validation
                if (!principalId) {
                    showAlert('Veuillez sélectionner un responsable principal', 'warning');
                    return;
                }
                
                if (principalId && adjointId && principalId === adjointId) {
                    showAlert('Le responsable principal et l\'adjoint doivent être des personnes différentes', 'warning');
                    return;
                }
                
                const endpoint = entityType === 'business-unit' ? 
                    `/api/managers/business-units/${entityId}/managers` :
                    `/api/managers/divisions/${entityId}/managers`;
                
                const response = await fetch(endpoint, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    },
                    body: JSON.stringify({
                        principal_id: principalId,
                        adjoint_id: adjointId
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Responsables assignés avec succès !', 'success');
                    
                    // Fermer le modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('managersModal'));
                    modal.hide();
                    
                    // Recharger les données
                    await loadManagersData();
                    
                } else {
                    showAlert('Erreur: ' + (result.error || 'Erreur lors de l\'assignation'), 'danger');
                }
                
            } catch (error) {
                console.error('Erreur sauvegarde responsables:', error);
                showAlert('Erreur lors de la sauvegarde des responsables', 'danger');
            }
        }

        // Événements pour les filtres des responsables
        document.getElementById('entityTypeFilter').addEventListener('change', filterManagers);
        document.getElementById('managerStatusFilter').addEventListener('change', filterManagers);
        document.getElementById('showOnlyUnassigned').addEventListener('change', filterManagers);

        // Fonction de filtrage des responsables
        function filterManagers() {
            const entityTypeFilter = document.getElementById('entityTypeFilter').value;
            const managerStatusFilter = document.getElementById('managerStatusFilter').value;
            const showOnlyUnassigned = document.getElementById('showOnlyUnassigned').checked;
            
            // Indicateur visuel des filtres actifs
            const filtersCard = document.querySelector('#managers .card');
            const hasActiveFilters = entityTypeFilter || managerStatusFilter || showOnlyUnassigned;
            
            if (hasActiveFilters) {
                filtersCard.classList.add('filters-active');
            } else {
                filtersCard.classList.remove('filters-active');
            }
            
            // Filtrer les Business Units
            let filteredBusinessUnits = managersData.businessUnits;
            
            // Filtre par statut des responsables
            if (managerStatusFilter === 'assigned') {
                filteredBusinessUnits = filteredBusinessUnits.filter(bu => 
                    bu.managers && (bu.managers.principal_id || bu.managers.adjoint_id)
                );
            } else if (managerStatusFilter === 'unassigned') {
                filteredBusinessUnits = filteredBusinessUnits.filter(bu => 
                    !bu.managers || (!bu.managers.principal_id && !bu.managers.adjoint_id)
                );
            }
            
            // Filtre pour afficher seulement les non assignées
            if (showOnlyUnassigned) {
                filteredBusinessUnits = filteredBusinessUnits.filter(bu => 
                    !bu.managers || (!bu.managers.principal_id && !bu.managers.adjoint_id)
                );
            }
            
            // Filtrer les Divisions
            let filteredDivisions = managersData.divisions;
            
            // Filtre par statut des responsables
            if (managerStatusFilter === 'assigned') {
                filteredDivisions = filteredDivisions.filter(div => 
                    div.managers && (div.managers.principal_id || div.managers.adjoint_id)
                );
            } else if (managerStatusFilter === 'unassigned') {
                filteredDivisions = filteredDivisions.filter(div => 
                    !div.managers || (!div.managers.principal_id && !div.managers.adjoint_id)
                );
            }
            
            // Filtre pour afficher seulement les non assignées
            if (showOnlyUnassigned) {
                filteredDivisions = filteredDivisions.filter(div => 
                    !div.managers || (!div.managers.principal_id && !div.managers.adjoint_id)
                );
            }
            
            // Afficher selon le filtre de type d'entité
            if (entityTypeFilter === 'business-unit') {
                displayFilteredBusinessUnitsManagers(filteredBusinessUnits);
                document.getElementById('divisionsManagersContainer').innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-filter fa-2x text-muted mb-3"></i>
                        <p class="text-muted">Filtre actif : Business Units uniquement</p>
                    </div>
                `;
            } else if (entityTypeFilter === 'division') {
                displayFilteredDivisionsManagers(filteredDivisions);
                document.getElementById('businessUnitsManagersContainer').innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-filter fa-2x text-muted mb-3"></i>
                        <p class="text-muted">Filtre actif : Divisions uniquement</p>
                    </div>
                `;
            } else {
                // Afficher les deux types
                displayFilteredBusinessUnitsManagers(filteredBusinessUnits);
                displayFilteredDivisionsManagers(filteredDivisions);
            }
            
            // Mettre à jour les statistiques filtrées
            updateFilteredStatistics(filteredBusinessUnits, filteredDivisions);
        }

        // Afficher les Business Units filtrées
        function displayFilteredBusinessUnitsManagers(businessUnits) {
            const container = document.getElementById('businessUnitsManagersContainer');
            
            if (businessUnits.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-filter fa-3x text-muted mb-3"></i>
                        <p class="text-muted">Aucune Business Unit ne correspond aux critères de filtrage</p>
                    </div>
                `;
                return;
            }

            let html = '';
            businessUnits.forEach(bu => {
                const hasManagers = bu.managers && (bu.managers.principal_id || bu.managers.adjoint_id);
                const cardClass = hasManagers ? 'manager-card has-managers' : 'manager-card no-managers';
                
                html += `
                    <div class="${cardClass}">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h6 class="mb-2">
                                    <i class="fas fa-building text-primary me-2"></i>
                                    ${bu.nom}
                                </h6>
                                <p class="text-muted mb-2">${bu.description || 'Aucune description'}</p>
                                <p class="text-muted small mb-3">
                                    <i class="fas fa-code me-1"></i>Code: ${bu.code}
                                    <span class="mx-2">•</span>
                                    <i class="fas fa-users me-1"></i>${getEligibleCollaboratorsCount(bu.id, 'business-unit')} collaborateur(s) éligible(s)
                                </p>
                                
                                ${hasManagers ? `
                                    <div class="manager-info">
                                        ${bu.managers.principal_id ? `
                                            <div class="manager-avatar">
                                                ${getInitials(getCollaboratorName(bu.managers.principal_id))}
                                            </div>
                                            <div class="manager-details">
                                                <h6>${getCollaboratorName(bu.managers.principal_id)}</h6>
                                                <p>${getCollaboratorEmail(bu.managers.principal_id)}</p>
                                                <div class="manager-badges">
                                                    <span class="manager-badge badge-principal">Responsable Principal</span>
                                                </div>
                                            </div>
                                        ` : ''}
                                        
                                        ${bu.managers.adjoint_id ? `
                                            <div class="manager-avatar">
                                                ${getInitials(getCollaboratorName(bu.managers.adjoint_id))}
                                            </div>
                                            <div class="manager-details">
                                                <h6>${getCollaboratorName(bu.managers.adjoint_id)}</h6>
                                                <p>${getCollaboratorEmail(bu.managers.adjoint_id)}</p>
                                                <div class="manager-badges">
                                                    <span class="manager-badge badge-adjoint">Responsable Adjoint</span>
                                                </div>
                                            </div>
                                        ` : ''}
                                    </div>
                                ` : `
                                    <div class="no-managers-alert">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        Aucun responsable assigné à cette Business Unit
                                    </div>
                                `}
                            </div>
                            <div class="manager-actions">
                                <button class="btn btn-sm btn-outline-primary" onclick="openManagersModal('${bu.id}', 'business-unit', '${bu.nom}')">
                                    <i class="fas fa-users-cog me-1"></i>
                                    ${hasManagers ? 'Modifier' : 'Assigner'}
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        // Afficher les Divisions filtrées
        function displayFilteredDivisionsManagers(divisions) {
            const container = document.getElementById('divisionsManagersContainer');
            
            if (divisions.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-filter fa-3x text-muted mb-3"></i>
                        <p class="text-muted">Aucune Division ne correspond aux critères de filtrage</p>
                    </div>
                `;
                return;
            }

            let html = '';
            divisions.forEach(div => {
                const hasManagers = div.managers && (div.managers.principal_id || div.managers.adjoint_id);
                const cardClass = hasManagers ? 'manager-card has-managers' : 'manager-card no-managers';
                const buName = getBusinessUnitName(div.business_unit_id);
                
                html += `
                    <div class="${cardClass}">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h6 class="mb-2">
                                    <i class="fas fa-sitemap text-success me-2"></i>
                                    ${div.nom}
                                </h6>
                                <p class="text-muted mb-2">${div.description || 'Aucune description'}</p>
                                <p class="text-muted small mb-3">
                                    <i class="fas fa-code me-1"></i>Code: ${div.code}
                                    <span class="mx-2">•</span>
                                    <i class="fas fa-building me-1"></i>BU: ${buName}
                                    <span class="mx-2">•</span>
                                    <i class="fas fa-users me-1"></i>${getEligibleCollaboratorsCount(div.id, 'division')} collaborateur(s) éligible(s)
                                </p>
                                
                                ${hasManagers ? `
                                    <div class="manager-info">
                                        ${div.managers.principal_id ? `
                                            <div class="manager-avatar">
                                                ${getInitials(getCollaboratorName(div.managers.principal_id))}
                                            </div>
                                            <div class="manager-details">
                                                <h6>${getCollaboratorName(div.managers.principal_id)}</h6>
                                                <p>${getCollaboratorEmail(div.managers.principal_id)}</p>
                                                <div class="manager-badges">
                                                    <span class="manager-badge badge-principal">Responsable Principal</span>
                                                </div>
                                            </div>
                                        ` : ''}
                                        
                                        ${div.managers.adjoint_id ? `
                                            <div class="manager-avatar">
                                                ${getInitials(getCollaboratorName(div.managers.adjoint_id))}
                                            </div>
                                            <div class="manager-details">
                                                <h6>${getCollaboratorName(div.managers.adjoint_id)}</h6>
                                                <p>${getCollaboratorEmail(div.managers.adjoint_id)}</p>
                                                <div class="manager-badges">
                                                    <span class="manager-badge badge-adjoint">Responsable Adjoint</span>
                                                </div>
                                            </div>
                                        ` : ''}
                                    </div>
                                ` : `
                                    <div class="no-managers-alert">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        Aucun responsable assigné à cette Division
                                    </div>
                                `}
                            </div>
                            <div class="manager-actions">
                                <button class="btn btn-sm btn-outline-primary" onclick="openManagersModal('${div.id}', 'division', '${div.nom}')">
                                    <i class="fas fa-users-cog me-1"></i>
                                    ${hasManagers ? 'Modifier' : 'Assigner'}
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        // Réinitialiser les filtres
        function resetManagersFilters() {
            document.getElementById('entityTypeFilter').value = '';
            document.getElementById('managerStatusFilter').value = '';
            document.getElementById('showOnlyUnassigned').checked = false;
            
            // Retirer l'indicateur visuel des filtres
            const filtersCard = document.querySelector('#managers .card');
            filtersCard.classList.remove('filters-active');
            
            // Afficher toutes les données
            displayBusinessUnitsManagers();
            displayDivisionsManagers();
            updateManagersStatistics();
        }

        // Mettre à jour les statistiques filtrées
        function updateFilteredStatistics(filteredBusinessUnits, filteredDivisions) {
            const totalBU = filteredBusinessUnits.length;
            const totalDiv = filteredDivisions.length;
            
            let assignedManagers = 0;
            let unassignedUnits = 0;
            
            // Compter les BU avec responsables
            filteredBusinessUnits.forEach(bu => {
                if (bu.managers && (bu.managers.principal_id || bu.managers.adjoint_id)) {
                    assignedManagers++;
                } else {
                    unassignedUnits++;
                }
            });
            
            // Compter les Divisions avec responsables
            filteredDivisions.forEach(div => {
                if (div.managers && (div.managers.principal_id || div.managers.adjoint_id)) {
                    assignedManagers++;
                } else {
                    unassignedUnits++;
                }
            });
            
            document.getElementById('totalBusinessUnitsManagers').textContent = totalBU;
            document.getElementById('totalDivisionsManagers').textContent = totalDiv;
            document.getElementById('assignedManagers').textContent = assignedManagers;
            document.getElementById('unassignedUnits').textContent = unassignedUnits;
        }

        // Charger les données des responsables quand l'onglet est activé
        document.getElementById('managers-tab').addEventListener('shown.bs.tab', function (e) {
            loadManagersData();
        });
    </script>

    <!-- SessionManager pour la gestion centralisée des sessions -->
    <script src="js/session-manager.js"></script>
    </body>
</html>