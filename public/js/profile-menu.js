// Gestionnaire du menu de profil utilisateur
class ProfileMenuManager {
    constructor() {
        this.isInitialized = false;
        this.init();
    }

    init() {
        console.log('üîß Initialisation du ProfileMenuManager');
        
        // Attendre que le DOM soit charg√© ET que la sidebar soit charg√©e
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.waitForSidebar());
        } else {
            // Attendre un peu plus pour s'assurer que tous les scripts sont charg√©s
            setTimeout(() => this.waitForSidebar(), 500);
        }
    }

    waitForSidebar() {
        console.log('‚è≥ Attente du chargement de la sidebar...');
        
        // V√©rifier si les √©l√©ments de la sidebar sont pr√©sents
        const checkSidebar = () => {
            const userProfileToggle = document.getElementById('userProfileToggle');
            const userProfileMenu = document.getElementById('userProfileMenu');
            
            if (userProfileToggle && userProfileMenu) {
                console.log('‚úÖ Sidebar charg√©e, configuration des √©v√©nements');
                this.setupEventListeners();
            } else {
                console.log('‚è≥ Sidebar pas encore charg√©e, nouvelle tentative dans 500ms...');
                setTimeout(checkSidebar, 500);
            }
        };
        
        // Premi√®re v√©rification apr√®s un d√©lai
        setTimeout(checkSidebar, 1000);
    }

    setupEventListeners() {
        console.log('üîß Configuration des gestionnaires d\'√©v√©nements du profil');
        
        // Gestionnaire pour le toggle du profil
        const userProfileToggle = document.getElementById('userProfileToggle');
        const userProfileMenu = document.getElementById('userProfileMenu');
        const profileToggleIcon = document.getElementById('profileToggleIcon');
        
        console.log('üìã √âl√©ments trouv√©s:', {
            userProfileToggle: !!userProfileToggle,
            userProfileMenu: !!userProfileMenu,
            profileToggleIcon: !!profileToggleIcon
        });
        
        if (userProfileToggle && userProfileMenu) {
            userProfileToggle.addEventListener('click', (e) => this.handleToggleClick(e));
            console.log('‚úÖ Gestionnaire d\'√©v√©nement attach√© au toggle');
        } else {
            console.error('‚ùå √âl√©ments manquants pour le toggle du profil');
        }

        // Gestionnaire pour "Mon profil"
        const profileMenuItem = document.getElementById('profileMenuItem');
        if (profileMenuItem) {
            profileMenuItem.addEventListener('click', () => this.handleProfileClick());
        }

        // Gestionnaire pour les notifications
        const notificationsMenuItem = document.getElementById('notificationsMenuItem');
        if (notificationsMenuItem) {
            notificationsMenuItem.addEventListener('click', () => this.handleNotificationsClick());
        }

        // Gestionnaire pour les t√¢ches
        const tasksMenuItem = document.getElementById('tasksMenuItem');
        if (tasksMenuItem) {
            tasksMenuItem.addEventListener('click', () => this.handleTasksClick());
        }

        // Gestionnaire pour la d√©connexion
        const logoutMenuItem = document.getElementById('logoutMenuItem');
        if (logoutMenuItem) {
            logoutMenuItem.addEventListener('click', () => this.handleLogoutClick());
        }

        this.isInitialized = true;
        console.log('‚úÖ ProfileMenuManager initialis√© avec succ√®s');
    }

    handleToggleClick(e) {
        e.preventDefault();
        e.stopPropagation();
        
        console.log('üñ±Ô∏è Clic sur le toggle du profil');
        const userProfileToggle = document.getElementById('userProfileToggle');
        const userProfileMenu = document.getElementById('userProfileMenu');
        
        if (!userProfileToggle || !userProfileMenu) {
            console.error('‚ùå √âl√©ments manquants pour le toggle');
            return;
        }
        
        const isExpanded = userProfileMenu.style.display === 'block';
        
        if (isExpanded) {
            // Fermer le menu
            console.log('üìÇ Fermeture du menu');
            userProfileMenu.style.display = 'none';
            userProfileToggle.classList.remove('expanded');
        } else {
            // Ouvrir le menu
            console.log('üìÇ Ouverture du menu');
            userProfileMenu.style.display = 'block';
            userProfileToggle.classList.add('expanded');
        }
    }

    handleProfileClick() {
        console.log('üë§ Ouverture du profil utilisateur');
        window.location.href = '/profile.html';
    }

    handleNotificationsClick() {
        console.log('üîî Ouverture des notifications');
        // Utiliser le syst√®me de notifications existant
        if (typeof window.openNotificationsModal === 'function') {
            window.openNotificationsModal();
        } else {
            console.error('‚ùå Fonction openNotificationsModal non trouv√©e');
            alert('Syst√®me de notifications non disponible');
        }
    }

    handleTasksClick() {
        console.log('üìã Ouverture des t√¢ches');
        // Utiliser le syst√®me de t√¢ches existant
        if (typeof window.openTasksModal === 'function') {
            window.openTasksModal();
        } else {
            console.error('‚ùå Fonction openTasksModal non trouv√©e');
            // Attendre un peu et r√©essayer
            setTimeout(() => {
                if (typeof window.openTasksModal === 'function') {
                    console.log('‚úÖ Fonction openTasksModal trouv√©e apr√®s d√©lai');
                    window.openTasksModal();
                } else {
                    console.error('‚ùå Fonction openTasksModal toujours non trouv√©e');
                    alert('Syst√®me de t√¢ches non disponible');
                }
            }, 1000);
        }
    }

    handleLogoutClick() {
        console.log('üö™ D√©connexion');
        if (confirm('√ätes-vous s√ªr de vouloir vous d√©connecter ?')) {
            localStorage.removeItem('authToken');
            localStorage.removeItem('user');
            window.location.href = '/';
        }
    }

    // M√©thodes publiques pour les tests
    testMenu() {
        console.log('üß™ Test manuel du menu profil');
        const toggle = document.getElementById('userProfileToggle');
        const menu = document.getElementById('userProfileMenu');
        
        if (toggle && menu) {
            console.log('‚úÖ √âl√©ments trouv√©s, test du clic...');
            toggle.click();
            return true;
        } else {
            console.error('‚ùå √âl√©ments manquants');
            return false;
        }
    }

    openMenu() {
        const toggle = document.getElementById('userProfileToggle');
        const menu = document.getElementById('userProfileMenu');
        
        if (toggle && menu) {
            menu.style.display = 'block';
            toggle.classList.add('expanded');
            console.log('‚úÖ Menu forc√© ouvert');
        }
    }

    closeMenu() {
        const toggle = document.getElementById('userProfileToggle');
        const menu = document.getElementById('userProfileMenu');
        
        if (toggle && menu) {
            menu.style.display = 'none';
            toggle.classList.remove('expanded');
            console.log('‚úÖ Menu forc√© ferm√©');
        }
    }

    updateNotificationBubble() {
        const notificationBubble = document.getElementById('notificationBubble');
        const menuNotificationCount = document.getElementById('menuNotificationCount');
        const menuTaskCount = document.getElementById('menuTaskCount');
        
        // Charger les vraies donn√©es de notifications et t√¢ches
        Promise.all([
            this.loadNotificationStats(),
            this.loadTaskStats()
        ]).then(([notificationStats, taskStats]) => {
            const notificationCount = notificationStats.unread_count || 0;
            const taskCount = taskStats.total_tasks || 0;
            
            // Mettre √† jour les badges du menu
            if (menuNotificationCount) menuNotificationCount.textContent = notificationCount;
            if (menuTaskCount) menuTaskCount.textContent = taskCount;
            
            // Afficher la bulle si il y a des notifications ou t√¢ches
            if (notificationBubble) {
                if (notificationCount > 0 || taskCount > 0) {
                    notificationBubble.style.display = 'flex';
                } else {
                    notificationBubble.style.display = 'none';
                }
            }
        }).catch(error => {
            console.error('‚ùå Erreur lors du chargement des statistiques:', error);
        });
    }

    async loadTaskStats() {
        try {
            const response = await fetch('/api/tasks/stats/stats', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                }
            });
            
            if (response.ok) {
                const result = await response.json();
                return result || { total_tasks: 0, active_tasks: 0 };
            } else {
                console.error('‚ùå Erreur API tasks stats:', response.status);
                return { total_tasks: 0, active_tasks: 0 };
            }
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement des stats t√¢ches:', error);
            return { total_tasks: 0, active_tasks: 0 };
        }
    }

    async loadNotificationStats() {
        try {
            const response = await fetch('/api/notifications/stats', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                }
            });
            
            if (response.ok) {
                const result = await response.json();
                return result.data || { unread_count: 0, total_count: 0 };
            } else {
                console.error('‚ùå Erreur API notifications stats:', response.status);
                return { unread_count: 0, total_count: 0 };
            }
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement des stats notifications:', error);
            return { unread_count: 0, total_count: 0 };
        }
    }
}

// Initialiser le gestionnaire
let profileMenuManager = null;

// Fonction d'initialisation
function initProfileMenu() {
    if (!profileMenuManager) {
        console.log('üöÄ Cr√©ation du ProfileMenuManager');
        profileMenuManager = new ProfileMenuManager();
        
        // Mettre √† jour les badges apr√®s un d√©lai plus long
        setTimeout(() => {
            if (profileMenuManager && profileMenuManager.isInitialized) {
                profileMenuManager.updateNotificationBubble();
            }
        }, 3000);
    }
}

// Fonctions globales pour les tests
window.testProfileMenu = function() {
    if (profileMenuManager) {
        return profileMenuManager.testMenu();
    } else {
        console.error('‚ùå ProfileMenuManager non initialis√©');
        return false;
    }
};

window.openProfileMenu = function() {
    if (profileMenuManager) {
        profileMenuManager.openMenu();
    } else {
        console.error('‚ùå ProfileMenuManager non initialis√©');
    }
};

window.closeProfileMenu = function() {
    if (profileMenuManager) {
        profileMenuManager.closeMenu();
    } else {
        console.error('‚ùå ProfileMenuManager non initialis√©');
    }
};

// Fonction pour forcer la r√©initialisation (utile pour les tests)
window.reinitProfileMenu = function() {
    console.log('üîÑ R√©initialisation forc√©e du ProfileMenuManager');
    profileMenuManager = null;
    initProfileMenu();
};

// Initialiser automatiquement
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProfileMenu);
} else {
    initProfileMenu();
}
