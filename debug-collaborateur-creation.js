const { pool } = require('./src/utils/database');

async function debugCollaborateurCreation() {
    try {
        console.log('üîç Diagnostic de la cr√©ation de collaborateurs...\n');
        
        // 1. V√©rifier les collaborateurs r√©cents
        console.log('1Ô∏è‚É£ Collaborateurs r√©cents:');
        const collaborateurs = await pool.query(`
            SELECT id, nom, prenom, email, user_id, created_at
            FROM collaborateurs 
            ORDER BY created_at DESC 
            LIMIT 10
        `);
        
        console.log('üìä Collaborateurs trouv√©s:', collaborateurs.rows.length);
        collaborateurs.rows.forEach((collab, index) => {
            console.log(`  ${index + 1}. ${collab.prenom} ${collab.nom} (${collab.email})`);
            console.log(`     - ID: ${collab.id}`);
            console.log(`     - User ID: ${collab.user_id || 'AUCUN'}`);
            console.log(`     - Cr√©√© le: ${collab.created_at}`);
            console.log('');
        });
        
        // 2. V√©rifier les utilisateurs r√©cents
        console.log('2Ô∏è‚É£ Utilisateurs r√©cents:');
        const users = await pool.query(`
            SELECT id, nom, prenom, email, login, role, created_at
            FROM users 
            ORDER BY created_at DESC 
            LIMIT 10
        `);
        
        console.log('üìä Utilisateurs trouv√©s:', users.rows.length);
        users.rows.forEach((user, index) => {
            console.log(`  ${index + 1}. ${user.prenom} ${user.nom} (${user.email})`);
            console.log(`     - ID: ${user.id}`);
            console.log(`     - Login: ${user.login}`);
            console.log(`     - Role: ${user.role}`);
            console.log(`     - Cr√©√© le: ${user.created_at}`);
            console.log('');
        });
        
        // 3. V√©rifier les collaborateurs sans compte utilisateur
        console.log('3Ô∏è‚É£ Collaborateurs sans compte utilisateur:');
        const collaborateursSansUser = await pool.query(`
            SELECT id, nom, prenom, email, created_at
            FROM collaborateurs 
            WHERE user_id IS NULL
            ORDER BY created_at DESC
        `);
        
        console.log('üìä Collaborateurs sans compte utilisateur:', collaborateursSansUser.rows.length);
        collaborateursSansUser.rows.forEach((collab, index) => {
            console.log(`  ${index + 1}. ${collab.prenom} ${collab.nom} (${collab.email})`);
            console.log(`     - ID: ${collab.id}`);
            console.log(`     - Cr√©√© le: ${collab.created_at}`);
        });
        
        // 4. V√©rifier la route de cr√©ation de collaborateurs
        console.log('\n4Ô∏è‚É£ V√©rification de la route collaborateurs...');
        const routeFile = require('fs').readFileSync('./src/routes/collaborateurs.js', 'utf8');
        
        if (routeFile.includes('createUserAccess')) {
            console.log('‚úÖ La route contient la logique createUserAccess');
        } else {
            console.log('‚ùå La route ne contient PAS la logique createUserAccess');
        }
        
        if (routeFile.includes('UserAccessService')) {
            console.log('‚úÖ La route importe UserAccessService');
        } else {
            console.log('‚ùå La route n\'importe PAS UserAccessService');
        }
        
        // 5. V√©rifier le service UserAccessService
        console.log('\n5Ô∏è‚É£ V√©rification du service UserAccessService...');
        try {
            const UserAccessService = require('./src/services/userAccessService');
            console.log('‚úÖ UserAccessService est disponible');
            
            // Test de g√©n√©ration de login
            const testLogin = await UserAccessService.generateUniqueLogin('Test', 'User');
            console.log(`‚úÖ Test de g√©n√©ration de login: ${testLogin}`);
            
        } catch (error) {
            console.log('‚ùå Erreur avec UserAccessService:', error.message);
        }
        
        await pool.end();
        
        console.log('\n‚úÖ Diagnostic termin√© !');
        
    } catch (error) {
        console.error('‚ùå Erreur:', error);
    }
}

debugCollaborateurCreation(); 