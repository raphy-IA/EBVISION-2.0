const { query } = require('./src/utils/database');

async function checkTasksTableStructure() {
    try {
        console.log('üîç V√©rification de la structure de la table tasks...\n');
        
        // 1. V√©rifier la structure de la table
        console.log('üìã Structure de la table tasks:');
        const structureResult = await query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'tasks' 
            ORDER BY ordinal_position
        `);
        
        if (structureResult.rows.length > 0) {
            console.log('‚úÖ Colonnes trouv√©es:');
            structureResult.rows.forEach((column, index) => {
                console.log(`  ${index + 1}. ${column.column_name} (${column.data_type}) - Nullable: ${column.is_nullable} - Default: ${column.column_default || 'NULL'}`);
            });
        } else {
            console.log('‚ùå Aucune colonne trouv√©e dans la table tasks');
        }
        
        // 2. V√©rifier les contraintes
        console.log('\nüìã Contraintes de la table tasks:');
        const constraintsResult = await query(`
            SELECT conname, contype, pg_get_constraintdef(oid) as definition
            FROM pg_constraint 
            WHERE conrelid = 'tasks'::regclass
        `);
        
        if (constraintsResult.rows.length > 0) {
            console.log('‚úÖ Contraintes trouv√©es:');
            constraintsResult.rows.forEach((constraint, index) => {
                console.log(`  ${index + 1}. ${constraint.conname} (${constraint.contype}): ${constraint.definition}`);
            });
        } else {
            console.log('‚ùå Aucune contrainte trouv√©e');
        }
        
        // 3. V√©rifier les donn√©es existantes
        console.log('\nüìã Donn√©es existantes dans la table tasks:');
        const dataResult = await query('SELECT * FROM tasks LIMIT 5');
        
        if (dataResult.rows.length > 0) {
            console.log(`‚úÖ ${dataResult.rows.length} t√¢ches trouv√©es:`);
            dataResult.rows.forEach((task, index) => {
                console.log(`  ${index + 1}. ID: ${task.id} | Description: ${task.description || 'NULL'} | Autres champs:`, task);
            });
        } else {
            console.log('‚ùå Aucune t√¢che trouv√©e en base de donn√©es');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error.message);
    }
}

checkTasksTableStructure(); 