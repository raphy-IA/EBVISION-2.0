#!/usr/bin/env node

/**
 * Script de diagnostic pour les variables d'environnement
 */

console.log('üîç DIAGNOSTIC DES VARIABLES D\'ENVIRONNEMENT\n');

// 1. Variables syst√®me (avant dotenv)
console.log('1Ô∏è‚É£ VARIABLES SYST√àME (avant dotenv) :');
console.log('=====================================');
console.log(`   DB_HOST = "${process.env.DB_HOST || 'NON D√âFINI'}"`);
console.log(`   DB_PORT = "${process.env.DB_PORT || 'NON D√âFINI'}"`);
console.log(`   DB_NAME = "${process.env.DB_NAME || 'NON D√âFINI'}"`);
console.log(`   DB_USER = "${process.env.DB_USER || 'NON D√âFINI'}"`);
console.log(`   DB_PASSWORD = "${process.env.DB_PASSWORD ? '***configur√©***' : 'NON D√âFINI'}"`);

// 2. Charger dotenv
console.log('\n2Ô∏è‚É£ CHARGEMENT DE DOTENV...');
try {
    require('dotenv').config();
    console.log('‚úÖ dotenv charg√© avec succ√®s');
} catch (error) {
    console.log('‚ùå Erreur lors du chargement de dotenv :');
    console.log(`   ${error.message}`);
}

// 3. Variables apr√®s dotenv
console.log('\n3Ô∏è‚É£ VARIABLES APR√àS DOTENV :');
console.log('============================');
console.log(`   DB_HOST = "${process.env.DB_HOST || 'NON D√âFINI'}"`);
console.log(`   DB_PORT = "${process.env.DB_PORT || 'NON D√âFINI'}"`);
console.log(`   DB_NAME = "${process.env.DB_NAME || 'NON D√âFINI'}"`);
console.log(`   DB_USER = "${process.env.DB_USER || 'NON D√âFINI'}"`);
console.log(`   DB_PASSWORD = "${process.env.DB_PASSWORD ? '***configur√©***' : 'NON D√âFINI'}"`);

// 4. V√©rifier le fichier .env
console.log('\n4Ô∏è‚É£ V√âRIFICATION DU FICHIER .ENV :');
console.log('==================================');
const fs = require('fs');

if (fs.existsSync('.env')) {
    console.log('‚úÖ Fichier .env trouv√©');
    const envContent = fs.readFileSync('.env', 'utf8');
    console.log('üìã Contenu du fichier .env :');
    console.log('============================');
    
    const lines = envContent.split('\n');
    for (const line of lines) {
        if (line.trim() && !line.trim().startsWith('#')) {
            console.log(`   ${line}`);
        }
    }
} else {
    console.log('‚ùå Fichier .env non trouv√©');
}

// 5. Test de connexion directe avec les variables
console.log('\n5Ô∏è‚É£ TEST DE CONNEXION DIRECTE :');
console.log('==============================');

if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_PASSWORD) {
    console.log('‚úÖ Variables de connexion pr√©sentes');
    
    // Construire la cha√Æne de connexion
    const connectionString = `postgresql://${process.env.DB_USER}:${process.env.DB_PASSWORD}@${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`;
    console.log('üìã Cha√Æne de connexion (masqu√©e) :');
    console.log(`   postgresql://${process.env.DB_USER}:***@${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`);
    
    // Test avec pg
    try {
        const { Pool } = require('pg');
        const pool = new Pool({
            host: process.env.DB_HOST,
            port: process.env.DB_PORT,
            database: process.env.DB_NAME,
            user: process.env.DB_USER,
            password: process.env.DB_PASSWORD,
            max: 1,
            idleTimeoutMillis: 30000,
            connectionTimeoutMillis: 2000,
        });
        
        console.log('üîó Tentative de connexion avec pg...');
        
        pool.query('SELECT version()', (err, result) => {
            if (err) {
                console.log('‚ùå Erreur de connexion avec pg :');
                console.log(`   ${err.message}`);
                console.log(`   Code: ${err.code}`);
                console.log(`   Detail: ${err.detail}`);
            } else {
                console.log('‚úÖ Connexion r√©ussie avec pg !');
                console.log(`   Version: ${result.rows[0].version}`);
            }
            pool.end();
        });
        
    } catch (error) {
        console.log('‚ùå Erreur lors de l\'import de pg :');
        console.log(`   ${error.message}`);
    }
} else {
    console.log('‚ùå Variables de connexion manquantes');
    console.log('   V√©rifiez votre fichier .env');
}

console.log('\nüìñ R√âSUM√â DU DIAGNOSTIC :');
console.log('==========================');
console.log('üîç Ce diagnostic montre exactement ce que Node.js voit');
console.log('üîç Comparez avec ce que psql utilise');
console.log('üîç Identifiez les diff√©rences de configuration'); 